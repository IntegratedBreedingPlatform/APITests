{
	"info": {
		"_postman_id": "7000c379-478f-4f93-a6bf-4d6ab1c2f5cf",
		"name": "BMSAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication-controller-brapi",
			"item": [
				{
					"name": "Get admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f49febb0-b357-4910-8f37-d8c45608b69e",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"masterToken\");",
									"pm.environment.set(\"masterToken\", jsonData.access_token);",
									"pm.environment.unset(\"masterTokenExpiry\");",
									"pm.environment.set(\"masterTokenExpiry\", jsonData.expires_in);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{bms_user}}\",\r\n  \"password\": \"{{bms_password}}\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get test user token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a160dbe8-ded0-440d-b25b-663dcdab6efd",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"testuser_token\");",
									"pm.environment.set(\"testuser_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"apitestuser\",\r\n  \"password\": \"apitestuser\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ontology-get-services",
			"item": [
				{
					"name": "GET /crops/{cropname}/methods",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4bfbf6-fb00-4d60-b974-39cd67266395",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Note: Checked details of first, middle and last method only for all methods are too many.",
									"pm.test(\"Check applied method\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"4020\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Applied\");",
									"    pm.expect(jsonData[0].description).to.eql(\"Factor applied\");",
									"});",
									"",
									"",
									"pm.test(\"Check Method for MSE method\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[40].id).to.eql(\"4360\");",
									"    pm.expect(jsonData[40].name).to.eql(\"Method for MSE\");",
									"    pm.expect(jsonData[40].description).to.eql(\"Method for Mean square error statistic\");",
									"});",
									"",
									"",
									"pm.test(\"Check weighed method\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[86].id).to.eql(pm.environment.get(\"weighed_method_id\"));",
									"    pm.expect(jsonData[86].name).to.eql(\"Weighed\");",
									"    pm.expect(jsonData[86].description).to.eql(\"Weighing method\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20b5e9e2-aabf-41f3-aea1-4c93d0b0d71f",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crop/{cropname}/methods/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f361b24b-fd24-4495-8c34-ee81ce6fa78c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Check method id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"weighed_method_id\"));",
									"});",
									"pm.test(\"Check method name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Weighed\");",
									"});",
									"pm.test(\"Check method description\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"Weighing method\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8fa8265-4531-4714-b6a5-b08449379fa0",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods/{{weighed_method_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods",
								"{{weighed_method_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2075338-b35f-4727-adb2-176acdc14784",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Note: Checked details of first, middle and last property only for all properties are too many.",
									"pm.test(\"Check altitude property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"2260\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Altitude\");",
									"    pm.expect(jsonData[0].description).to.eql(\"Altitude\");",
									"});",
									"",
									"",
									"pm.test(\"Check micronutrient property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[78].id).to.eql(\"2440\");",
									"    pm.expect(jsonData[78].name).to.eql(\"Micronutrient\");",
									"    pm.expect(jsonData[78].description).to.eql(\"Micronutrient\");",
									"});",
									"",
									"",
									"pm.test(\"Check trial instance property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[162].id).to.eql(\"2100\");",
									"    pm.expect(jsonData[162].name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData[162].description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e077d811-83a2-4fc6-895b-6ac8d43daa8d",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/properties/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a528bbb-b205-47e0-96e1-7579c482e8b5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check trial instance property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"2100\");",
									"    pm.expect(jsonData.name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData.description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "872efd77-c027-4c61-bea9-b42ecd232411",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties/{{trial_instance_property_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties",
								"{{trial_instance_property_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/scales",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aaa2821f-98f4-4754-a37b-1102c6490fe3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Note: Checked details of first, middle and last property only for all properties are too many.",
									"pm.test(\"Check accession name scale\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"6110\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Accession name\");",
									"    pm.expect(jsonData[0].description).to.eql(\"Unique accession number or name in a genebank or germplasm collection\");",
									"});",
									"",
									"",
									"pm.test(\"Check LOC_ABBR scale\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[41].id).to.eql(\"6016\");",
									"    pm.expect(jsonData[41].name).to.eql(\"LOC_ABBR\");",
									"    pm.expect(jsonData[41].description).to.eql(\"Location abbreviation (from LOCATION.LABBR)\");",
									"});",
									"",
									"",
									"pm.test(\"Check type scale\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[82].id).to.eql(\"6070\");",
									"    pm.expect(jsonData[82].name).to.eql(\"Type\");",
									"    pm.expect(jsonData[82].description).to.eql(\"Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a3385dd-1b14-47e7-929b-0e3678721824",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/scales?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"scales"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/scales/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61a4a332-a76a-422d-b5c2-8a398a08f4e3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check number scale\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"6040\");",
									"    pm.expect(jsonData.name).to.eql(\"Number\");",
									"    pm.expect(jsonData.description).to.eql(\"Number\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "37419e8f-2f9d-4d67-a2ef-41881bd082a6",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/scales/{{number_scale_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"scales",
								"{{number_scale_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dea1c54c-6947-4c65-8ac1-3e12658dcbcd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Note: Checked details of first, middle and last property only for all properties are too many.",
									"pm.test(\"Check TRIAL_CODE variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"8185\");",
									"    pm.expect(jsonData[0].name).to.eql(\"TRIAL_CODE\");",
									"    pm.expect(jsonData[0].description).to.eql(\"Trial code - assigned (text)\");",
									"    //Check properties",
									"    pm.expect(jsonData[0].property.id).to.eql(\"2100\");",
									"    pm.expect(jsonData[0].property.name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData[0].property.description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"    ",
									"    //Check method",
									"    pm.expect(jsonData[0].method.id).to.eql(\"4030\");",
									"    pm.expect(jsonData[0].method.name).to.eql(\"Assigned\");",
									"    pm.expect(jsonData[0].method.description).to.eql(\"Term, name or id assigned\");    ",
									"    ",
									"   //Check scale",
									"    pm.expect(jsonData[0].scale.id).to.eql(\"6020\");",
									"    pm.expect(jsonData[0].scale.name).to.eql(\"Text\");",
									"    pm.expect(jsonData[0].scale.description).to.eql(\"Text\");    ",
									"    ",
									"    ",
									"   //Check variableTypes",
									"    pm.expect(jsonData[0].variableTypes[0].id).to.eql(\"1806\");",
									"    pm.expect(jsonData[0].variableTypes[0].name).to.eql(\"Environment Detail\");",
									"    pm.expect(jsonData[0].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   ",
									"    ",
									"    pm.expect(jsonData[0].variableTypes[1].id).to.eql(\"1805\");",
									"    pm.expect(jsonData[0].variableTypes[1].name).to.eql(\"Study Detail\");",
									"    pm.expect(jsonData[0].variableTypes[1].description).to.eql(\"Administrative details to be tracked per study.\");   ",
									"    ",
									"});",
									"",
									"pm.test(\"Check TRIAL_INSTANCE variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].id).to.eql(\"8170\");",
									"    pm.expect(jsonData[1].name).to.eql(\"TRIAL_INSTANCE\");",
									"    pm.expect(jsonData[1].description).to.eql(\"Trial instance - enumerated (number)\");",
									"    //Check properties",
									"    pm.expect(jsonData[1].property.id).to.eql(\"2100\");",
									"    pm.expect(jsonData[1].property.name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData[1].property.description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"    ",
									"    //Check method",
									"    pm.expect(jsonData[1].method.id).to.eql(\"4040\");",
									"    pm.expect(jsonData[1].method.name).to.eql(\"Enumerated\");",
									"    pm.expect(jsonData[1].method.description).to.eql(\"Levels enumerated - 1,2,3\");    ",
									"    ",
									"   //Check scale",
									"    pm.expect(jsonData[1].scale.id).to.eql(\"6040\");",
									"    pm.expect(jsonData[1].scale.name).to.eql(\"Number\");",
									"    pm.expect(jsonData[1].scale.description).to.eql(\"Number\");    ",
									"    ",
									"    ",
									"   //Check variableTypes",
									"    pm.expect(jsonData[1].variableTypes[0].id).to.eql(\"1806\");",
									"    pm.expect(jsonData[1].variableTypes[0].name).to.eql(\"Environment Detail\");",
									"    pm.expect(jsonData[1].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   ",
									"    ",
									"    pm.expect(jsonData[1].variableTypes[0].id).to.eql(\"1806\");",
									"    pm.expect(jsonData[1].variableTypes[0].name).to.eql(\"Environment Detail\");",
									"    pm.expect(jsonData[1].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   ",
									"    ",
									"});",
									"",
									"pm.test(\"Check Trial_Type variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[2].id).to.eql(\"8670\");",
									"    pm.expect(jsonData[2].name).to.eql(\"Trial_Type\");",
									"    pm.expect(jsonData[2].description).to.eql(\"Code for trial type or series\");",
									"    //Check properties",
									"    pm.expect(jsonData[2].property.id).to.eql(\"2100\");",
									"    pm.expect(jsonData[2].property.name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData[2].property.description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"    ",
									"    //Check method",
									"    pm.expect(jsonData[2].method.id).to.eql(\"4030\");",
									"    pm.expect(jsonData[2].method.name).to.eql(\"Assigned\");",
									"    pm.expect(jsonData[2].method.description).to.eql(\"Term, name or id assigned\");    ",
									"    ",
									"    ",
									"   //Check scale",
									"    pm.expect(jsonData[2].scale.id).to.eql(\"17280\");",
									"    pm.expect(jsonData[2].scale.name).to.eql(\"Code of Trial_Type\");",
									"    pm.expect(jsonData[2].scale.description).to.eql(\"Code of Trial_Type_generated\");    ",
									"    ",
									"    ",
									"   //Check variableTypes",
									"    pm.expect(jsonData[2].variableTypes[0].id).to.eql(\"1806\");",
									"    pm.expect(jsonData[2].variableTypes[0].name).to.eql(\"Environment Detail\");",
									"    pm.expect(jsonData[2].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   ",
									"    ",
									"    pm.expect(jsonData[2].variableTypes[1].id).to.eql(\"1805\");",
									"    pm.expect(jsonData[2].variableTypes[1].name).to.eql(\"Study Detail\");",
									"    pm.expect(jsonData[2].variableTypes[1].description).to.eql(\"Administrative details to be tracked per study.\");   ",
									"    ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "88e17a3c-8baf-47e1-9912-0a389088881f",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables?property={{trial_instance_property_id}}&favourite=false&programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables"
							],
							"query": [
								{
									"key": "property",
									"value": "{{trial_instance_property_id}}"
								},
								{
									"key": "favourite",
									"value": "false"
								},
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /ontology/{cropname}/variables/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "619a82b2-964a-4e91-a912-b5fb3ed81864",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check biomass_yield variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"18010\");",
									"    pm.expect(jsonData.name).to.eql(\"Biomas_yield\");",
									"    pm.expect(jsonData.description).to.eql(\"Biomas - dry and weigh (t/ha)\");",
									"    ",
									"   ",
									"    pm.expect(jsonData.property.id).to.eql(\"15010\");",
									"    pm.expect(jsonData.property.name).to.eql(\"Biomass\");",
									"    pm.expect(jsonData.property.description).to.eql(\"Biomass\"); ",
									"    ",
									"    pm.expect(jsonData.method.id).to.eql(\"16000\");",
									"    pm.expect(jsonData.method.name).to.eql(\"Dry and weigh\");",
									"    pm.expect(jsonData.method.description).to.eql(\"Dry and weigh\"); ",
									"    ",
									"    pm.expect(jsonData.scale.id).to.eql(\"17010\");",
									"    pm.expect(jsonData.scale.name).to.eql(\"t/ha\");",
									"    pm.expect(jsonData.scale.description).to.eql(\"Tonnesper hectare\"); ",
									"    pm.expect(jsonData.scale.dataType.name).to.eql(\"Numeric\");",
									"    ",
									"    pm.expect(jsonData.variableTypes[0].id).to.eql(\"1808\");",
									"    pm.expect(jsonData.variableTypes[0].name).to.eql(\"Trait\");",
									"    pm.expect(jsonData.variableTypes[0].description).to.eql(\"Characteristics of a germplasm to be recorded during a study.\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a31f1a5b-7a69-47c2-b71f-e5df1bf51891",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/{{study_biomass_cvterm_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"{{study_biomass_cvterm_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "variable-filter-resource",
			"item": [
				{
					"name": "Verify response when filtered by required parameters only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c14ffc0-2b59-4766-b607-1c85741aff46",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Note: Checked details of first, middle and last property only for all properties are too many.\r",
									"pm.test(\"Check ACCNO variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(\"8310\");\r",
									"    pm.expect(jsonData[0].name).to.eql(\"ACCNO\");\r",
									"    pm.expect(jsonData[0].description).to.eql(\"Germplasm ID - Assigned (Accession name)\");\r",
									"    //Check properties\r",
									"    pm.expect(jsonData[0].property.id).to.eql(\"2205\");\r",
									"    pm.expect(jsonData[0].property.name).to.eql(\"Germplasm id\");\r",
									"    pm.expect(jsonData[0].property.description).to.eql(\"Germplasm identifier\");\r",
									"    \r",
									"    //Check method\r",
									"    pm.expect(jsonData[0].method.id).to.eql(\"4030\");\r",
									"    pm.expect(jsonData[0].method.name).to.eql(\"Assigned\");\r",
									"    pm.expect(jsonData[0].method.description).to.eql(\"Term, name or id assigned\");    \r",
									"    \r",
									"   //Check scale\r",
									"    pm.expect(jsonData[0].scale.id).to.eql(\"6110\");\r",
									"    pm.expect(jsonData[0].scale.name).to.eql(\"Accession name\");\r",
									"    pm.expect(jsonData[0].scale.description).to.eql(\"Unique accession number or name in a genebank or germplasm collection\");    \r",
									"    \r",
									"    \r",
									"   //Check variableTypes\r",
									"    pm.expect(jsonData[0].variableTypes[0].id).to.eql(\"1804\");\r",
									"    pm.expect(jsonData[0].variableTypes[0].name).to.eql(\"Germplasm Descriptor\");\r",
									"    pm.expect(jsonData[0].variableTypes[0].description).to.eql(\"Information to be recorded about each germplasm in a study.\"); \r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Check NOTES variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[80].id).to.eql(\"8390\");\r",
									"pm.environment.unset(\"variable_key\");\r",
									"    pm.expect(jsonData[80].name).to.eql(\"NOTES\");\r",
									"    pm.expect(jsonData[80].description).to.eql(\"Field notes - observed (text)\");\r",
									"    //Check properties\r",
									"    pm.expect(jsonData[80].property.id).to.eql(\"2065\");\r",
									"    pm.expect(jsonData[80].property.name).to.eql(\"Comment\");\r",
									"    pm.expect(jsonData[80].property.description).to.eql(\"Comment\");\r",
									"    \r",
									"    //Check method\r",
									"    pm.expect(jsonData[80].method.id).to.eql(\"4110\");\r",
									"    pm.expect(jsonData[80].method.name).to.eql(\"Observed\");\r",
									"    pm.expect(jsonData[80].method.description).to.eql(\"Value recorded after observation\");    \r",
									"    \r",
									"   //Check scale\r",
									"    pm.expect(jsonData[80].scale.id).to.eql(\"6020\");\r",
									"    pm.expect(jsonData[80].scale.name).to.eql(\"Text\");\r",
									"    pm.expect(jsonData[80].scale.description).to.eql(\"Text\");    \r",
									"    \r",
									"    \r",
									"   //Check variableTypes\r",
									"    pm.expect(jsonData[80].variableTypes[0].id).to.eql(\"1808\");\r",
									"    pm.expect(jsonData[80].variableTypes[0].name).to.eql(\"Trait\");\r",
									"    pm.expect(jsonData[80].variableTypes[0].description).to.eql(\"Characteristics of a germplasm to be recorded during a study.\");   \r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Check TranspltD_date variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[165].id).to.eql(\"8384\");\r",
									"    pm.expect(jsonData[165].name).to.eql(\"TranspltD_date\");\r",
									"    pm.expect(jsonData[165].description).to.eql(\"Date Transplanted -applied (yyyymmdd)\");\r",
									"    //Check properties\r",
									"    pm.expect(jsonData[165].property.id).to.eql(\"2056\");\r",
									"    pm.expect(jsonData[165].property.name).to.eql(\"Transplanting date\");\r",
									"    pm.expect(jsonData[165].property.description).to.eql(\"Transplanting date\");\r",
									"    \r",
									"    //Check method\r",
									"    pm.expect(jsonData[165].method.id).to.eql(\"4020\");\r",
									"    pm.expect(jsonData[165].method.name).to.eql(\"Applied\");\r",
									"    pm.expect(jsonData[165].method.description).to.eql(\"Factor applied\");    \r",
									"    \r",
									"    \r",
									"   //Check scale\r",
									"    pm.expect(jsonData[165].scale.id).to.eql(\"17275\");\r",
									"    pm.expect(jsonData[165].scale.name).to.eql(\"Date (yyyymmdd) of TranspltD_date\");\r",
									"    pm.expect(jsonData[165].scale.description).to.eql(\"Date (yyyymmdd) ofTranspltD_date_generated\");    \r",
									"\r",
									"    \r",
									"   //Check variableTypes\r",
									"    pm.expect(jsonData[165].variableTypes[0].id).to.eql(\"1806\");\r",
									"    pm.expect(jsonData[165].variableTypes[0].name).to.eql(\"Environment Detail\");\r",
									"    pm.expect(jsonData[165].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   \r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "da6ebc6d-5a42-4d83-aacc-318f1964beaa",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by propertyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "feea738c-ea4a-4b77-8f24-618d770daa44",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all property ids are equal to input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length; i++) { \r",
									"    pm.expect(jsonData[i].property.id).to.eql(pm.environment.get(\"trial_instance_property_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "34e8c0ea-d4fb-4a54-8e4f-5160c715c3a2",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds={{trial_instance_property_id}}&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": "{{trial_instance_property_id}}"
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by methodId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1faeec4-d3a0-4e11-9261-1fd04e812929",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all method ids are equal to input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length; i++) { \r",
									"    pm.expect(jsonData[i].method.id).to.eql(pm.environment.get(\"weighed_method_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0495b23-9be9-43b5-ad0d-06e759b400f7",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds={{weighed_method_id}}&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": "{{weighed_method_id}}"
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by scaleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65bb2af1-be12-439a-91c7-2924e95f06fe",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all scale ids are equal to input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length; i++) { \r",
									"    pm.expect(jsonData[i].scale.id).to.eql(pm.environment.get(\"number_scale_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c66d7ec-f582-410d-a106-81acfa163520",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds={{number_scale_id}}&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": "{{number_scale_id}}"
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by variableId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc0a5e65-5379-45a3-9db5-96b6b45b128a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all variableIds are equal to input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length ; i++) { \r",
									"    pm.expect(jsonData[i].id).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "765ee103-8af7-43c4-9906-eac5a80df616",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds={{study_biomass_cvterm_id}}&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": "{{study_biomass_cvterm_id}}"
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by exclusionVariableIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3a4041f-8b00-432d-8914-2862af82699d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check input variableId is not included in the result\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length ; i++) { \r",
									"    pm.expect(jsonData[i].id).to.not.eql(pm.environment.get(\"study_biomass_cvterm_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6c731f4e-532d-4128-9827-c567f83a122c",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds=&exclusionVariableIds={{study_biomass_cvterm_id}}&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": "{{study_biomass_cvterm_id}}"
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by dataTypeIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4afb95b5-32a4-4a18-858c-b1053640481c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all dataTypeIds are equal to the input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length ; i++) { \r",
									"    pm.expect(jsonData[i].scale.dataType.id).to.eql(pm.environment.get(\"numeric_dataTypeId\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9dee85c4-5821-47fc-8098-5c4b08f28105",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds={{numeric_dataTypeId}}&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": "{{numeric_dataTypeId}}"
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by variableTypeIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec5ac840-2af7-4dae-bd94-b908fa5d825f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if input variableType is present in all variables\", function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  var i,j;\r",
									"  for (i = 0; i < jsonData.length ; i++) {\r",
									"      var variableTypes = jsonData[i].variableTypes;\r",
									"      console.log(\"variable:\"+jsonData[i].id);\r",
									"      console.log(\"variableTypeLength:\"+variableTypes.length)\r",
									"      \r",
									"      for (j=0; j < variableTypes.length; j++) {\r",
									"          if(variableTypes[j].id==\"1808\"){\r",
									"              pm.expect(variableTypes[j].id).to.eql(pm.environment.get(\"variableTypeId_trait\"));\r",
									"              console.log(\"index:\"+j+ \"Found! \"+ \"variableTypeId:\"+ variableTypes[j].id);\r",
									"          }else{\r",
									"              console.log(\"index:\"+j+ \"Not Found! \"+ \"variableTypeId:\"+ variableTypes[j].id);\r",
									"          }\r",
									"          \r",
									"      }\r",
									"  }\r",
									" \r",
									"});    \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "351db61b-48d3-40d9-be83-f1e6019d5672",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds={{variableTypeId_trait}}&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": "{{variableTypeId_trait}}"
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by property classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c955f75f-0152-4d0d-b500-9983e9d330ff",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if input property class is present in all variables\", function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  var i,j;\r",
									"  for (i = 0; i < jsonData.length ; i++) {\r",
									"      var propertyClasses = jsonData[i].property.classes;\r",
									"      console.log(\"variable:\"+jsonData[i].id);\r",
									"      console.log(\"propertyClassLength:\"+ propertyClasses.length)\r",
									"      \r",
									"      for (j=0; j < propertyClasses.length; j++) {\r",
									"          if(propertyClasses[j]==\"Agronomic\"){\r",
									"              pm.expect(propertyClasses[j]).to.eql(\"Agronomic\");\r",
									"              console.log(\"index:\"+j+ \"Found! \"+ \"propertyClassId:\"+ propertyClasses[j]);\r",
									"          }else{\r",
									"              console.log(\"index:\"+j+ \"Not Found! \"+ \"propertyClassId:\"+ propertyClasses[j]);\r",
									"          }\r",
									"          \r",
									"      }\r",
									"  }\r",
									" \r",
									"});    \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9d49d85d-996e-459e-9195-806c111a088c",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=Agronomic",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": "Agronomic"
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "crop-resource",
			"item": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "class-resource",
			"item": [
				{
					"name": "Verify response code and returned classes when entered valid crop",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "60641d5a-ab74-472e-8924-9c9b74084bc4",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16846135-1584-4d00-b6c5-e7e40c80ff1c",
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check returned classes\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.equal(\"Abiotic condition\");",
									"    pm.expect(jsonData[1]).to.equal(\"Abiotic stress\");",
									"    pm.expect(jsonData[2]).to.equal(\"Agronomic\");",
									"    pm.expect(jsonData[3]).to.equal(\"Biochemical trait\");",
									"    pm.expect(jsonData[4]).to.equal(\"Biotic condition\");",
									"    pm.expect(jsonData[5]).to.equal(\"Biotic stress\");",
									"    pm.expect(jsonData[6]).to.equal(\"Breeding methods\");",
									"    pm.expect(jsonData[7]).to.equal(\"Breedingprocess\");",
									"    pm.expect(jsonData[8]).to.equal(\"Bulking breeding methods\");",
									"    pm.expect(jsonData[9]).to.equal(\"Climatic condition\");",
									"    pm.expect(jsonData[10]).to.equal(\"Crop research ontology\");",
									"    pm.expect(jsonData[11]).to.equal(\"Crop trait ontology\");",
									"    pm.expect(jsonData[12]).to.equal(\"Crossing methods\");",
									"    pm.expect(jsonData[13]).to.equal(\"Cultivar formation methods\");",
									"    pm.expect(jsonData[14]).to.equal(\"Cytogenetic manipulation\");",
									"    pm.expect(jsonData[15]).to.equal(\"Dataset Condition\");",
									"    pm.expect(jsonData[16]).to.equal(\"Derivative breeding methods\");",
									"    pm.expect(jsonData[17]).to.equal(\"Disease resistance\");",
									"    pm.expect(jsonData[18]).to.equal(\"General\");",
									"    pm.expect(jsonData[19]).to.equal(\"Generative breeding methods\");",
									"    pm.expect(jsonData[20]).to.equal(\"Genetic Modification\");",
									"    pm.expect(jsonData[21]).to.equal(\"Germplasm\");",
									"    pm.expect(jsonData[22]).to.equal(\"Insect and pest resistance\");",
									"    pm.expect(jsonData[23]).to.equal(\"Maintenance methods\");",
									"    pm.expect(jsonData[24]).to.equal(\"Molecular property\");",
									"    pm.expect(jsonData[25]).to.equal(\"Morphological\");",
									"    pm.expect(jsonData[26]).to.equal(\"Mutation methods\");",
									"    pm.expect(jsonData[27]).to.equal(\"Non-bulking breedingmethods\");",
									"    pm.expect(jsonData[28]).to.equal(\"Passport\");",
									"    pm.expect(jsonData[29]).to.equal(\"Phenology\");",
									"    pm.expect(jsonData[30]).to.equal(\"Physiological\");",
									"    pm.expect(jsonData[31]).to.equal(\"Post harvest\");",
									"    pm.expect(jsonData[32]).to.equal(\"Quality\");",
									"    pm.expect(jsonData[33]).to.equal(\"Seed acquisation methods\");",
									"    pm.expect(jsonData[34]).to.equal(\"Seed increase methods\");",
									"    pm.expect(jsonData[35]).to.equal(\"Seed storage\");",
									"    pm.expect(jsonData[36]).to.equal(\"Site condition\");",
									"    pm.expect(jsonData[37]).to.equal(\"Soil condition\");",
									"    pm.expect(jsonData[38]).to.equal(\"Study condition\");",
									"    pm.expect(jsonData[39]).to.equal(\"Trial Design\");",
									"    pm.expect(jsonData[40]).to.equal(\"Trial environment\");",
									"    pm.expect(jsonData[41]).to.equal(\"Trial management\");",
									"    pm.expect(jsonData[42]).to.equal(\"Variate condition\");",
									"    pm.expect(jsonData[43]).to.equal(\"Yield component\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/classes?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"classes"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						},
						"description": "GET ​/crops​/{cropname}​/classes"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "data-type-resource",
			"item": [
				{
					"name": "GET /crops/{crop}/data-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba00909-6630-4f2c-9943-67fa7222962f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check categorical data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"1130\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Categorical\");",
									"    pm.expect(jsonData[0].systemDataType).to.eql(false);",
									"});",
									"",
									"pm.test(\"Check numeric data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].id).to.eql(\"1110\");",
									"    pm.expect(jsonData[1].name).to.eql(\"Numeric\");",
									"    pm.expect(jsonData[1].systemDataType).to.eql(false);",
									"});",
									"",
									"pm.test(\"Check date data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[2].id).to.eql(\"1117\");",
									"    pm.expect(jsonData[2].name).to.eql(\"Date\");",
									"    pm.expect(jsonData[2].systemDataType).to.eql(false);",
									"});",
									"",
									"pm.test(\"Check character data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[3].id).to.eql(\"1120\");",
									"    pm.expect(jsonData[3].name).to.eql(\"Character\");",
									"    pm.expect(jsonData[3].systemDataType).to.eql(false);",
									"});",
									"pm.test(\"Check person data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[4].id).to.eql(\"1131\");",
									"    pm.expect(jsonData[4].name).to.eql(\"Person\");",
									"    pm.expect(jsonData[4].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check location data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[5].id).to.eql(\"1132\");",
									"    pm.expect(jsonData[5].name).to.eql(\"Location\");",
									"    pm.expect(jsonData[5].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check study data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[6].id).to.eql(\"1133\");",
									"    pm.expect(jsonData[6].name).to.eql(\"Study\");",
									"    pm.expect(jsonData[6].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check dataset data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[7].id).to.eql(\"1134\");",
									"    pm.expect(jsonData[7].name).to.eql(\"Dataset\");",
									"    pm.expect(jsonData[7].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check germplasm list data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[8].id).to.eql(\"1135\");",
									"    pm.expect(jsonData[8].name).to.eql(\"Germplasm List\");",
									"    pm.expect(jsonData[8].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check breeding method data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[9].id).to.eql(\"1136\");",
									"    pm.expect(jsonData[9].name).to.eql(\"Breeding Method\");",
									"    pm.expect(jsonData[9].systemDataType).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e2cf455d-8b21-4aeb-a703-74111588bf73",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/data-types?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"data-types"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "formula-resource",
			"item": [
				{
					"name": "POST /crops/{cropname}/formula",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c69c3ff-029f-4a0e-afa2-c40e141ca476",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store returned variable",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"new_formula_id\");",
									"    pm.environment.set(\"new_formula_id\", jsonData.formulaId);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6a0b8bf6-0561-4826-85be-f50f62e13ea0",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"formulaId\": 0,\r\n  \"inputs\": [\r\n    {\r\n      \"targetTermId\": 0,\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"vocabularyId\": 0,\r\n      \"name\": \"\",\r\n      \"obsolete\": false,\r\n      \"definition\": \"\",\r\n      \"id\": 100020\r\n    }\r\n  ],\r\n  \"name\": \"\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"definition\": \"{{formula_definition}}\",\r\n  \"target\": {\r\n    \"targetTermId\": 0,\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"vocabularyId\": 0,\r\n    \"name\": \"\",\r\n    \"obsolete\": false,\r\n    \"definition\": \"\",\r\n    \"id\": 100019\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/formula?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"formula"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /crops/{cropname}/formula/{formulaId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81fd5f7f-59a3-492a-9cb5-a55238c09fd9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "48e29c04-3185-42a5-9c69-b2d368987dbb",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"formulaId\": \"{{new_formula_id}}\",\r\n  \"inputs\": [\r\n    {\r\n      \"targetTermId\": 0,\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"vocabularyId\": 0,\r\n      \"name\": \"\",\r\n      \"obsolete\": false,\r\n      \"definition\": \"\",\r\n      \"id\": 100020\r\n    }\r\n  ],\r\n  \"name\": \"\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"definition\": \"{{updated_formula_definition}}\",\r\n  \"target\": {\r\n    \"targetTermId\": 0,\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"vocabularyId\": 0,\r\n    \"name\": \"\",\r\n    \"obsolete\": false,\r\n    \"definition\": \"\",\r\n    \"id\": 100019\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/formula/{{new_formula_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"formula",
								"{{new_formula_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{cropname}/formula/{formulaId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b46c031-2485-495c-97dd-34d58da62a89",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e1ef36a8-100a-4208-bc6c-03a89e6e68a4",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/formula/{{new_formula_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"formula",
								"{{new_formula_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "method-resource",
			"item": [
				{
					"name": "POST /crops/{cropname}/methods",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "127c0a98-bcd5-43ec-94ea-0b17493fdbdc",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store returned variable",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"new_method_id\");",
									"    pm.environment.set(\"new_method_id\", jsonData.id);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3f23e26-e219-42e5-80e7-18a59ebf934d",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{new_method_name}}\",\r\n  \"description\": \"This is a test method\",\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": true,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /crops/{cropname}/methods/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0bdae0e-4d9f-40ec-b99f-d41290c3d984",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "08bcc0c0-c93a-425c-973d-592984ac9f9f",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{updated_method_name}}\",\r\n  \"description\": \"This is a test methodx\",\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": true,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods/{{new_method_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods",
								"{{new_method_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{cropname}/methods{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87090146-f432-4188-8aa3-09f13ce04081",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Note: Checked details of first, middle and last method only for all methods are too many.",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f9251b54-966a-4e22-b045-237ddb02f2eb",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods/{{new_method_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods",
								"{{new_method_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "property-resource",
			"item": [
				{
					"name": "POST /crops/{cropname}/properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e71c501-6695-438f-a201-e931f1199c5f",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store returned variable",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"new_property_id\");",
									"    pm.environment.set(\"new_property_id\", jsonData.id);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "34325f66-8491-4001-b8ac-993095d659ce",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{new_property_name}}\",\r\n  \"description\": \"This is a test property\",\r\n  \"cropOntologyId\": \"\",\r\n  \"classes\": [\r\n    \"Morphological\"\r\n  ],\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": false,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /crops/{cropname}/properties/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcbf9ab9-ad18-41ca-9241-e10591af0829",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ca5ff981-bbe7-4934-a9d5-3dbe7d10f88d",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{updated_property_name}}\",\r\n  \"description\": \"This is a test propertyx\",\r\n  \"cropOntologyId\": \"\",\r\n  \"classes\": [\r\n    \"Morphological\"\r\n  ],\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": false,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties/{{new_property_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties",
								"{{new_property_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{cropname}/properties/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6241eadd-a6bc-4af3-b906-6d1b0e317e34",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Note: Checked details of first, middle and last method only for all methods are too many.",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b9228fe6-7ae2-409d-aaaf-ec3c0c44f10b",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties/{{new_property_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties",
								"{{new_property_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "variable-resource",
			"item": [
				{
					"name": "POST /crops/{cropname}/variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc0158c2-8abe-435f-9c4f-ff3547ddd932",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store returned variable",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"new_variable_id\");",
									"    pm.environment.set(\"new_variable_id\", jsonData.id);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e49ef507-8859-4cc8-8b1d-94bfd2c9125d",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{new_variable_name}}\",\r\n  \"description\": \"This is a test variable\",\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": true,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  },\r\n  \"programUuid\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n  \"alias\": \"\",\r\n  \"method\": {\r\n        \"id\": \"{{new_var_method_id}}\",\r\n        \"name\": \"{{neW_var_method_name}}\",\r\n        \"description\": \"{{new_var_method_desc}}\",\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"property\": {\r\n        \"id\": \"{{new_var_property_id}}\",\r\n        \"name\": \"{{new_var_property_name}}\",\r\n        \"description\": \"{{new_var_property_desc}}\",\r\n    \"cropOntologyId\": \"\",\r\n    \"classes\": [\r\n      \"\"\r\n    ],\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"scale\": {\r\n    \"id\": \"{{new_var_scale_id}}\",\r\n    \"name\": \"{{new_var_scale_name}}\",\r\n    \"description\": \"{{new_var_scale_desc}}\",\r\n    \"dataType\": {\r\n      \"id\": \"\",\r\n      \"name\": \"\",\r\n      \"systemDataType\": false\r\n    },\r\n    \"validValues\": {\r\n      \"min\": \"\",\r\n      \"max\": \"\",\r\n      \"categories\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\",\r\n          \"editable\": false\r\n        }\r\n      ]\r\n    },\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"variableTypes\": [\r\n    {\r\n        \"id\": \"1808\",\r\n        \"name\": \"Trait\",\r\n        \"description\": \"Characteristics of a germplasm to be recorded during a study.\"\r\n    }\r\n  ],\r\n  \"favourite\": false,\r\n  \"expectedRange\": {\r\n    \"min\": \"\",\r\n    \"max\": \"\"\r\n  },\r\n  \"formula\": {\r\n    \"formulaId\": 0,\r\n    \"target\": {\r\n      \"id\": 0,\r\n      \"vocabularyId\": 0,\r\n      \"name\": \"\",\r\n      \"definition\": \"\",\r\n      \"obsolete\": false,\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"targetTermId\": 0\r\n    },\r\n    \"inputs\": [\r\n      {\r\n        \"id\": 0,\r\n        \"vocabularyId\": 0,\r\n        \"name\": \"\",\r\n        \"definition\": \"\",\r\n        \"obsolete\": false,\r\n        \"dateCreated\": \"\",\r\n        \"dateLastModified\": \"\",\r\n        \"targetTermId\": 0\r\n      }\r\n    ],\r\n    \"definition\": \"\",\r\n    \"active\": false,\r\n    \"name\": \"\",\r\n    \"description\": \"\"\r\n  },\r\n  \"allowsFormula\": false\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /crops/{cropname}/variables/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32cc0a8a-a5db-4ac6-ace7-b1e22c345ab6",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ce30247e-87a5-41a8-9a72-dafe5d970e6e",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{updated_variable_name}}\",\r\n  \"description\": \"This is a test variablex\",\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": true,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  },\r\n  \"programUuid\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n  \"alias\": \"\",\r\n  \"method\": {\r\n        \"id\": \"{{new_var_method_id}}\",\r\n        \"name\": \"{{neW_var_method_name}}\",\r\n        \"description\": \"{{new_var_method_desc}}\",\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"property\": {\r\n        \"id\": \"{{new_var_property_id}}\",\r\n        \"name\": \"{{new_var_property_name}}\",\r\n        \"description\": \"{{new_var_property_desc}}\",\r\n    \"cropOntologyId\": \"\",\r\n    \"classes\": [\r\n      \"\"\r\n    ],\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"scale\": {\r\n    \"id\": \"{{new_var_scale_id}}\",\r\n    \"name\": \"{{new_var_scale_name}}\",\r\n    \"description\": \"{{new_var_scale_desc}}\",\r\n    \"dataType\": {\r\n      \"id\": \"\",\r\n      \"name\": \"\",\r\n      \"systemDataType\": false\r\n    },\r\n    \"validValues\": {\r\n      \"min\": \"\",\r\n      \"max\": \"\",\r\n      \"categories\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\",\r\n          \"editable\": false\r\n        }\r\n      ]\r\n    },\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"variableTypes\": [\r\n    {\r\n        \"id\": \"1808\",\r\n        \"name\": \"Trait\",\r\n        \"description\": \"Characteristics of a germplasm to be recorded during a study.\"\r\n    }\r\n  ],\r\n  \"favourite\": false,\r\n  \"expectedRange\": {\r\n    \"min\": \"\",\r\n    \"max\": \"\"\r\n  },\r\n  \"formula\": {\r\n    \"formulaId\": 0,\r\n    \"target\": {\r\n      \"id\": 0,\r\n      \"vocabularyId\": 0,\r\n      \"name\": \"\",\r\n      \"definition\": \"\",\r\n      \"obsolete\": false,\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"targetTermId\": 0\r\n    },\r\n    \"inputs\": [\r\n      {\r\n        \"id\": 0,\r\n        \"vocabularyId\": 0,\r\n        \"name\": \"\",\r\n        \"definition\": \"\",\r\n        \"obsolete\": false,\r\n        \"dateCreated\": \"\",\r\n        \"dateLastModified\": \"\",\r\n        \"targetTermId\": 0\r\n      }\r\n    ],\r\n    \"definition\": \"\",\r\n    \"active\": false,\r\n    \"name\": \"\",\r\n    \"description\": \"\"\r\n  },\r\n  \"allowsFormula\": false\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/{{new_variable_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"{{new_variable_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{cropname}/variables/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09fd9942-d65f-4639-a7b5-6a7d179ab081",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Note: Checked details of first, middle and last method only for all methods are too many.",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3145fd75-47fb-44ef-aac4-366e1a18d8bb",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/{{new_variable_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"{{new_variable_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "variable-type-resource",
			"item": [
				{
					"name": "scale-resource",
					"item": [
						{
							"name": "POST /crops/{cropname}/scales",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cacb32f4-59cd-4bce-a4f0-29ec0789ef06",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Store returned variable",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"new_scale_id\");",
											"    pm.environment.set(\"new_scale_id\", jsonData.id);",
											"    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa3dacd5-9b3d-4bfd-a768-330212bcd327",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{new_scale_name}}\",\r\n  \"description\": \"This is a test scale\",\r\n  \"dataType\": {\r\n    \"id\": \"1110\",\r\n    \"name\": \"Numeric\",\r\n    \"systemDataType\": false\r\n  },\r\n  \"validValues\": {\r\n    \"min\": \"\",\r\n    \"max\": \"\",\r\n    \"categories\": [\r\n      {\r\n        \"id\": \"\",\r\n        \"name\": \"\",\r\n        \"description\": \"\",\r\n        \"editable\": false\r\n      }\r\n    ]\r\n  },\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": false,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/scales?programUUID={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"scales"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT /crops/{cropname}/scales/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f022edc7-8849-4863-ac67-cada0b3d24c3",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "99a79454-0445-4ced-9faf-b081536405ef",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{updated_scale_name}}\",\r\n  \"description\": \"This is a test scalex\",\r\n  \"dataType\": {\r\n    \"id\": \"1110\",\r\n    \"name\": \"Numeric\",\r\n    \"systemDataType\": false\r\n  },\r\n  \"validValues\": {\r\n    \"min\": \"\",\r\n    \"max\": \"\",\r\n    \"categories\": [\r\n      {\r\n        \"id\": \"\",\r\n        \"name\": \"\",\r\n        \"description\": \"\",\r\n        \"editable\": false\r\n      }\r\n    ]\r\n  },\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": false,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/scales/{{new_scale_id}}?programUUID={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"scales",
										"{{new_scale_id}}"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /crops/{cropname}/scales/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "664f858b-f007-4e4e-915b-f316ca54a3b6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Note: Checked details of first, middle and last method only for all methods are too many.",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb7385ca-aa29-4b12-a4f4-ff588f0ac986",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/scales/{{new_scale_id}}?programUUID={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"scales",
										"{{new_scale_id}}"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{crop}variable-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8508a20-1ccc-41b4-9cab-a4d375f86e96",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check analysis variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(\"1801\");\r",
									"    pm.expect(jsonData[0].name).to.eql(\"Analysis\");\r",
									"    pm.expect(jsonData[0].description).to.eql(\"Variable to be used only in analysis (for example derived variables).\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check analysis summary variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1].id).to.eql(\"1811\");\r",
									"    pm.expect(jsonData[1].name).to.eql(\"Analysis Summary\");\r",
									"    pm.expect(jsonData[1].description).to.eql(\"Analysis Summary Variables\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check environment condition variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2].id).to.eql(\"1802\");\r",
									"    pm.expect(jsonData[2].name).to.eql(\"Environment Condition\");\r",
									"    pm.expect(jsonData[2].description).to.eql(\"Observations made of conditions in an individual environment involved in a study.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check environment detail variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[3].id).to.eql(\"1806\");\r",
									"    pm.expect(jsonData[3].name).to.eql(\"Environment Detail\");\r",
									"    pm.expect(jsonData[3].description).to.eql(\"Administrative details to be tracked per environment.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check experimental design variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[4].id).to.eql(\"1810\");\r",
									"    pm.expect(jsonData[4].name).to.eql(\"Experimental Design\");\r",
									"    pm.expect(jsonData[4].description).to.eql(\"Experimental Design Variables\");\r",
									"});\r",
									"pm.test(\"Check germplasm descriptor variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[5].id).to.eql(\"1804\");\r",
									"    pm.expect(jsonData[5].name).to.eql(\"Germplasm Descriptor\");\r",
									"    pm.expect(jsonData[5].description).to.eql(\"Information to be recorded about each germplasm in a study.\");\r",
									"});\r",
									"pm.test(\"Check observation unit variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[6].id).to.eql(\"1812\");\r",
									"    pm.expect(jsonData[6].name).to.eql(\"Observation Unit\");\r",
									"    pm.expect(jsonData[6].description).to.eql(\"Observation Unit Variables\");\r",
									"});\r",
									"pm.test(\"Check selection method variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[7].id).to.eql(\"1807\");\r",
									"    pm.expect(jsonData[7].name).to.eql(\"Selection Method\");\r",
									"    pm.expect(jsonData[7].description).to.eql(\"How material is chosen for advancing to the next generation.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check study detail variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[8].id).to.eql(\"1805\");\r",
									"    pm.expect(jsonData[8].name).to.eql(\"Study Detail\");\r",
									"    pm.expect(jsonData[8].description).to.eql(\"Administrative details to be tracked per study.\");\r",
									"});\r",
									"pm.test(\"Check trait variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].id).to.eql(\"1808\");\r",
									"    pm.expect(jsonData[9].name).to.eql(\"Trait\");\r",
									"    pm.expect(jsonData[9].description).to.eql(\"Characteristics of a germplasm to be recorded during a study.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check treatment factor variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[10].id).to.eql(\"1809\");\r",
									"    pm.expect(jsonData[10].name).to.eql(\"Treatment Factor\");\r",
									"    pm.expect(jsonData[10].description).to.eql(\"Treatments to be applied to members of a trial.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cb8ac39e-94cb-44f1-bb3f-11d1af16841d",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variable-types?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variable-types"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "inventory-unit-resource",
			"item": [
				{
					"name": "GET ​/crops​/{cropName}​/inventory-units",
					"item": [
						{
							"name": "Verify response code and body when entered valid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91cace25-6f16-4a56-8472-f332ac77b02c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check id value for each item\", function () {",
											"  var id = [\"8264\",\"8267\", \"8266\", \"8268\", \"8710\"];",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].id).to.eql(id[i]);",
											"  }",
											"});",
											"",
											"pm.test(\"Check name value for each item\", function () {",
											"  var name = [\"SEED_AMOUNT_g\", \"SEED_AMOUNT_kg\", \"SEED_AMOUNT_No\", \"SEED_AMOUNT_Packets\", \"SEED_AMOUNT_t\"];",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].name).to.eql(name[i]);",
											"  }",
											"});",
											"",
											"pm.test(\"Check alias value for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].alias).to.eql(\"\");",
											"  }",
											"});",
											"",
											"pm.test(\"Check description value for each design\", function () {",
											"  var description = [\"Seed inventory amount deposited or withdrawn (g)\", \"Seed inventory amount deposited or withdrawn (kg)\",\"Seed inventoryamount deposited or withdrawn (no)\", \"Seed inventory amountdeposited or withdrawn (packets)\", \"Seed inventory amount deposited or withdrawn (t)\"];",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].description).to.eql(description[i]);",
											"  }",
											"});",
											"",
											"pm.test(\"Check property id value for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.id).to.eql(\"2620\");",
											"  }",
											"});",
											"",
											"pm.test(\"Check property name for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.name).to.eql(\"Inventory amount\");",
											"  }",
											"});",
											"pm.test(\"Check property description for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.description).to.eql(\"Amount of inventory storedor withdrawn\");",
											"  }",
											"});",
											"pm.test(\"Check property cropOntologyId for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.cropOntologyId).to.eql(null);",
											"  }",
											"});",
											"pm.test(\"Check property classes for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.classes[0]).to.eql(\"Seed storage\");",
											"    pm.expect(jsonData[i].property.classes[1]).to.eql(\"Seed increase methods\");",
											"  }",
											"});",
											"pm.test(\"Check property metadata for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.metadata.dateCreated).to.eql(\"2016-01-28T19:36:53.000Z\");",
											"     pm.expect(jsonData[i].property.metadata.lastModified).to.eql(null);",
											"     pm.expect(jsonData[i].property.metadata.editableFields).to.eql([]);",
											"     pm.expect(jsonData[i].property.metadata.deletable).to.eql(false);",
											"     pm.expect(jsonData[i].property.metadata.usage.observations).to.eql(0);",
											"     pm.expect(jsonData[i].property.metadata.usage.studies).to.eql(0);",
											"  }",
											"});",
											"",
											"pm.test(\"Check method for each item\", function () {",
											"  var itemsWithWeighedMeth = [0,1,4];",
											"  var itemsWithCountedMeth = [2,3];",
											"  for (var i = 0; i < itemsWithWeighedMeth.length - 1; i++) {",
											"    pm.expect(jsonData[i].method.id).to.eql(\"4090\");",
											"    pm.expect(jsonData[i].method.name).to.eql(\"Weighed\");",
											"    pm.expect(jsonData[i].method.description).to.eql(\"Weighing method\");",
											"    pm.expect(jsonData[i].property.metadata.dateCreated).to.eql(\"2016-01-28T19:36:53.000Z\");",
											"     pm.expect(jsonData[i].property.metadata.lastModified).to.eql(null);",
											"     pm.expect(jsonData[i].property.metadata.editableFields).to.eql([]);",
											"     pm.expect(jsonData[i].property.metadata.deletable).to.eql(false);",
											"     pm.expect(jsonData[i].property.metadata.usage.observations).to.eql(0);",
											"     pm.expect(jsonData[i].property.metadata.usage.studies).to.eql(0);",
											"  }",
											"    for (var j = 0; i < itemsWithCountedMeth.length - 1; j++) {",
											"    pm.expect(jsonData[i].method.id).to.eql(\"4080\");",
											"    pm.expect(jsonData[i].method.name).to.eql(\"Counted\");",
											"    pm.expect(jsonData[i].method.description).to.eql(\"Counting method\");",
											"    pm.expect(jsonData[i].property.metadata.dateCreated).to.eql(\"2016-01-28T19:36:53.000Z\");",
											"     pm.expect(jsonData[i].property.metadata.lastModified).to.eql(null);",
											"     pm.expect(jsonData[i].property.metadata.editableFields).to.eql([]);",
											"     pm.expect(jsonData[i].property.metadata.deletable).to.eql(false);",
											"     pm.expect(jsonData[i].property.metadata.usage.observations).to.eql(0);",
											"     pm.expect(jsonData[i].property.metadata.usage.studies).to.eql(0);",
											"  }",
											"});",
											"",
											"",
											"//Todo assert remaining of the details"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e9ef5f3-9ce0-4e69-8dc9-f86ad5b507b2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/inventory-units",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"inventory-units"
									]
								},
								"description": "GET ​/crops​/{cropName}​/inventory-units"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "lot-resource",
			"item": [
				{
					"name": "POST /crops/{cropName}/lots",
					"item": [
						{
							"name": "Verify response code and body when generateStockisTrue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6db4f48-e602-458e-896a-27a97f0e28b5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json().result;\r",
											"pm.environment.unset(\"lotUUID\");\r",
											"pm.environment.set(\"lotUUID\", jsonData);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1d08d70b-0c18-433d-b192-ff66c2e5aec5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": 40,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered stockId prefix > 15 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6884189-0abd-4f33-ad60-a4c3b4b4099f",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Stock ID Prefix must end with a letter\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c21012cc-03d3-4f68-82c9-e257ff3c9802",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": 40,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"1234\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb5a9473-c140-45a1-9848-67dde1598905",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Lot Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1dff6d6c-5754-4bc4-95d0-5230105b726c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": 40,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when invalid unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd2d0503-9d17-4dc5-93fe-ef8c93961287",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid inventory unit identifier\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2b7bcb89-e99c-4db1-acfe-7d0d5f363993",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": 40,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when invalid locationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9e11002-a450-4869-a59f-58b9021289c0",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid seed storage location\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3a090d7b-c18e-4ddb-9ad7-5e7e0258a9d9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": 40,\r\n  \"locationId\": 0,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when invalid GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f040cd49-5a4c-47a8-877d-71c45e2b368b",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid germplasm identifier\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d95a3120-c8b0-41e5-bd7c-a808eba65a9b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": 0,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when GID is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b182faa0-7a6f-4f15-8cfd-df23a370f655",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid request body.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "72e45a94-61e2-468d-9b9b-e3aa87c3dc09",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": \"test\",\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered numeric stockId prefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bcd9b47-9ccc-45ed-acb7-78c4a4e2e18a",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Stock ID Prefix must end with a letter\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb5f389-0bb5-4919-8c85-f0f48310e6f0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": 40,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"1234\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when generateStockisFalse (withStockId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01d20be5-1705-4f84-8c71-87a865b20978",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c4c93247-0b9e-42b9-9e3d-e26b9507b718",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": false,\r\n  \"gid\": 40,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n \"stockId\": \"S{{$timestamp}}-1\", \r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when generateStockisFalse (withoutStockId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4960e7a0-c19d-40fd-ad65-f47dd71ad988",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"StockId is required\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b09c56c5-1ce5-4d3c-ad85-e4966a65eb87",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": false,\r\n  \"gid\": 40,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockId\": \"\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /crops/{cropName}/lot-lists",
					"item": [
						{
							"name": "Verify response code when entered valid values to all fields - with StockIDPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c4fd4de-c6e8-48f5-9be0-025bcdc116a2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2d773cd9-7a56-4dc8-9eb6-c2c3ef801843",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 40,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when no unitName specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddc72755-2e36-4878-82bd-6e34b7d47f93",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Units are mandatory, please check for empty values\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a1ab280b-d691-4b64-ab84-11d361a6733a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 40,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"\",\r\n      \"unitId\":0,\r\n      \"unitName\": \"\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when no storageLocationAbbr specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68065dd6-e739-44af-91ee-003eec448944",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Storage location abbreviations are mandatory, please check for empty values\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "636bb9eb-be72-4eee-a74b-c88b9d86a574",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 40,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97c4ef4c-b40f-4f4f-a35a-142d27859565",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The following gid(s): 10000 were not found in the system\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "27b63a85-1276-43cb-931e-afb5e1c195bd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 10000,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb604c20-594f-49a0-9ef7-02a7d82143a7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid request body.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fe2b1392-5dca-43f6-87d1-ec205cfd4f2f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": \"test\",\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid initial amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7557840-c2dd-4eec-baf7-ad7dc51145dd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Some values for imported Amount have the wrong format, must be a positive integer or decimal number. Please correct them and try again.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b9978185-f2a3-4006-b782-505a3e093ef0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 40,\r\n      \"initialBalance\": 0,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60b687e3-8574-4938-9e4e-05b4677fb386",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Lot Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "43a5db33-90d5-4947-9936-9e9f0740577c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 40,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f95bcec-7111-42b1-af72-6dd217e92b4d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"We have not found the following Unit(s) invalid in the system. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d9d4a554-9a5e-4bcd-8e31-77ceb8d0c17e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 40,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitName\": \"invalid\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid storage location ABBR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b972d4c3-ad38-4dd0-8d9f-6db81c6a1c03",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The following Storage Location ABBR(s): invalid does not exist, not correspond to a Storage Location or can not be used in the current program. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bbb3b975-5aa5-40e3-8581-ca995509f143",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 40,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"invalid\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when entered valid values - no StockIDPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ac263bc-53e9-4d16-85af-3e4141e91a57",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3160c7e-d446-4c3d-b417-c4ea4b869155",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 40,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when entered stockId Prefix > 15 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb557601-98d3-4dd0-aa5e-c652a12b6cce",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Prefix length can not have more than 15 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2fe2e47c-c0f0-4ed1-9863-975ddc7fe244",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 40,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when entered duplicate stockId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b7d45b7-ede7-4a2d-aceb-03410fff6811",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"We have found the following StockId(s): SID1-1 in the system. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7db6bcd5-3236-4185-85cd-cef484601446",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 40,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\",\r\n      \"stockId\": \"SID1-1\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when entered stockId > 35 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1429d646-93aa-4bf2-a598-5014936f6087",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Stock Id can not have more than 35 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a443e49-dfd0-4e5b-9373-0d3e372ae94f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 40,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"unitId\": 8264,\r\n      \"unitName\": \"SEED_AMOUNT_g\",\r\n      \"storageLocationAbbr\": \"DSS\",\r\n      \"stockId\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /crops/{cropName}/lots/search",
					"item": [
						{
							"name": "Verify response code and body when entered GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d7de49d-2bed-4e67-af5f-9b8709c9a64f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"searchRequestId\");\r",
											"pm.environment.set(\"searchRequestId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2b9a921f-4dda-49c6-a12f-3202d32d8c8a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gids\": [{{germplasmDbId1}}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered createdDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9db96438-31f4-44f8-958e-b67ab56c9d04",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"createdDate\");\r",
											"pm.environment.set(\"createdDate\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "60e9f4a1-3f9c-4f0d-8107-aa2c7332ae55",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdDate\": \"2020-06-19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered status = Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7adb7558-d205-4ce6-ac64-d004aa138994",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lstatus\");\r",
											"pm.environment.set(\"lstatus\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dbbeaeb7-f838-40d5-a814-6ee617a18f79",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filter by specific closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c8724be-d57a-47f0-82e3-69701f6b84d2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"cstatus\");\r",
											"pm.environment.set(\"cstatus\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6db218a0-3718-4bec-a559-5c05073cd930",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"stockId\": \"SID5-1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71eb8a12-58dc-4660-ba4d-59ed4acd2021",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"unitId\");\r",
											"pm.environment.set(\"unitId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2d808f9e-a835-49d8-a120-ca3e930ea302",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered createdByUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e72d34a-53dc-42d0-bf6c-a4cb481d163c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"createdByUsername\");\r",
											"pm.environment.set(\"createdByUsername\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8297ea22-2486-4496-8bfa-9c13cac3d94b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"createdByUsername\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered germplasmListIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0d07299-813f-44e4-b05a-aa7e8fbad8fe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"germplasmListIds\");\r",
											"pm.environment.set(\"germplasmListIds\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d85759d-e958-4788-8000-2b647a6224a7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmListIds\": [2]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered stockId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0affc50c-fbb3-4e32-a183-d0834da1b9b5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"stockId\");\r",
											"pm.environment.set(\"stockId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53af4050-dcee-4efb-9f8e-95e0d4005f3d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"stockId\": \"SID1-1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered lotUUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b3a5e0e-a8c0-49ea-ae8b-718bf3e136c7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lotUUIDs\");\r",
											"pm.environment.set(\"lotUUIDs\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "28a4ce55-c67e-417f-a417-7f14e01bfed3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotUUIDs\": [\"PKWDLskQAWBqD\",\"PKWDLIQFib0b1\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered multiple lotids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1980ec7-0497-4504-b99e-feb92e059400",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"multiplelots\");\r",
											"pm.environment.set(\"multiplelots\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f58fd446-2ab4-401d-8918-3458942cbbde",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotIds\": [48,49]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered designation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab774d12-7ffa-41e6-ab35-908a25d2b1a1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lot_desig\");\r",
											"pm.environment.set(\"lot_desig\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6d1d12d-fd78-444b-8261-2d6f1d9dfbab",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"designation\": \"CML20\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered actualBalance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8df4ea53-0f47-4cf5-8b0b-e5393e80b6cc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"actualBalance\");\r",
											"pm.environment.set(\"actualBalance\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3afcdafa-9744-4ff6-99d9-98e19d101151",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"minActualBalance\": 1,\r\n  \"minActualBalance\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{cropName}/lots/search",
					"item": [
						{
							"name": "Verify results when entered searchRequestId that filters by GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dc2dcd4-21f1-4ed9-ad90-39cf9f080f12",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  var dataLength = jsonData.length;\r",
											"\r",
											"  for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==29){\r",
											"              pm.expect(jsonData[0].gid).to.eql(40);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML20\");\r",
											"              console.log(\"index:\"+i+ \"Found! \");\r",
											"          }\r",
											"          \r",
											"      }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7dc68b6d-2de0-42fb-ab93-82ebfba7a40b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{searchRequestId}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{searchRequestId}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by createdDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a73a95e9-afe0-443a-bd62-9a95f3549b08",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  var dataLength = jsonData.length;\r",
											"\r",
											" for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==29){\r",
											"              pm.expect(jsonData[0].gid).to.eql(40);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML20\");\r",
											"              console.log(\"index:\"+i+ \"Found! \");\r",
											"          }\r",
											"          \r",
											"      }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71489193-9208-47c8-9a60-7938cea76ea8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{createdDate}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{createdDate}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by status=Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc22014c-4324-4c5a-b4c6-6b9073469c7a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  var dataLength = jsonData.length;\r",
											"\r",
											"  for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==29){\r",
											"              pm.expect(jsonData[0].gid).to.eql(40);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML20\");\r",
											"              console.log(\"index:\"+i+ \"Found! \");\r",
											"          }\r",
											"          \r",
											"      }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "40a0cd2e-0b72-4921-9b12-01451a9b1848",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{lstatus}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{lstatus}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31f79456-584d-44ea-9897-9a67a884b154",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"  for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==29){\r",
											"              pm.expect(jsonData[0].gid).to.eql(40);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML20\");\r",
											"            pm.expect(jsonData[0].createdDate).to.eql(\"2020-10-13\");\r",
											"             pm.expect(jsonData[0].unitName).to.eql(\"SEED_AMOUNT_g\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b1e1f82b-fb6d-43fa-96d6-341655fec3e4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{unitId}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{unitId}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by germplasmListIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdcc111b-2ddc-42d3-85cf-50ed4792331c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"          if(lotId==49){\r",
											"              pm.expect(jsonData[0].gid).to.eql(40);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML20\");\r",
											"            pm.expect(jsonData[0].createdDate).to.eql(\"2020-10-08\");\r",
											"             pm.expect(jsonData[0].unitName).to.eql(\"SEED_AMOUNT_Packets\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "607a192b-4966-457f-adc7-e2e170c3b2f4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{germplasmListIds}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{germplasmListIds}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by multiple lot ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3f1677a-0443-4589-9586-a05cf696b565",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"          if(lotId==49){\r",
											"              pm.expect(jsonData[0].gid).to.eql(40);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML20\");\r",
											"            pm.expect(jsonData[0].createdDate).to.eql(\"2020-10-08\");\r",
											"             pm.expect(jsonData[0].unitName).to.eql(\"SEED_AMOUNT_Packets\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "693514b7-dd31-4c8c-9ae5-359ae475321e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{multiplelots}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{multiplelots}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by designation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84189920-981c-42ba-8424-24db5472a0c9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  var dataLength = jsonData.length;\r",
											"\r",
											"  for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==49){\r",
											"              pm.expect(jsonData[0].gid).to.eql(40);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML20\");\r",
											"              pm.expect(jsonData[0].createdDate).to.eql(\"2020-10-08\");\r",
											"              console.log(\"index:\"+i+ \"Found! \");\r",
											"          }\r",
											"          \r",
											"      }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "10682d07-3179-4f58-b419-34fad4ff770d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{lot_desig}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{lot_desig}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by stockId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0174d4e-88f7-4be9-8b5b-daa36d130e6e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"          if(lotId==49){\r",
											"              pm.expect(jsonData[0].gid).to.eql(40);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML20\");\r",
											"            pm.expect(jsonData[0].createdDate).to.eql(\"2020-10-08\");\r",
											"             pm.expect(jsonData[0].stockId).to.eql(\"SID11-1\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cdf3ad61-4809-4554-b71e-03c4ea27c39d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{stockId}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{stockId}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by lotUUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2fbffea-2804-470b-9d77-c029517864c3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"          if(lotId==49){\r",
											"              pm.expect(jsonData[0].gid).to.eql(40);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML20\");\r",
											"             pm.expect(jsonData[0].createdDate).to.eql(\"2020-10-08\");\r",
											"             pm.expect(jsonData[0].lotUUID).to.eql(\"PKWDLIQFib0b1\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed0d7054-4291-42b7-99e4-322dec7a8eec",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{lotUUIDs}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{lotUUIDs}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by createdByUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e190180b-2cc3-499b-b2b9-e703900c7ca2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"          if(lotId==49){\r",
											"              pm.expect(jsonData[0].gid).to.eql(40);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML20\");\r",
											"             pm.expect(jsonData[0].createdDate).to.eql(\"2020-10-13\");\r",
											"             pm.expect(jsonData[0].createdByUsername).to.eql(\"admin\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3ad36d14-20a8-48b2-87ff-a8fedec28d56",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{createdByUsername}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{createdByUsername}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by actualBalance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13b27b4c-5186-41b0-b820-0d3a27647b7f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"             pm.expect(jsonData[0].actualBalance).to.eql(100.0);\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c4a7c713-b38d-4e0a-bc30-fa2a497dad91",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{actualBalance}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{actualBalance}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0d6f3f9-d282-4d81-8a8d-139f03071683",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "416a3309-9b30-4184-8eda-09eccb31f4df",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId=0&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "0"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /crops/{cropName}/lots/metadata",
					"item": [
						{
							"name": "Verify response code and body when entered valid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6308a3c-7eda-4ae8-ba24-81a2c3d22802",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check lotsCountByUnitName is not null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lotsCountByUnitName).not.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cbc189c0-f69e-4e38-a784-eef7c1145eb5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    \"PKWDLskQAWBqD\",\"PKWDLIQFib0b1\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/metadata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid lotid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d9b8da8-007e-4766-9c59-d578a6bae712",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records do not include a valid LOT UID. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "df13d4dd-01a3-4934-9488-dbd0d7598029",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    \"0\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/metadata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid searchRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f23e001e-0e8d-4415-9bb0-0cd28af967a2",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ddd46d4c-4d85-47f6-a508-c0ff69949ce2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/metadata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid searchRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e2efc05-f551-4954-9482-7272c748279e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify returned lotsCountByUnitName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lotsCountByUnitName.SEED_AMOUNT_kg).to.not.eql(null);\r",
											"    pm.expect(jsonData.lotsCountByUnitName.SEED_AMOUNT_g).to.not.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "10917e68-a267-44c6-b6b1-4a7561506d47",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": {{searchRequestId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/metadata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"metadata"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PATCH /crops/{cropName}/lot-lists",
					"item": [
						{
							"name": "Verify response code and body when all values are valid - lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6bff4d7-56fb-40c3-b70a-a02b46eb6c0a",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80d4090b-cfa9-4343-8ff4-e0cca83d1a4e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"singleInput\": {\r\n    \"gid\": 40,\r\n    \"locationId\": 6000,\r\n    \"notes\": \"update via postman\",\r\n    \"searchComposite\": {\r\n      \"itemIds\": [\r\n        \"PKWDLATYmmtr2\"\r\n      ]\r\n    },\r\n    \"unitId\": 8264\r\n  }\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when there is a confirmed transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d19943a-f664-4ea9-a2a3-ef5f1f16570a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The unit update is not possible on lots with confirmed transactions\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d51348f0-bc62-4acf-80ff-fd4cf5a6cdc0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"singleInput\": {\r\n    \"gid\": 40,\r\n    \"locationId\": 6000,\r\n    \"notes\": \"update via postman\",\r\n    \"searchComposite\": {\r\n      \"itemIds\": [\r\n        \"PKWDLskQAWBqD\",\"PKWDLIQFib0b1\"\r\n      ]\r\n    },\r\n    \"unitId\": 8264\r\n  }\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7166ee29-5e88-44c3-b173-22708a87d1f0",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records do not include a valid LOT UID. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "463d94db-8b4f-402d-95e0-447af67201a6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"singleInput\": {\r\n    \"gid\": 40,\r\n    \"locationId\": 6000,\r\n    \"notes\": \"update via postman\",\r\n    \"searchComposite\": {\r\n      \"itemIds\": [\r\n        \"PKWDLATYmmtr2qqxx\"\r\n      ]\r\n    },\r\n    \"unitId\": 8264\r\n  }\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec2800fe-6f0b-4387-bc6c-ce0f09476529",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"pm.globals.set(\"variable_key\", \"variable_value\");\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ffb1b05-9b19-4f7c-b164-b11367ad0893",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"singleInput\": {\r\n    \"gid\": 40,\r\n    \"locationId\": 6000,\r\n    \"notes\": \"update via postman\",\r\n    \"searchComposite\": {\r\n      \"searchRequest\": 10\r\n    },\r\n    \"unitId\": 8264\r\n  }\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4fbcc0d-0903-45d9-8a77-2dbf6fd7dba7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid germplasm identifier\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6f091b54-6174-4d65-9d80-a77472091566",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"singleInput\": {\r\n    \"gid\": 0,\r\n    \"locationId\": 6000,\r\n    \"notes\": \"update via postman\",\r\n    \"searchComposite\": {\r\n     \"itemIds\": [\r\n        \"PKWDLATYmmtr2\"\r\n      ]\r\n    },\r\n    \"unitId\": 8264\r\n  }\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "446c31d4-cca9-476f-9339-b5c33355e93b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Lot Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81d3fb06-38ca-4e04-bfa5-f46cc7c45d63",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"singleInput\": {\r\n    \"gid\": 40,\r\n    \"locationId\": 6000,\r\n    \"notes\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\",\r\n    \"searchComposite\": {\r\n     \"itemIds\": [\r\n        \"PKWDLATYmmtr2\"\r\n      ]\r\n    },\r\n    \"unitId\": 8264\r\n  }\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1da65596-6e82-447b-8e7d-44207713a752",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid inventory unit identifier\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c630ccc8-2d57-48e4-9cca-fac3387bd7bd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"singleInput\": {\r\n    \"gid\": 40,\r\n    \"locationId\": 6000,\r\n    \"notes\": \"updated by postman\",\r\n    \"searchComposite\": {\r\n     \"itemIds\": [\r\n        \"PKWDLATYmmtr2\"\r\n      ]\r\n    },\r\n    \"unitId\": 0\r\n  }\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid locationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2785f86f-9141-47fa-93b6-d570b935f080",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid seed storage location\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8d88b53b-e0f1-457b-bcfd-71e2376fcd35",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"singleInput\": {\r\n    \"gid\": 40,\r\n    \"locationId\": 0,\r\n    \"notes\": \"updated by postman\",\r\n    \"searchComposite\": {\r\n     \"itemIds\": [\r\n        \"PKWDLATYmmtr2\"\r\n      ]\r\n    },\r\n    \"unitId\": 8264\r\n  }\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body if there is a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51b310a6-5353-4aaa-99ac-d4ea7e1698dd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records are not active. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "282915b5-2a44-4eea-934c-51251b1aab18",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"singleInput\": {\r\n    \"gid\": 21,\r\n    \"locationId\": 6000,\r\n    \"notes\": \"updated by postman\",\r\n    \"searchComposite\": {\r\n    \"searchRequest\": {{cstatus}}\r\n    },\r\n    \"unitId\": 8264\r\n  }\r\n }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{cropName}/lot-lists/template/xls",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c76a778-6a2f-43f7-9739-cf7e6d6af1bb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7b5e6a4-758f-419c-bac8-05f7381d353b",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists/templates/xls",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"lot-lists",
								"templates",
								"xls"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "transaction-resource",
			"item": [
				{
					"name": "GET /crops​/{cropName}​/lots​/{lotUUID}​/available-balance-transactions",
					"item": [
						{
							"name": "Verify response code and body when entered valid input - no programUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6c1f3ca-9931-466e-a4ea-a8b9f5944596",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5ed787a9-d445-4cc6-95e3-5ebe9865136b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/{{lotUUID}}/available-balance-transactions",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"{{lotUUID}}",
										"available-balance-transactions"
									]
								},
								"description": "GET /crops​/{cropName}​/lots​/{lotUUID}​/available-balance-transactions"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid input - programUUID specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cebfdb7-07bc-4f6d-a2e7-0121854a1ec1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "55b64c7e-9888-4c24-aed9-affc79cae359",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/{{lotUUID}}/available-balance-transactions?programUUID={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"{{lotUUID}}",
										"available-balance-transactions"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										}
									]
								},
								"description": "GET /crops​/{cropName}​/lots​/{lotUUID}​/available-balance-transactions"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropName}​/transactions​/pending-deposits-lists",
					"item": [
						{
							"name": "Verify response code and body for pending deposit with valid values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e0e40e4-9bbe-4f3f-b6a2-9148f72ba6e0",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "50fbf0bb-485a-4f17-a540-a88c3ea172ca",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"amount\": 5,\r\n    \"lotUID\": \"PKWDLiChfkGBz\",\r\n    \"notes\": \"pending deposit\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for pending deposit with invalid amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecf73f78-844e-4144-b3cc-2a2c469af6eb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid amount. Please review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f0df855-101f-485c-b991-33700093d4f7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"amount\": 0,\r\n    \"lotUID\": \"PKWDL1Dq9bnoi\",\r\n    \"notes\": \"pending deposit\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for pending deposit with non-existing lotUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75d7a737-f8f0-409c-bfd5-99b47ee8b3f6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records do not include a valid LOT UID. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "323f180a-659f-45c9-9e10-f673ecaae5a8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"amount\": 100,\r\n    \"lotUID\": \"PKWDL1Dq9bnoiXXXX\",\r\n    \"notes\": \"pending deposit\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for pending deposit with notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "834eb10a-5c2a-4196-91df-6eef0cb298b3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Transaction Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5163a0e5-c675-4f46-a10e-7d18386e7b84",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"amount\": 100,\r\n    \"lotUID\": \"PKWDL1Dq9bnoi\",\r\n    \"notes\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut a est ac mi tempus pulvinar a vel ipsum. Vivamus sit amet leo sed arcu aliquam euismod a vitae arcu. Curabitur sollicitudin dui nec felis molestie, non imperdiet est hendrerit. Pellentesque finibus vehicula libero, in pretium libero aliquam non. Aenean pharetra sem mauris, id tincidunt purus viverra at. Nulla quis bibendum orci. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Quisque tempus nisl libero, ut aliquet risus ullamcorper sed.\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for pending deposit with invalid cropname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "754ee01c-2a4e-4b0f-adbc-2a9321bd48bf",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid crop testdatax for URL:/crops/testdatax/transactions/pending-deposits-lists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d74090ca-af29-4c20-b200-96f287a8fbf5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"amount\": 100,\r\n    \"lotUID\": \"PKWDL1Dq9bnoi\",\r\n    \"notes\": \"confirmed deposit\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdatax/transactions/pending-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdatax",
										"transactions",
										"pending-deposits-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for pending deposit on a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f83abf6-2713-4f5d-87b2-edb68f8ad44b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records are not active. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eda89f88-6a38-4fda-a4c8-e10132b567d2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"amount\": 100,\r\n    \"lotUID\": \"PKWDLoAFmYsKj\",\r\n    \"notes\": \"pending deposit\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when confirming deposit with invalid cropName Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "453d1007-5e84-49bf-bb28-ab1001ae67da",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid crop testdatax for URL:/crops/testdatax/transactions/confirmed-deposits-lists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c9c2441d-c08a-479f-a2a6-cd83bd7f516b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    10\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdatax/transactions/confirmed-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdatax",
										"transactions",
										"confirmed-deposits-lists"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "559ee926-1eb2-4f8e-80d9-52d9490bee77",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1be3d052-6d18-4735-9e05-48cd6a99cc10",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropName}​/transactions​/confirmed-deposits​/generation",
					"item": [
						{
							"name": "Verify response code and body for multiple confirmed deposits with invalid soureStudyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f3a85ac-f564-4618-a516-4ebbd42fc3a6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Study does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b8048d12-9783-45d6-8c4f-da6debbe128d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"sourceStudyId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed deposits with valid lotUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a90550b5-2c87-4053-8f90-f3f473b71104",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2aaf9ba1-9230-4aea-9a79-44d07ec748f3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 30,\r\n    \"SEED_AMOUNT_Packets\": 30,\r\n    \"SEED_AMOUNT_No\": 30,\r\n    \"SEED_AMOUNT_g\": 30\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\", \"PKWDLgffPyYNP\", \"PKWDLFvaWYVzG\", \"PKWDLm331WhPb\",\"PKWDLilflVmIq\",       \"PKWDLgffPyYNP\", \"PKWDLFvaWYVzG\", \"PKWDL9qCj8wqf\", \"PKWDLrgTj1w6c\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits/generation?programUUID={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits",
										"generation"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed deposits on a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddcb3d69-d302-4970-a742-2f3e88a00ece",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records are not active. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f65ead8e-4ca4-47e4-86c7-3440b408c0db",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLoAFmYsKj\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed deposits with notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80d849d9-4c18-413d-92e8-0437397df004",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Transaction Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "914c5fb4-3879-45be-9128-8bfe62309117",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut a est ac mi tempus pulvinar a vel ipsum. Vivamus sit amet leo sed arcu aliquam euismod a vitae arcu. Curabitur sollicitudin dui nec felis molestie, non imperdiet est hendrerit. Pellentesque finibus vehicula libero, in pretium libero aliquam non. Aenean pharetra sem mauris, id tincidunt purus viverra at. Nulla quis bibendum orci. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Quisque tempus nisl libero, ut aliquet risus ullamcorper sed.\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed deposits with invalid lotUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ee2dc61-ab04-49d3-83be-42d5ca601d6e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records do not include a valid LOT UID. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5c72036f-42d3-4ef6-a8b7-3e2c0cc44f4a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGzx\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed deposits with invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd174251-052d-47cb-b299-ee56acfe074d",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f58c3143-9a09-4b65-8c12-12279594e7b9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"searchRequest\": 0\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed deposits with invalid unitName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27911ca7-06bf-4c1c-a706-0f7e88b2e226",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"We have not found the following Unit(s) SEED_AMOUNT_Packetx in the system. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e25c116-1437-4125-b8a8-35fa728eee6a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packetx\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed deposits with invalid cropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35e25e03-a268-4220-bc11-678e481bd944",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid crop testdatax for URL:/crops/testdatax/transactions/confirmed-deposits/generation\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85863fde-a41b-4d76-8510-cc77c1a4bce9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdatax/transactions/confirmed-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdatax",
										"transactions",
										"confirmed-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed deposits with invalid programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "963f7b8b-296c-4b28-b27a-bbdbaafeb1f4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid program: test for crop: testdata for service with path /crops/testdata/transactions/confirmed-deposits/generation\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f86b62a7-297a-4374-ad75-b84c8259fa72",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits/generation?programUUID=test",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits",
										"generation"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed deposits with invalid amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4ed4f98-40c4-4c04-9b08-d68627596a0d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid amount. Please review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0351fd3c-f3bd-4792-834f-654a3cdb5e88",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 0\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits",
										"generation"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropName}​/transactions​/pending-deposits​/generation",
					"item": [
						{
							"name": "Verify response code and body for multiple pending deposits with invalid soureStudyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "484b787f-ca3b-4d14-9958-39acc5026547",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Study does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2cf9c0ae-1d07-4105-af8e-5b5c847c412e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"sourceStudyId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending deposits with valid lotUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d070a40a-40f4-4fac-8f9c-cc8e57f65cab",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e1ab807-4d1d-4e8d-8c72-e968994a83f9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 30,\r\n    \"SEED_AMOUNT_Packets\": 30,\r\n    \"SEED_AMOUNT_No\": 30,\r\n    \"SEED_AMOUNT_g\": 30\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\", \"PKWDLgffPyYNP\", \"PKWDLFvaWYVzG\", \"PKWDLm331WhPb\",\"PKWDLilflVmIq\", \"PKWDL1Dq9bnoi\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits/generation?programUUID={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits",
										"generation"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending deposits on a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2771606-13af-4311-ba9f-2c9bf40f63b6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records are not active. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6ad7a394-f69f-40d6-bbc3-a49f3497b1d8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLoAFmYsKj\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending deposits with notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a428dede-541e-4ad7-a16d-39e240f8b163",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Transaction Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f1d9c74-a309-4849-ae16-82dbd0ee2555",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut a est ac mi tempus pulvinar a vel ipsum. Vivamus sit amet leo sed arcu aliquam euismod a vitae arcu. Curabitur sollicitudin dui nec felis molestie, non imperdiet est hendrerit. Pellentesque finibus vehicula libero, in pretium libero aliquam non. Aenean pharetra sem mauris, id tincidunt purus viverra at. Nulla quis bibendum orci. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Quisque tempus nisl libero, ut aliquet risus ullamcorper sed.\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending deposits with invalid lotUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0b0092a-6f3e-4d5e-899e-c8ac3721859e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records do not include a valid LOT UID. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9017a571-b053-48c0-acee-18d414aeb81c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGzx\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending deposits with invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03aec17f-bb67-4bf6-a268-fb6d89fab8be",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b72b6abf-f5b8-4d78-8faa-4981a8b64f66",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"searchRequest\": 0\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending deposits with invalid unitName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2258ea90-18af-483f-8612-6a8f897d5128",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"We have not found the following Unit(s) SEED_AMOUNT_Packetx in the system. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "29c089f5-f512-4d19-baa2-f14c0fc1e652",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packetx\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending deposits with invalid cropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61d42dbf-d19e-4b7c-85ce-b57c9a35cde5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid crop testdatax for URL:/crops/testdatax/transactions/pending-deposits/generation\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f36198cf-ed80-400e-a86d-9afc6c6e987d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdatax/transactions/pending-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdatax",
										"transactions",
										"pending-deposits",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending deposits with invalid programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79942597-33fd-490a-a1f1-04e31d55679f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid program: test for crop: testdata for service with path /crops/testdata/transactions/pending-deposits/generation\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "34b7ed25-5770-4b2f-b023-df3e261f8c51",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 2,\r\n    \"SEED_AMOUNT_Packets\": 2\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits/generation?programUUID=test",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits",
										"generation"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending deposits with invalid amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21fb9a0c-15a3-4d07-aba4-6a44dd3b1a23",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid amount. Please review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bbf7a299-e23e-4658-8484-4494b5035ced",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"depositsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": 0\r\n  },\r\n  \"notes\": \"test\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-deposits/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-deposits",
										"generation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c2f22eb7-f81b-4236-b99f-2410d7cfc2a8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "45effbff-393f-40c6-8e2d-f3e6884e7194",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropName}​/transactions​/pending-withdrawals​/generation",
					"item": [
						{
							"name": "Verify response code and body for multiple pending withdrawals with specified amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a31ef1e-06d2-43b9-8c19-084eb4d69a35",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb62627a-fea2-40e1-a689-1366b59bb2fb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"pending withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLgffPyYNP\", \"PKWDLFvaWYVzG\", \"PKWDL4yPLFKnk\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 5\r\n    },\r\n    \"SEED_AMOUNT_g\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 5\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-withdrawals/generation?programUUID={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-withdrawals",
										"generation"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending withdrawals with withdrawal amount > available amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba95dc8f-deba-453a-8e94-e07e0a6f1960",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One of the selected lots does not have enough available inventory to perform the withdrawal. Please review the amount\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "99276439-e4dd-4a87-9b13-a61fdd2613bc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"pending withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLgffPyYNP\", \"PKWDLFvaWYVzG\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 10000\r\n    },\r\n    \"SEED_AMOUNT_g\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 10000\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending withdrawals with all amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564c3917-a41e-4d8c-84dd-66fb0ffed96f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0ed588a-a98f-4473-a5e3-817e1445073a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"pending withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLgffPyYNP\", \"PKWDLFvaWYVzG\", \"PKWDL4yPLFKnk\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_g\": {\r\n      \"reserveAllAvailableBalance\": true,\r\n      \"withdrawalAmount\": 0\r\n    },\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": true,\r\n      \"withdrawalAmount\": 0\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending withdrawals on a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9aa30d46-12e3-4965-acd0-02e91ec16dc6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records are not active. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1685c8c-a7d2-4f21-bcf9-e149284fff16",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLoAFmYsKj\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending withdrawals with notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d45b101-7616-498c-95bd-9bd8bad620ba",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Transaction Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eae1fe97-40d8-4db8-9998-e2db34f1eea5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut a est ac mi tempus pulvinar a vel ipsum. Vivamus sit amet leo sed arcu aliquam euismod a vitae arcu. Curabitur sollicitudin dui nec felis molestie, non imperdiet est hendrerit. Pellentesque finibus vehicula libero, in pretium libero aliquam non. Aenean pharetra sem mauris, id tincidunt purus viverra at. Nulla quis bibendum orci. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Quisque tempus nisl libero, ut aliquet risus ullamcorper sed.\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending withdrawals with invalid lotUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e86ac639-5d62-4bdd-9d77-63a1d56637a8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records do not include a valid LOT UID. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d79ee2fc-941b-4f87-b302-62a3b72474e8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"X\",\"Y\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending withdrawals with invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb0b1d38-7a1a-498c-81ed-c424d3a33b7c",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b32bc249-2695-4361-8e41-4a25c8e3c32d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"searchRequest\": 0\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending withdrawals with invalid unitName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc365dfb-1866-4757-83ca-021316aa868b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"We have not found the following Unit(s) SEED_AMOUNT_kgX in the system. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1060fa2-2532-4882-be08-556285d91cf0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kgX\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending withdrawals with invalid cropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "247f04ce-363a-4090-a08a-d09a51d2feb7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid crop testdatax for URL:/crops/testdatax/transactions/pending-withdrawals/generation\");\r",
											"pm.globals.set(\"variable_key\", \"variable_value\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09289172-e3c0-4db7-94c9-6b14ea05cb04",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdatax/transactions/pending-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdatax",
										"transactions",
										"pending-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending withdrawals with invalid programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "592f05c7-a85a-4779-bfcd-bfddcbd25624",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid program: test for crop: testdata for service with path /crops/testdata/transactions/pending-withdrawals/generation\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1859db1b-62ed-4943-b9e4-cffd66490920",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-withdrawals/generation?programUUID=test",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-withdrawals",
										"generation"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple pending withdrawals with invalid amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3fb7d5a-732f-4d87-88f2-468c3a8443a7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid amount. Please review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "51c6cc55-14ab-4e10-bbec-f5bde9e229c4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 0\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 0\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/pending-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"pending-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8223eb2d-f001-4e91-a6ca-338b26a88f48",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fceae2e5-70af-4290-8094-b15ad7cee36c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /crops/{cropName}/transactions/search",
					"item": [
						{
							"name": "Verify response code and body when entered GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e543f4ae-4320-4274-a80c-07fe7e7f8757",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"germplasmDbId1\");\r",
											"pm.environment.set(\"germplasmDbId1\", jsonData.result.searchResultDbId);\r",
											"parseInt(pm.environment.get('germplasmDbId1'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5556da2a-e794-4edc-8fd8-732ad08f0fb2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gids\": [40]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered createdDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "630f3ddc-9874-49e9-9655-5e578fce4d07",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"createdDate\");\r",
											"pm.environment.set(\"createdDate\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "038a16a8-2701-410c-8ae3-a7835776a647",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdDate\": \"2018-10-25\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered lot status = Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3157610a-9f84-479f-8831-dd81552638b4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lstatus\");\r",
											"pm.environment.set(\"lstatus\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8875db43-f70d-45c9-99c8-e69ea44dd286",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0ebe95b-3110-4747-85da-f8a1d845cea6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"unitId\");\r",
											"pm.environment.set(\"unitId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a4a52014-acd5-4ae8-983f-c291d3ba6802",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered createdByUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a8796f-de02-46b3-8b4b-65c28befb5dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"createdByUsername\");\r",
											"pm.environment.set(\"createdByUsername\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d779d9af-c208-45d1-a723-c1c59ea8f337",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"createdByUsername\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered germplasmListIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d233a2ad-c1bc-4e3b-9a8b-f281ba03056a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"germplasmListIds\");\r",
											"pm.environment.set(\"germplasmListIds\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a6697406-36ba-4e32-8446-bf4a1149ee64",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmListIds\": [21,22,23]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered stockId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "558176ec-bb65-4612-8bd4-085b66208a9d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"stockId\");\r",
											"pm.environment.set(\"stockId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59cc3b27-1291-4272-aea5-4b0d85e44340",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"stockId\": \"SID11-1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered lotUUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c745038-d701-46b9-92f4-e19dbfc458cc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lotUUIDs\");\r",
											"pm.environment.set(\"lotUUIDs\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2cfc6fbd-afb4-4aa0-9efe-fed65320172f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotUUIDs\": [\"24745a1f-0871-4531-9ec6-b46da0f1c81f\",\"ab5b9671-342f-48c2-9b22-10035b8dd6df\",\"48172afa-7a7f-4ca1-9d68-9f6bccdb2fb1\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered lotUUIDs-confirmedwithdraw",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d221a0d-684d-4e7a-8c0d-ff921d34324c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"confirmw\");\r",
											"pm.environment.set(\"confirmw\", jsonData.result.searchResultDbId);\r",
											"parseInt(pm.environment.get('confirmw'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "805d890e-70f5-47cb-bf94-31d0da32162d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotUUIDs\": [\"PKWDLgffPyYNP\", \"PKWDLFvaWYVzG\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered lotUUIDs-pendingwithdraw",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32f5d9a1-89a2-453b-b039-cf8e5eb72549",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"confirmw\");\r",
											"pm.environment.set(\"pendingw\", jsonData.result.searchResultDbId);\r",
											"parseInt(pm.environment.get('pendingw'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "989a4ad6-704a-433f-be91-f0f4ec199b73",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotUUIDs\": [\"PKWDLm331WhPb\",\"PKWDLilflVmIq\"],\r\n  \"transactionStatus\":[0]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered a lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f721325d-5a6f-4f89-b309-de7173b2f6fe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lotUUID1\");\r",
											"pm.environment.set(\"lotUUID1\", jsonData.result.searchResultDbId);\r",
											"parseInt(pm.environment.get('lotUUID1'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0eedeb5c-1fe8-4156-9bfa-57f9b4d1808a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotUUIDs\": [\"PKWDL1Dq9bnoi\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered multiple lotids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5db9c7a9-7664-4365-8f9b-f1c94e467e53",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"multiplelots\");\r",
											"pm.environment.set(\"multiplelots\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb40ee4d-100b-480e-a473-d1f9137ed094",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotIds\": [21,22,23]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered designation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9275aa85-5bad-48e9-a6ed-f3c36d0715b3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lot_desig\");\r",
											"pm.environment.set(\"lot_desig\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "767fab06-3db9-4b25-8b96-0e2848ee602e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"designation\": \"CML1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4f23f8b-e5d2-4252-b1a3-e5701b73ade6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"actualBalance\");\r",
											"pm.environment.set(\"actualBalance\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7c016150-a093-4a18-9b32-3fe638158ea7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"maxAmount\": 200,\r\n\"minAmount\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered multiple transactionids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae73caaa-9b7a-49d2-b524-85cdac221646",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"multipletransids\");\r",
											"pm.environment.set(\"multipletransids\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9c571dc-f82e-44f0-ba09-5435804f9d0e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"transactionIds\": [41,42,43,50,51]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when transaction is Confirmed Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b0a1c98-5239-4560-b504-1f802f056e02",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"tstatus\");\r",
											"pm.environment.set(\"tstatus\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cc5d89df-2241-4bf2-9806-257a9fce17ba",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"transactionStatus\": [1],\r\n  \"transactionTypes\":[4]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when transaction is Pending Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c74ef789-b04a-49bd-8b8d-692fb4698dfa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"pstatus\");\r",
											"pm.environment.set(\"pstatus\", jsonData.result.searchResultDbId);\r",
											"parseInt(pm.environment.get('pstatus'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7df693da-95f1-4e03-8f32-f6f9f94fff15",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"lotIds\": [56],\r\n\"transactionStatus\":[0]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when transaction is Pending Withdrawal",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "801568fc-d4a9-4b03-8789-9c8adc3e6bbd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"pwithdraw\");\r",
											"pm.environment.set(\"pwithdraw\", jsonData.result.searchResultDbId);\r",
											"parseInt(pm.environment.get('pwithdraw'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "533d39e5-b1b7-4526-8424-66878b34e195",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"lotIds\": [57],\r\n\"transactionStatus\":[0]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered harvestingStudyIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23cbef49-07d2-4c60-a909-81fa1dd311d9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"harvestingStudyIds\");\r",
											"pm.environment.set(\"harvestingStudyIds\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "054f06a1-5278-43b7-9bcb-967632ba3620",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"harvestingStudyIds\": [3009,3013]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered plantingStudyIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04e584dd-c0c2-4e43-bd86-36ff720b3cb7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"plantingStudyIds\");\r",
											"pm.environment.set(\"plantingStudyIds\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15bc3fcd-4a42-48dd-9843-31a5b723018a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"plantingStudyIds\": [3009,3013]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when transactiontypes=Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "833295c5-8669-4842-b9b7-5bfbc095c46c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"transactiontypes\");\r",
											"pm.environment.set(\"transactiontypes\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52f47bfe-d670-4525-8b48-49d2d0843fe9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \" transactiontypes\": \"4\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered mininum and maximum range",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b120615e-108d-44de-b07c-986f10367158",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"min-max\");\r",
											"pm.environment.set(\"min-max\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5847919-941a-40a0-b0c6-a3019f18ea8e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"maxAmount\": 1,\r\n   \"minAmount\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e44bfcd2-814e-4ba6-a3ce-df1ee276a628",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56e60a76-c061-47a0-9f19-cd1cb01eb59f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{cropName}/transactions/search",
					"item": [
						{
							"name": "Verify results when entered searchRequestId that filters by GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "703b81e5-945d-4db5-ba09-e4e6ac4c2179",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 50) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(50);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "01a59b58-7432-4528-b1e3-c5ec98aad8da",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{germplasmDbId1}}&page=0&size=50&sort=transactionId,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{germplasmDbId1}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by createdDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7525e4e-0324-4325-9f91-040aff662a4a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 41) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(41);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "483ebac3-1e18-45a9-a8eb-22dd81496bd5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{createdDate}}&page=0&size=50&sort=transactionId,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{createdDate}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by lot status=Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3867af0b-45e7-4713-834f-8f8f576f4de0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 41) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(41);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6ee1b676-a228-4041-a9e7-6a70a4e0c45b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{lstatus}}&page=0&size=50&sort=transactionId,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{lstatus}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fddd5486-f835-4fe2-95b3-0dfa1a4788b4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 50) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(50);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            pm.expect(jsonData[i].lot.unitId).to.eql(8264);\r",
											"            pm.expect(jsonData[i].lot.unitName).to.eql(\"SEED_AMOUNT_g\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a8c7405-dbbc-46ea-8c1d-54a7bb54135f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{unitId}}&page=0&size=50&sort=transactionId,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{unitId}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by createdByUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "471bf292-d9e2-4489-a68f-2d6a5cb8b1fd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 50) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(50);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85efb7cc-64ca-4b3f-8215-01cdc7bf32a5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{createdByUsername}}&page=0&size=50&sort=transactionId,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{createdByUsername}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by germplasmListIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b851481-42f7-4228-954f-214832c24a6f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 50) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(50);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            pm.expect(jsonData[i].lot.gid).to.eql(21);\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5dbf3209-50d7-49f4-a230-1e551b4a14c1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{germplasmListIds}}&page=0&size=50&sort=transactionId,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{germplasmListIds}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by multiple lot ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "646767cf-0e59-4a8b-8a78-b67ba557c98c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 50) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(50);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            pm.expect(jsonData[i].lot.lotId).to.eql(21);\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d30a608d-79a0-4e10-b7b2-0564f8b8190d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{multiplelots}}&page=0&size=50&sort=transactionId,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{multiplelots}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by harvestingStudyIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59292d50-5d0c-4227-81b4-66fe067e4e3a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 50) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(50);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            pm.expect(jsonData[i].lot.lotId).to.eql(21);\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e32e19ac-7430-48c9-95db-85fa6e10e3c5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{harvestingStudyIds}}&page=0&size=50&sort=transactionId,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{harvestingStudyIds}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by plantingStudyIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9ccb03d-da23-4b93-ad3c-4f19de0c0cc2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 50) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(50);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            pm.expect(jsonData[i].lot.lotId).to.eql(21);\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "942bf399-a024-41e6-8eff-040bb30f1948",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{plantingStudyIds}}&page=0&size=50&sort=transactionId,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{plantingStudyIds}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by multiple transaction ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a807730-bfde-441d-ad5e-559d4df54e5a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 50) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(50);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            pm.expect(jsonData[i].lot.lotId).to.eql(30);\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c401ac0a-ed03-4451-8748-9da678d2448d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{multipletransids}}&page=0&size=50&sort=transactionId,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{multipletransids}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by designation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88dbb17e-0a90-4689-8698-0038fcab4416",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 50) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(50);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            pm.expect(jsonData[i].lot.designation).to.eql(\"CML1\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1293346e-4820-44b1-b08c-2e3c4c21306f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{lot_desig}}&page=0&size=50&sort=transactionId,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{lot_desig}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters confirmed deposit transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89fa6964-03d4-4101-b433-6737fd48a508",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 50) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(50);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            pm.expect(jsonData[i].lot.lotId).to.eql(30);\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bf4caaad-331d-4d5d-be08-d8f48f2905a3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{tstatus}}&page=0&size=50&sort=transactionId,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{tstatus}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by stockId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "444c3f76-264b-4e44-800f-3061feb851d3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 101) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(101);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Pending\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(50.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"pending deposit\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2020-10-08\");\r",
											"            pm.expect(jsonData[i].lot.stockId).to.eql(\"SID11-1\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d31fd50d-46f6-419e-ae3e-99fada95b9ca",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{stockId}}&page=0&size=50&sort=transactionId,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{stockId}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by lotUUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34c5651b-fe5e-40af-94e9-a58ff01f3517",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 50) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(50);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            pm.expect(jsonData[i].notes).to.eql(\"From List Import\");\r",
											"            pm.expect(jsonData[i].createdDate).to.eql(\"2018-10-25\");\r",
											"            pm.expect(jsonData[i].lot.lotUUID).to.eql(\"269ab93d-2390-4be2-ad0e-6e32b84c644e\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "94993abe-1115-4fbe-9bb4-b85c30bf6bb7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{lotUUIDs}}&page=0&size=50&sort=transactionId,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{lotUUIDs}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2ec3a2a-e5d3-44fa-9d45-503c8b2017a8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check details of existing transaction record are correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var transactionId = jsonData[i].transactionId\r",
											"        if (transactionId == 50) {\r",
											"            pm.expect(jsonData[i].transactionId).to.eql(50);\r",
											"            pm.expect(jsonData[i].createdByUsername).to.eql(\"admin\");\r",
											"            pm.expect(jsonData[i].transactionType).to.eql(\"Deposit\");\r",
											"            pm.expect(jsonData[i].transactionStatus).to.eql(\"Confirmed\");\r",
											"            pm.expect(jsonData[i].amount).to.eql(100.0);\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "baf68add-347f-40d3-bff4-a72e0539ea90",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?programUUID={{programDbId}}&searchRequestId={{actualBalance}}&page=0&size=50&sort=transactionId,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										},
										{
											"key": "searchRequestId",
											"value": "{{actualBalance}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "transactionId,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47d77578-0486-4ead-a593-e47c014873d1",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "25156353-2086-449b-8285-a45b8c4af12b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/search?searchRequestId=0&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "0"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d585f4d0-387c-432f-8645-833f6fdef0f2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a757b70f-2f20-445c-89a4-bbef1bced3f5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropName}​/transactions​/confirmed-withdrawals​/generation",
					"item": [
						{
							"name": "Verify response code and body for multiple confirmed withdrawals with specified amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89bb8a29-4d18-438d-b6cf-0efda51add67",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5bd67807-11a2-4d21-93c1-f07975de1841",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 5\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 5\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed withdrawals with all amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9e6628c-1a00-46e5-9286-a8f970014168",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09497162-8ea4-4393-96e7-7fae814d3ee3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDL9qCj8wqf\", \"PKWDLrgTj1w6c\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": true,\r\n      \"withdrawalAmount\": 0\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed withdrawals with withdrawal amount > available amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7243395-2ce5-4ac3-b186-71aaf46f5dfb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One of the selected lots does not have enough available inventory to perform the withdrawal. Please review the amount\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1b8f2619-fcb6-41a8-9c7c-60fa27e17f56",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 10000\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 10000\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-withdrawals/generation?programUUID={{programDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-withdrawals",
										"generation"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{programDbId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed withdrawals on a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "320a1e8a-1605-43e1-bd62-2c227e5ba810",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records are not active. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "acca0531-7c7c-40bd-a13f-15a050f29c63",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLoAFmYsKj\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed withdrawals with notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4226fb33-f1c0-4024-9e92-abad363c097a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Transaction Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eb585291-e729-4291-8d3e-1030d4a882c8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut a est ac mi tempus pulvinar a vel ipsum. Vivamus sit amet leo sed arcu aliquam euismod a vitae arcu. Curabitur sollicitudin dui nec felis molestie, non imperdiet est hendrerit. Pellentesque finibus vehicula libero, in pretium libero aliquam non. Aenean pharetra sem mauris, id tincidunt purus viverra at. Nulla quis bibendum orci. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Quisque tempus nisl libero, ut aliquet risus ullamcorper sed.\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed withdrawals with invalid lotUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "598fb700-6276-46b5-8a4e-d272e1fbb2f8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records do not include a valid LOT UID. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ac476d2f-fa99-4182-99d5-1cdb5bd22669",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"X\",\"Y\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed withdrawals with invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2d415f8-848d-484a-9ee2-8a20ed2fce2f",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c3b00909-da04-4856-a543-9f339fe3583b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"searchRequest\": 0\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed withdrawals with invalid unitName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d86ca371-af0f-47b2-a103-07c69b94ad68",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"We have not found the following Unit(s) SEED_AMOUNT_kgX in the system. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83ef2bb1-a026-4f71-907d-821791d76856",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kgX\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed withdrawals with invalid cropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c14cff7-23e5-4cb3-a5d6-23cd56ea41c3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid crop testdatax for URL:/crops/testdatax/transactions/confirmed-withdrawals/generation\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f98e43f-2a22-4554-ad23-b2235d1d5fff",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdatax/transactions/confirmed-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdatax",
										"transactions",
										"confirmed-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed withdrawal with invalid programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35648b87-2f45-442a-92ba-3166c3ba107c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid program: test for crop: testdata for service with path /crops/testdata/transactions/confirmed-withdrawals/generation\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a22de0fb-46c1-4dcf-82a4-9551169786b8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 1\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-withdrawals/generation?programUUID=test",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-withdrawals",
										"generation"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for multiple confirmed withdrawals with invalid amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "897f4905-0cb1-47a8-903e-820f11ef0926",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid amount. Please review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4842b0b8-c714-438d-8696-4f4d0b5ec177",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\": \"confirmed withdrawals\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLU54yhRGz\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  },\r\n  \"withdrawalsPerUnit\": {\r\n    \"SEED_AMOUNT_kg\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 0\r\n    },\r\n    \"SEED_AMOUNT_Packets\": {\r\n      \"reserveAllAvailableBalance\": false,\r\n      \"withdrawalAmount\": 0\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-withdrawals/generation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-withdrawals",
										"generation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8d830ed-fd86-4041-8408-a7ab0497f36e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "768f6b55-229f-4970-827d-60b950c42e75",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropName}​/transactions​/cancellation",
					"item": [
						{
							"name": "Verify response code and body when cancelling pending transaction with invalid lotUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd84f5a7-fd9c-4b8c-bfec-4f50867a5d90",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"List of transactions is empty or your search parameter do not retrieve any transactions to operate with\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ba559ca0-8045-41ce-9639-f296f45b11fb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    10\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/cancellation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"cancellation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when cancelling pending transaction with valid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c02f309-7758-44a6-8d71-04ed674967a9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67c443cb-779f-48b9-aebd-5c4bb16cd572",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": {{pstatus}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/cancellation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"cancellation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when cancelling pending transaction with invalid cropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83c14d3e-f561-4a25-9c66-af5baca39d98",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid crop testdatax for URL:/crops/testdatax/transactions/cancellation\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "08b17ebd-a457-4d81-bbf4-7b287f7a475b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    10\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdatax/transactions/cancellation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdatax",
										"transactions",
										"cancellation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when cancelling a confirmed transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08745ebd-bd96-46b9-8760-484319eb9696",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The following transactions 80 are not in Pending Status. This action is only allowed for Pending Transactions. Please review.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e6fd2579-80db-432c-8766-b21249b38114",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    80\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/cancellation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"cancellation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when cancelling pending transaction with invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e94bbdc-7baa-4b02-9b09-57d3824842e6",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "07c25197-06e3-4a56-9f1a-0c14a8e438b3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": 20\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/cancellation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"cancellation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when cancelling pending transaction with valid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ee20e37-4ec7-4a61-a0c8-602bd8095c0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be305bc3-b765-4e71-b6e2-bc6f6de3ace7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": {{pwithdraw}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/cancellation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"cancellation"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropName}​/transactions​/confirmation",
					"item": [
						{
							"name": "Verify response code and body when confirming pending transaction with invalid lotUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59dd35a3-8b35-432c-ba1a-685e7326c580",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"List of transactions is empty or your search parameter do not retrieve any transactions to operate with\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4512d1d9-4aa5-4bb8-8617-c511511fe9a8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    10\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when confirming a non-pending transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecc0922c-9da3-4818-8398-744a13ea6fea",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The following transactions 80 are not in Pending Status. This action is only allowed for Pending Transactions. Please review.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c562fd64-9384-41e6-a3a5-76424143b80e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    80\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when confirming pending transaction with invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be01c5a4-a749-47d9-8d41-34f54d383601",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a2085a2e-7610-430c-b007-8c46f02d8157",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": 20\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when confirming pending transaction with valid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "795c9e65-5613-48b7-ac22-c11092d1b06d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "112779c9-bf85-49fe-a999-08748ea0117a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"searchRequest\": {{pendingw}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when confirming pending transaction with invalid cropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a28fec7-95a2-4c4f-8260-8e762a7a8f1e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid crop testdatax for URL:/crops/testdatax/transactions/confirmation\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "458bda4e-d3b8-454d-8428-5dc630a16e27",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    10\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdatax/transactions/confirmation",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdatax",
										"transactions",
										"confirmation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "34bd6c5f-dcde-4fe8-a2d6-500f4d8ebf48",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37f0f270-90f5-49a6-90a1-b3da9564b05b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropName}​/transactions​/confirmed-adjustments",
					"item": [
						{
							"name": "Verify response code and body for confirmed adjustments with valid lotUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60a0a433-f2b3-4ebf-8c78-2d8629ca27f7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7cf5850e-1990-4229-90be-bbed3307da09",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"balance\": 1000,\r\n  \"notes\": \"confirmed adjustments\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDL1Dq9bnoi\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-adjustments",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-adjustments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for confirmed adjustments on a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a1bb311-e02f-4325-b4cd-2bb3d01d0ce6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records are not active. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f1d51fcf-02fd-4865-937f-97e357f713a4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"balance\": 150,\r\n  \"notes\": \"confirmed adjustments\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDLoAFmYsKj\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-adjustments",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-adjustments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for confirmed adjustments with invalid lotUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8b7723a-ee44-4c67-ac3d-2cd7c0528b93",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records do not include a valid LOT UID. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5bcf5ec2-bda6-49da-b372-75e7c2a6ac8c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"balance\": 150,\r\n  \"notes\": \"confirmed adjustments\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDL1Dq9bnoix\",\"PKWDL0U3XfJsw\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-adjustments",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-adjustments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for confirmed adjustments with invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f44e2ff-ef1b-4c07-9d53-dc13e03a5858",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c02c1230-1485-418c-bf33-cdcd2e91278f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"balance\": 150,\r\n  \"notes\": \"confirmed adjustments\",\r\n  \"selectedLots\": {\r\n    \"searchRequest\": 0\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-adjustments",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-adjustments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for confirmed adjustments with valid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1a05cd2-4485-44f2-a5c3-ae92be3200bb",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7713f8d0-9b6c-46d5-8766-99c9c0f3e98f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"balance\": 150,\r\n  \"notes\": \"confirmed adjustments\",\r\n  \"selectedLots\": {\r\n    \"searchRequest\": {{lotUUID1}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-adjustments",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-adjustments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for confirmed adjustments with balance < pending withdrawal amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec41c9a0-3f92-4ac1-a75a-85f149d025a7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"New actual balance for the StockId: SID6-1 can not be inferior to the pending withdrawals. Cancel some of the lot pending transactions to proceed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9fca2891-7f11-4e87-9443-61c28ab525a2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"balance\": 1,\r\n  \"notes\": \"confirmed adjustments\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDL1Dq9bnoi\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-adjustments",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-adjustments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for confirmed adjustments with notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8b1993a-efa4-4142-970b-0cf2e893cea5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Transaction Notes is 255 characters\");\r",
											"pm.environment.get(\"variable_key\");\r",
											"pm.variables.get(\"variable_key\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1490780a-7dd1-48af-89c6-ec5a0bab1333",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"balance\": 150,\r\n  \"notes\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut a est ac mi tempus pulvinar a vel ipsum. Vivamus sit amet leo sed arcu aliquam euismod a vitae arcu. Curabitur sollicitudin dui nec felis molestie, non imperdiet est hendrerit. Pellentesque finibus vehicula libero, in pretium libero aliquam non. Aenean pharetra sem mauris, id tincidunt purus viverra at. Nulla quis bibendum orci. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Quisque tempus nisl libero, ut aliquet risus ullamcorper sed.\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDL1Dq9bnoi\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-adjustments",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-adjustments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for confirmed adjustments with invalid cropname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95c89f95-840c-47f8-af92-b9c6c9ec6a3d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid crop testdatax for URL:/crops/testdatax/transactions/confirmed-adjustments\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c46b9641-c830-46e2-9d25-d19d25f5bc5a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"balance\": 150,\r\n  \"notes\": \"confirmed adjustments\",\r\n  \"selectedLots\": {\r\n    \"itemIds\": [\r\n      \"PKWDL1Dq9bnoi\",\"PKWDLld3QgQqq\"\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdatax/transactions/confirmed-adjustments",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdatax",
										"transactions",
										"confirmed-adjustments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when confirming adjustments with invalid cropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cf3c81d-a243-464b-953a-94792bf4adca",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid crop testdatax for URL:/crops/testdatax/transactions/confirmed-adjustments\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a722aa26-b4c5-4554-a657-f52f2c11412a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    10\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdatax/transactions/confirmed-adjustments",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdatax",
										"transactions",
										"confirmed-adjustments"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropName}​/transactions​/confirmed-deposits-lists",
					"item": [
						{
							"name": "Verify response code and body for confirmed deposit with valid values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "352e9fbf-8584-4c54-9f9c-2a9dae0d8228",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2c84f873-7f00-4fe5-beaa-7408699678a4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"amount\": 100,\r\n    \"lotUID\": \"PKWDL1Dq9bnoi\",\r\n    \"notes\": \"confirmed deposit\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for confirmed deposit on a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17967483-64e3-4107-96aa-bcb86b9c4571",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records are not active. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a5de5ce-6394-499c-878d-eb7fe426c2c6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"amount\": 100,\r\n    \"lotUID\": \"PKWDLoAFmYsKj\",\r\n    \"notes\": \"confirmed deposit\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for confirmed deposit with invalid amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fa4239a-45e8-4d59-aa48-dfe4c5473e8e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid amount. Please review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fea092a1-df5e-4bf5-89b8-024e82b97de1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"amount\": 0,\r\n    \"lotUID\": \"PKWDL1Dq9bnoi\",\r\n    \"notes\": \"confirmed deposit\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for confirmed deposit with non-existing lotUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea7f999f-b6e0-40bc-8fc7-4590d555a4a0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"One or more of the records do not include a valid LOT UID. Please correct them and try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a5185b8-8c0e-4810-96b8-c3c4d9a9bc9d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"amount\": 100,\r\n    \"lotUID\": \"PKWDL1Dq9bnoiXXXX\",\r\n    \"notes\": \"confirmed deposit\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body for confirmed deposit with notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f7cb893-57ea-40da-b3dc-d57675eb0af4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Transaction Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "87395fb5-7e91-49a9-869e-5f2f48c4679e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"amount\": 100,\r\n    \"lotUID\": \"PKWDL1Dq9bnoi\",\r\n    \"notes\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut a est ac mi tempus pulvinar a vel ipsum. Vivamus sit amet leo sed arcu aliquam euismod a vitae arcu. Curabitur sollicitudin dui nec felis molestie, non imperdiet est hendrerit. Pellentesque finibus vehicula libero, in pretium libero aliquam non. Aenean pharetra sem mauris, id tincidunt purus viverra at. Nulla quis bibendum orci. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Quisque tempus nisl libero, ut aliquet risus ullamcorper sed.\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/transactions/confirmed-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"transactions",
										"confirmed-deposits-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when confirming deposit with invalid cropName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af57cad3-16c3-4248-995d-3a81fd4fbd62",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message is correct\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid crop testdatax for URL:/crops/testdatax/transactions/confirmed-deposits-lists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "17a2fda1-284e-47bd-ad71-09f851a42e92",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    10\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdatax/transactions/confirmed-deposits-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdatax",
										"transactions",
										"confirmed-deposits-lists"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{cropName}​/transaction-status-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9825d9e6-a3d3-49d9-ac78-f7652a6b2862",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check available transaction status types\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].value).to.eql(\"Pending\");\r",
									"    pm.expect(jsonData[0].intValue).to.eql(0);\r",
									"    pm.expect(jsonData[1].value).to.eql(\"Confirmed\");\r",
									"    pm.expect(jsonData[1].intValue).to.eql(1);\r",
									"    pm.expect(jsonData[2].value).to.eql(\"Cancelled\");\r",
									"    pm.expect(jsonData[2].intValue).to.eql(9);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4218d50a-c4dd-45a1-a586-42a3abc778f4",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/transaction-status-types",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"transaction-status-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ​/crops​/{cropName}​/transaction-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7032a20a-baac-43c4-b7d3-bfc2528f8192",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check available transaction status types\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(1);\r",
									"    pm.expect(jsonData[0].value).to.eql(\"Withdrawal\");\r",
									"    pm.expect(jsonData[1].id).to.eql(2);\r",
									"    pm.expect(jsonData[1].value).to.eql(\"Discard\");\r",
									"    pm.expect(jsonData[2].id).to.eql(3);\r",
									"    pm.expect(jsonData[2].value).to.eql(\"Adjustment\");\r",
									"    pm.expect(jsonData[3].id).to.eql(4);\r",
									"    pm.expect(jsonData[3].value).to.eql(\"Deposit\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7e7c0cef-d2af-4104-8364-b24818906506",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/transaction-types",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"transaction-types"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "study-resource",
			"item": [
				{
					"name": "GET ​/crops​/{cropName}​/programs​/{programUUID}​/studies​/{studyId}​/sampled",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs to study with samples",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87101a22-9a9e-4aff-a811-68c43d6131d6",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned boolean value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5dfec396-69c1-41db-91bc-ea7bae40d352",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/sampled",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"sampled"
									]
								},
								"description": "GET /crops​/{cropName}​/programs​/{programUUID}​/studies​/{studyId}​/sampled"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs to study with no samples",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecb855fe-0fec-4f62-b804-4b9ae8d491be",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned boolean value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ac4ceb7a-83b1-4a0f-a7b2-b1bd570e7eef",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{locked_studyId}}/sampled",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{locked_studyId}}",
										"sampled"
									]
								},
								"description": "GET /crops​/{cropName}​/programs​/{programUUID}​/studies​/{studyId}​/sampled"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "study-instance-resource",
			"item": [
				{
					"name": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94ac66a7-c3ce-4b72-ad45-102a1bf78710",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check locationName\", function () {",
											"  pm.expect(jsonData[0].locationName).to.eql(\"Africa Rice Centre\");   ",
											"});",
											"",
											"pm.test(\"Check locationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].locationAbbreviation).to.eql(\"WARDA\");   ",
											"});",
											"",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].customLocationAbbreviation).to.eql(null);   ",
											"});",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].customLocationAbbreviation).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check instanceNumber\", function () {",
											"  pm.expect(jsonData[0].instanceNumber).to.eql(1);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldmap\", function () {",
											"  pm.expect(jsonData[0].hasFieldmap).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasGeoJSON\", function () {",
											"  pm.expect(jsonData[0].hasGeoJSON).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldLayout\", function () {",
											"  pm.expect(jsonData[0].hasFieldLayout).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasExperimentalDesign\", function () {",
											"  pm.expect(jsonData[0].hasExperimentalDesign).to.eql(true);   ",
											"});",
											"",
											"pm.test(\"Check hasMeasurements\", function () {",
											"  pm.expect(jsonData[0].hasMeasurements).to.eql(true);   ",
											"});",
											"",
											"pm.test(\"Check canBeDeleted\", function () {",
											"  pm.expect(jsonData[0].canBeDeleted).to.eql(false);   ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6d94421e-e66f-4982-8256-c6b49ba26990",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances"
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc19d2f9-5080-4832-84dc-ecbcaeceadc2",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32c5136f-7697-4452-bd78-993b2ee8fd17",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/instances/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"instances",
										""
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/generation",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d66fb69-cc8c-4727-b6dc-690c9d98453f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.unset(\"newInstanceDbId\");",
											"pm.environment.set(\"newInstanceDbId\", jsonData[0].instanceId);",
											"pm.environment.unset(\"newInstanceNumber\");",
											"pm.environment.set(\"newInstanceNumber\", jsonData[0].instanceNumber);",
											"",
											"pm.test(\"Check locationName\", function () {",
											"  pm.expect(jsonData[0].locationName).to.eql(\"Unspecified Location\");   ",
											"});",
											"",
											"pm.test(\"Check locationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].locationAbbreviation).to.eql(\"NOLOC\");   ",
											"});",
											"",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].customLocationAbbreviation).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldmap\", function () {",
											"  pm.expect(jsonData[0].hasFieldmap).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasGeoJSON\", function () {",
											"  pm.expect(jsonData[0].hasGeoJSON).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldLayout\", function () {",
											"  pm.expect(jsonData[0].hasFieldLayout).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check hasExperimentalDesign\", function () {",
											"  pm.expect(jsonData[0].hasExperimentalDesign).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasMeasurements\", function () {",
											"  pm.expect(jsonData[0].hasMeasurements).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check canBeDeleted\", function () {",
											"  pm.expect(jsonData[0].canBeDeleted).to.eql(true);   ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c82c9ef2-f3dd-41b9-9a8c-350a2db8f2ea",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances/generation?numberOfInstancesToGenerate=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances",
										"generation"
									],
									"query": [
										{
											"key": "numberOfInstancesToGenerate",
											"value": "1"
										}
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when passed non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c8db96b-4520-4d83-b9c4-60a4d4541002",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "26ab0096-8b1d-4f51-903d-b16fde10f1c0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/instances/generation?numberOfInstancesToGenerate=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"instances",
										"generation"
									],
									"query": [
										{
											"key": "numberOfInstancesToGenerate",
											"value": "1"
										}
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when passed another datasetId to studyId field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33aa2924-ee20-4c99-9538-9f83dcbc3bf0",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "10981efa-ef2c-4c37-a467-5ef5abd3a953",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{study_env_id}}/instances/generation?numberOfInstancesToGenerate=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{study_env_id}}",
										"instances",
										"generation"
									],
									"query": [
										{
											"key": "numberOfInstancesToGenerate",
											"value": "1"
										}
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35b6839a-a1bc-436c-89f4-e8b4f7d684ca",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check instanceId\", function () {",
											"  pm.expect(jsonData.instanceId).to.eql(pm.environment.get(\"newInstanceDbId\"));   ",
											"});",
											"",
											"pm.test(\"Check locationName\", function () {",
											"  pm.expect(jsonData.locationName).to.eql(\"Unspecified Location\");   ",
											"});",
											"",
											"pm.test(\"Check locationAbbreviation\", function () {",
											"  pm.expect(jsonData.locationAbbreviation).to.eql(\"NOLOC\");   ",
											"});",
											"",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData.customLocationAbbreviation).to.eql(null);   ",
											"});",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData.customLocationAbbreviation).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check instanceNumber\", function () {",
											"  pm.expect(jsonData.instanceNumber).to.eql(pm.environment.get(\"newInstanceNumber\"));   ",
											"});",
											"",
											"pm.test(\"Check hasFieldmap\", function () {",
											"  pm.expect(jsonData.hasFieldmap).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasGeoJSON\", function () {",
											"  pm.expect(jsonData.hasGeoJSON).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldLayout\", function () {",
											"  pm.expect(jsonData.hasFieldLayout).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasExperimentalDesign\", function () {",
											"  pm.expect(jsonData.hasExperimentalDesign).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasMeasurements\", function () {",
											"  pm.expect(jsonData.hasMeasurements).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check canBeDeleted\", function () {",
											"  pm.expect(jsonData.canBeDeleted).to.eql(true);   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53045720-1b13-4706-b181-4ec5207e1109",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances/{{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances",
										"{{newInstanceDbId}}"
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70beee6b-d946-4a61-a932-c8a849e3b78d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d76795ef-588e-463c-9335-7ad59a515da7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/instances/{{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"instances",
										"{{newInstanceDbId}}"
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing instanceDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b8f291a-7ffe-473a-890f-248708c16503",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Specified instance(s) does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d29f9451-79c5-4852-9fe9-9b4e97266485",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances/{{nonExistingInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances",
										"{{nonExistingInstanceDbId}}"
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3461c5ee-990f-4a85-99de-b08919c638a1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d200ead-9c40-4bc8-be71-3af451fdeedc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances?instanceIds={{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances"
									],
									"query": [
										{
											"key": "instanceIds",
											"value": "{{newInstanceDbId}}"
										}
									]
								},
								"description": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8219719b-becb-4b15-9668-ed7d36c7ecf0",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "77abbab2-1de6-44e1-9ffb-8b35a5934206",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/instances?instanceIds={{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"instances"
									],
									"query": [
										{
											"key": "instanceIds",
											"value": "{{newInstanceDbId}}"
										}
									]
								},
								"description": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing instanceDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0742a7d7-b98a-4fa2-91c4-f05e7ecf89eb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Specified instance(s) does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4ecca4-cbe2-4161-8783-6d62353ca316",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances?instanceIds={{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances"
									],
									"query": [
										{
											"key": "instanceIds",
											"value": "{{newInstanceDbId}}"
										}
									]
								},
								"description": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when tried instance with restrictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6eee2987-fad0-48c8-bebb-61707a12c048",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Instance(s) cannot be deleted due to internal validations (samples, sub-observations, inventory transactions associated with the environment or advance/cross list associated with study).\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2aeb6602-0a07-446c-9d63-f4dc19ad83da",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances?instanceIds=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances"
									],
									"query": [
										{
											"key": "instanceIds",
											"value": "1"
										}
									]
								},
								"description": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "derived-variable-resource",
			"item": [
				{
					"name": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a51f1082-81c6-4368-8b2c-f3070b04c915",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f272fdce-017c-4f21-816c-820e14b7fc98",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check mapped studyId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var inputVariableId = pm.environment.get(\"inputVariable_cvterm_id\")",
											"    pm.expect(jsonData[inputVariableId].datasets[0].id).to.eql(3011);",
											"});",
											"pm.test(\"Check mapped study name\", function() {",
											"    var jsonData = pm.response.json();",
											"    var inputVariableId = pm.environment.get(\"inputVariable_cvterm_id\")",
											"    pm.expect(jsonData[inputVariableId].datasets[0].name).to.eql(\"Study with Imported Cross Nursery 2018002-PLOTDATA\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_biomass_cvterm_id}}/formula-variables/dataset-map",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_biomass_cvterm_id}}",
										"formula-variables",
										"dataset-map"
									]
								},
								"description": "GET​ /crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d6a4f2f-a6b8-4025-a35d-e82ea29c6053",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "295e47d8-40b9-4169-912b-6d7c7a969918",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_biomass_cvterm_id}}/formula-variables/dataset-map",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_biomass_cvterm_id}}",
										"formula-variables",
										"dataset-map"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8ec4ff8d-3085-4676-8260-fb744eba456e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7378bb2d-b45a-4f78-a68c-5b5012a8af74",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check mapped studyId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var inputVariableId = pm.environment.get(\"inputVariable_cvterm_id\")",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+ pm.environment.get(\"study_plot_datasetId\")+ \" does not belong to the study \" + pm.environment.get(\"trialStudyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets/{{study_plot_datasetId}}/derived-variables/18010/formula-variables/dataset-map",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"18010",
										"formula-variables",
										"dataset-map"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c4eec0dc-d597-40d8-8fa2-48b746ca6617",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "705e6ada-6c3e-412f-b068-5a47f323d605",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check mapped studyId\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_study_id}}/derived-variables/{{study_biomass_cvterm_id}}/formula-variables/dataset-map",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_study_id}}",
										"derived-variables",
										"{{study_biomass_cvterm_id}}",
										"formula-variables",
										"dataset-map"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0483e115-a12c-41a4-bd02-247056194067",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5b9141d7-89d9-4c0a-99e2-6257690da477",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check missing variableId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var grainSizeId = Number(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(jsonData[0].id).to.eql(grainSizeId);",
											"});",
											"pm.test(\"Check missing variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"Grain_size\");",
											"});",
											"pm.test(\"Check target termId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var targetTermId = Number(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(jsonData[0].targetTermId).to.eql(targetTermId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_grainYield_cvterm_id}}/formula-variables/missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_grainYield_cvterm_id}}",
										"formula-variables",
										"missing"
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c508a6c7-0fe5-4784-bed7-f0b029f395a8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7177649d-7d57-4b91-9fc1-c77817d73bd3",
										"exec": [
											"pm.test(\"Status code is 44\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_grainYield_cvterm_id}}/formula-variables/missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_grainYield_cvterm_id}}",
										"formula-variables",
										"missing"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c4dd48ac-5500-4676-a9ec-4d90762b5018",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f8e276b6-05d2-4e0a-9168-c21533a624a3",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check mapped studyId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var inputVariableId = pm.environment.get(\"inputVariable_cvterm_id\")",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+ pm.environment.get(\"study_plot_datasetId\")+ \" does not belong to the study \" + pm.environment.get(\"trialStudyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_grainYield_cvterm_id}}/formula-variables/missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_grainYield_cvterm_id}}",
										"formula-variables",
										"missing"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a7118c6b-614c-443c-a81c-431fdaaa0789",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "97784754-1f98-4edb-a63b-4d5dec4cfb70",
										"exec": [
											"pm.test(\"Status code is 44\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_study_id}}/derived-variables/{{study_grainYield_cvterm_id}}/formula-variables/missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_study_id}}",
										"derived-variables",
										"{{study_grainYield_cvterm_id}}",
										"formula-variables",
										"missing"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HEAD ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/derived-variables",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f08683d4-567d-436a-9103-f0ed315f4283",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ea167779-0e5f-4645-9171-ab7174f2456e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"2\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/derived-variables?datasetIds={{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"derived-variables"
									],
									"query": [
										{
											"key": "datasetIds",
											"value": "{{study_plot_datasetId}}"
										}
									]
								},
								"description": "HEAD /crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/derived-variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a03917c1-6636-4a58-9c0a-5cf93fdb49a0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2a7c6b0f-4ca6-4870-a39d-5891c75a00ce",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/derived-variables?datasetIds={{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"derived-variables"
									],
									"query": [
										{
											"key": "datasetIds",
											"value": "{{study_plot_datasetId}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/derived-variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61c9c510-d1e9-41a3-b1b7-4bec988edf23",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d541ed42-8c60-4bd9-b131-c1ec155116f7",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/derived-variables?datasetIds={{non_existing_study_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"derived-variables"
									],
									"query": [
										{
											"key": "datasetIds",
											"value": "{{non_existing_study_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/derived-variables"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "experimental-design-type-resource",
			"item": [
				{
					"name": "GET ​/crops​/{crop}​/experimental-design-types",
					"item": [
						{
							"name": "Verify if all experimental design types are returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bda9d246-ad15-4e71-94c1-97f3b1aeb769",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check id value for each design\", function () {",
											"  var id = [0, 1, 2, 4, 3, 5];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].id).to.eql(id[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check name value for each design\", function () {",
											"  var name = [\"Randomized Complete Block Design\", \"Resolvable Incomplete Block Design\", \"Row-and-Column\", \"Augmented Randomized Block design\", \"Custom Import Design\", \"Entry list order\", \"P-Rep Design\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].name).to.eql(name[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check termId value for each design\", function () {",
											"  var termId = [10110,10130,10145,10160,10168,10169,10164];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].termId).to.eql(termId[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check termIdLatinized value for each design\", function () {",
											"  var termIdLatinized = [0,10166,10167,0,0,0,0];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].termIdLatinized).to.eql(termIdLatinized[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check params value for each design\", function () {",
											"  var params = [\"randomizedCompleteBlockParams.html\",\"incompleteBlockParams.html\",\"rowAndColumnParams.html\",\"augmentedRandomizedBlockParams.html\",null,\"entryListOrderParams.html\",\"pRepParams.html\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].params).to.eql(params[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check repNo value for each design\", function () {",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].repNo).to.eql(0);",
											"    }",
											"});",
											"",
											"pm.test(\"Check totalNoOfEntries value for each design\", function () {",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].totalNoOfEntries).to.eql(0);",
											"    }",
											"});",
											"pm.test(\"Check templateName value for each design\", function () {",
											"  var templateName = [\"Randomized Complete Block Design.csv\",\"Resolvable Incomplete Block Design.csv\",\"Row-and-Column.csv\",\"Augmented Randomized Block design.csv\",\"Custom Import Design.csv\",\"Entry list order.csv\",\"P-Rep Design.csv\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].templateName).to.eql(templateName[i]);",
											"    }",
											"});",
											"pm.test(\"Check bvName value for each design\", function () {",
											"  var bvName = [\"Randomized block design\",\"Resolvable incomplete block design\",\"Resolvable row-column design\",\"Incomplete block design\",\"\",\"\",\"P-rep design\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].bvName).to.eql(bvName[i]);",
											"    }",
											"});",
											"pm.test(\"Check bvDesignName value for each design\", function () {",
											"  var bvDesignName = [\"RandomizedBlock\",\"ResolvableIncompleteBlock\",\"ResolvableRowColumn\",\"Augmented\",\"\",\"\",\"Prep\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].bvDesignName).to.eql(bvDesignName[i]);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c399c3ee-cdc4-404d-b60a-f7f1cc2d21c1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/experimental-design-types?programUUID={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"experimental-design-types"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										}
									]
								},
								"description": "GET /crops​/{crop}​/experimental-design-types"
							},
							"response": []
						},
						{
							"name": "Verify if all experimental design types are returned without programUUID input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ab3a670-5a16-4213-8113-7a15cfd94b01",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check id value for each design\", function () {",
											"  var id = [0, 1, 2, 4, 3, 5];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].id).to.eql(id[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check name value for each design\", function () {",
											"  var name = [\"Randomized Complete Block Design\", \"Resolvable Incomplete Block Design\", \"Row-and-Column\", \"Augmented Randomized Block design\", \"Custom Import Design\", \"Entry list order\", \"P-Rep Design\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].name).to.eql(name[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check termId value for each design\", function () {",
											"  var termId = [10110,10130,10145,10160,10168,10169,10164];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].termId).to.eql(termId[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check termIdLatinized value for each design\", function () {",
											"  var termIdLatinized = [0,10166,10167,0,0,0,0];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].termIdLatinized).to.eql(termIdLatinized[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check params value for each design\", function () {",
											"  var params = [\"randomizedCompleteBlockParams.html\",\"incompleteBlockParams.html\",\"rowAndColumnParams.html\",\"augmentedRandomizedBlockParams.html\",null,\"entryListOrderParams.html\",\"pRepParams.html\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].params).to.eql(params[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check repNo value for each design\", function () {",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].repNo).to.eql(0);",
											"    }",
											"});",
											"",
											"pm.test(\"Check totalNoOfEntries value for each design\", function () {",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].totalNoOfEntries).to.eql(0);",
											"    }",
											"});",
											"pm.test(\"Check templateName value for each design\", function () {",
											"  var templateName = [\"Randomized Complete Block Design.csv\",\"Resolvable Incomplete Block Design.csv\",\"Row-and-Column.csv\",\"Augmented Randomized Block design.csv\",\"Custom Import Design.csv\",\"Entry list order.csv\",\"P-Rep Design.csv\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].templateName).to.eql(templateName[i]);",
											"    }",
											"});",
											"pm.test(\"Check bvName value for each design\", function () {",
											"  var bvName = [\"Randomized block design\",\"Resolvable incomplete block design\",\"Resolvable row-column design\",\"Incomplete block design\",\"\",\"\",\"P-rep design\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].bvName).to.eql(bvName[i]);",
											"    }",
											"});",
											"pm.test(\"Check bvDesignName value for each design\", function () {",
											"  var bvDesignName = [\"RandomizedBlock\",\"ResolvableIncompleteBlock\",\"ResolvableRowColumn\",\"Augmented\",\"\",\"\",\"Prep\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].bvDesignName).to.eql(bvDesignName[i]);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18df39a1-d776-455d-8fe6-1a62307c5b1e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/experimental-design-types",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"experimental-design-types"
									]
								},
								"description": "GET /crops​/{crop}​/experimental-design-types"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "experimental-design-resource",
			"item": [
				{
					"name": "Generate RCBD design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "585ac94e-a43c-4562-a82a-c40f4b26dd9a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d47cfa0a-d2d0-41c5-98dd-77edf92fe398",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 0,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 10001,\n\t\t\t\"locationId\": 33,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c27ce5b-ca43-4ee2-a8ca-553a1d1ce95d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "212106cc-6e15-4060-ba9c-2d8e6b42492f",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate RIBD design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8666a1f-2d0f-4b30-be0a-e2dcff127557",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a9045687-8a7c-40e1-86d8-d5b5919a624f",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": 2,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 1,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 10001,\n\t\t\t\"locationId\": 33,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e348e36c-6ff2-4279-adb4-5eb24879c9a9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5297b9f-e5ad-4751-bd08-19dc8b5bf9e9",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate RIBD Latinized design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac557f47-f5f3-48fa-ba35-831c12fa418d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4c4a0602-9e08-47e7-8cae-49617de3717f",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": 2,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 1,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": \"2\",\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": \"1\",\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7052d142-441a-4062-8632-cf5fc2ff6770",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "89f52adb-f672-4ae7-ae4a-ebd3455c0160",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Row and Col Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9a054a5-44c6-45da-9b42-9e5bc4509eb9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "30d6edd8-1809-45c5-893f-a7ea0caaee49",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": 5,\n\t\"designType\": 2,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": 9012\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": 4,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83c22e72-c856-45a8-b248-2fadc72acd16",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29d2b43b-5d86-42a0-9a42-cd9107ecd2a0",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Row and Col Latinized Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c45e3c3-c23a-432f-bd7b-9ded5d6c122f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b2c02d15-8a72-4b3e-b053-1146cf5e84e4",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": 5,\n\t\"designType\": 2,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": \"2\",\n\t\"nrlatin\": \"2\",\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": \"2\",\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": \"3\",\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": 4,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e70caf26-8894-43ba-a67b-6d4c13cb2d4b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1f064121-a7f5-4b19-a957-6d350bc7fbd1",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Augmented Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dde62bcf-f4f8-4e06-8f4d-f2e70d41680e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3a915123-d302-44ae-bb2e-b813549567d2",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 4,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": 2,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": null,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe996cae-6bc9-4bca-8e98-638e56d9cfd1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "17ba58d0-751d-4286-9175-86160cea6e4e",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Entry List Order Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f4e1bfa-fa8f-42e5-8dd9-7e4a3629f0ee",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c3dcac7e-3ea5-48eb-8968-7e110c2a7902",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": 5,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 5,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": null,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d39d26dc-3c1d-4497-8b51-e282d32dc2ea",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8a6b6ffb-43a5-4d33-a6ee-fb545ffc4281",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Prep Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd2f13ad-f4ff-436f-aa2f-ee8194b8e43f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "78209028-5531-441c-a23a-aa7840276ec6",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": 2,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 6,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": 40,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": 3,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e054acd-470d-4cf7-bedb-a897b26387dd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "26603536-e10a-4b6f-b3fa-f304f4322ddb",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design on a study with no design yet",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c19e33a4-5736-452d-bce3-9a371115afa0",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"The study has no experiment design yet.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c97d06a9-fac9-4afd-b892-15ac1d269599",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design on a study with restrictions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22577daa-4ccc-4404-81b6-ea01b3073d8b",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"Instance(s) cannot be deleted due to internal validations (samples, sub-observations, inventory transactions associated with the environment or advance/cross list associated with study).\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b86565f5-5b34-423f-a753-924606bf8d4a",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyId}}",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "sample-resource",
			"item": [
				{
					"name": "GET /crops​/{crop}​/programs​/{programUUID}​/samples",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs to all fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "589562d3-dd98-4ddf-b155-ce15c1871f10",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2d5407a5-8bc1-4cde-ac14-a803a8043568",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].sampleId).to.eql(1);",
											"    pm.expect(jsonData[0].sampleNumber).to.eql(1);",
											"    pm.expect(jsonData[0].entryNo).to.eql(1);",
											"    pm.expect(jsonData[0].gid).to.eql(21);",
											"    pm.expect(jsonData[0].designation).to.eql(\"GP1\");",
											"    pm.expect(jsonData[0].sampleName).to.eql(\"ACCNO1:1\");",
											"    pm.expect(jsonData[0].sampleBusinessKey).to.eql(pm.environment.get(\"study_sampleId\"));",
											"    pm.expect(jsonData[0].takenBy).to.eql(\"Admin Admin\");",
											"    pm.expect(jsonData[0].sampleList).to.eql(\"Sample List 002\");",
											"    pm.expect(jsonData[0].datasetType).to.eql(\"PLOT\");",
											"    pm.expect(jsonData[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    pm.expect(jsonData[0].studyId).to.eql(3009);",
											"    pm.expect(jsonData[0].enumerator).to.eql(\"1\");",
											"    pm.expect(jsonData[0].observationUnitId).to.eql(pm.environment.get(\"study_obs_unit_id\"));",
											"    pm.expect(jsonData[0].samplingDate).to.eql(\"26/10/2018\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples?obsUnitId={{study_obs_unit_id}}&listId={{sample_listId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									],
									"query": [
										{
											"key": "obsUnitId",
											"value": "{{study_obs_unit_id}}"
										},
										{
											"key": "listId",
											"value": "{{sample_listId}}"
										}
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered only crop name and programUUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7d7694b6-2886-48ae-b7aa-bd3e206592d9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "42afaeac-5fcd-4e9c-9f6f-862c90cb20bf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].sampleId).to.eql(1);",
											"    pm.expect(jsonData[0].sampleNumber).to.eql(1);",
											"    pm.expect(jsonData[0].entryNo).to.eql(1);",
											"    pm.expect(jsonData[0].gid).to.eql(21);",
											"    pm.expect(jsonData[0].designation).to.eql(\"GP1\");",
											"    pm.expect(jsonData[0].sampleName).to.eql(\"ACCNO1:1\");",
											"    pm.expect(jsonData[0].sampleBusinessKey).to.eql(pm.environment.get(\"study_sampleId\"));",
											"    pm.expect(jsonData[0].takenBy).to.eql(\"Admin Admin\");",
											"    pm.expect(jsonData[0].sampleList).to.eql(\"Sample List 002\");",
											"    pm.expect(jsonData[0].datasetType).to.eql(\"PLOT\");",
											"    pm.expect(jsonData[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    pm.expect(jsonData[0].studyId).to.eql(3009);",
											"    pm.expect(jsonData[0].enumerator).to.eql(\"1\");",
											"    pm.expect(jsonData[0].observationUnitId).to.eql(pm.environment.get(\"study_obs_unit_id\"));",
											"    pm.expect(jsonData[0].samplingDate).to.eql(\"26/10/2018\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid OBS_UNIT_ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cb011960-0dfd-476f-b5fd-3303605ce4d1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7144faf6-e996-48d0-a3c8-1a07bf0f37de",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].sampleId).to.eql(1);",
											"    pm.expect(jsonData[0].sampleNumber).to.eql(1);",
											"    pm.expect(jsonData[0].entryNo).to.eql(1);",
											"    pm.expect(jsonData[0].gid).to.eql(21);",
											"    pm.expect(jsonData[0].designation).to.eql(\"GP1\");",
											"    pm.expect(jsonData[0].sampleName).to.eql(\"ACCNO1:1\");",
											"    pm.expect(jsonData[0].sampleBusinessKey).to.eql(pm.environment.get(\"study_sampleId\"));",
											"    pm.expect(jsonData[0].takenBy).to.eql(\"Admin Admin\");",
											"    pm.expect(jsonData[0].sampleList).to.eql(\"Sample List 002\");",
											"    pm.expect(jsonData[0].datasetType).to.eql(\"PLOT\");",
											"    pm.expect(jsonData[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    pm.expect(jsonData[0].studyId).to.eql(3009);",
											"    pm.expect(jsonData[0].enumerator).to.eql(\"1\");",
											"    pm.expect(jsonData[0].observationUnitId).to.eql(pm.environment.get(\"study_obs_unit_id\"));",
											"    pm.expect(jsonData[0].samplingDate).to.eql(\"26/10/2018\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples?obsUnitId={{study_obs_unit_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									],
									"query": [
										{
											"key": "obsUnitId",
											"value": "{{study_obs_unit_id}}"
										}
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid OBS_UNIT_ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e3c65ab6-6768-4af3-a553-8ae488df03e4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dd6994fc-e522-4f2e-9d98-7493f087d439",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].sampleId).to.eql(1);",
											"    pm.expect(jsonData[0].sampleNumber).to.eql(1);",
											"    pm.expect(jsonData[0].entryNo).to.eql(1);",
											"    pm.expect(jsonData[0].gid).to.eql(21);",
											"    pm.expect(jsonData[0].designation).to.eql(\"GP1\");",
											"    pm.expect(jsonData[0].sampleName).to.eql(\"ACCNO1:1\");",
											"    pm.expect(jsonData[0].sampleBusinessKey).to.eql(pm.environment.get(\"study_sampleId\"));",
											"    pm.expect(jsonData[0].takenBy).to.eql(\"Admin Admin\");",
											"    pm.expect(jsonData[0].sampleList).to.eql(\"Sample List 002\");",
											"    pm.expect(jsonData[0].datasetType).to.eql(\"PLOT\");",
											"    pm.expect(jsonData[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    pm.expect(jsonData[0].studyId).to.eql(3009);",
											"    pm.expect(jsonData[0].enumerator).to.eql(\"1\");",
											"    pm.expect(jsonData[0].observationUnitId).to.eql(pm.environment.get(\"study_obs_unit_id\"));",
											"    pm.expect(jsonData[0].samplingDate).to.eql(\"26/10/2018\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples?obsUnitId=PKWDPtLOzD8Szx",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									],
									"query": [
										{
											"key": "obsUnitId",
											"value": "PKWDPtLOzD8Szx"
										}
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						},
						{
							"name": "Verify response code body when entered string input on listID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "259635bb-7620-4e2f-b53f-9e62135e586a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d99b6c9d-6898-4929-8a29-a93e08883fda",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples?listId={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									],
									"query": [
										{
											"key": "listId",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs to all fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0107f670-2a26-40d3-9f4d-63c7b0a5a2fc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be35d365-1fb2-4bf9-ba31-15ddb8aa63d8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"  var jsonData = pm.response.json();",
											"    pm.environment.unset(\"new_sample_folder_id\");",
											"    pm.environment.set(\"new_sample_folder_id\", jsonData.id);",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders?folderName={{new_sample_folder_name}}&parentId=0",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders"
									],
									"query": [
										{
											"key": "folderName",
											"value": "{{new_sample_folder_name}}"
										},
										{
											"key": "parentId",
											"value": "0"
										}
									]
								},
								"description": "POST​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered name of an already existing folder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fb1be74a-c7f9-4a5f-b759-660bdf0e7039",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c3c571e-abba-4787-a1d0-9baebaecbd25",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Folder name should be unique within the same directory\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders?folderName={{new_sample_folder_name}}&parentId=0",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders"
									],
									"query": [
										{
											"key": "folderName",
											"value": "{{new_sample_folder_name}}"
										},
										{
											"key": "parentId",
											"value": "0"
										}
									]
								},
								"description": "POST​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing parent ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f277c16e-2096-4307-8147-797315ea4653",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d78929f-e6dd-479f-850a-413e937d1752",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Parent Folder does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders?folderName={{new_sample_folder_name}}&parentId=99999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders"
									],
									"query": [
										{
											"key": "folderName",
											"value": "{{new_sample_folder_name}}"
										},
										{
											"key": "parentId",
											"value": "99999"
										}
									]
								},
								"description": "POST​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to parent ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "544e6a88-7d82-4a6f-b1b0-638942485c37",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "841d887f-2032-4835-b0af-1b0b31926933",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders?folderName={{new_sample_folder_name}}&parentId={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders"
									],
									"query": [
										{
											"key": "folderName",
											"value": "{{new_sample_folder_name}}"
										},
										{
											"key": "parentId",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "POST​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT​ /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid newFolderName and folderId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a66c3390-fd64-483a-9c78-d879e68d0a5c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "64ece9f2-0eeb-4366-8e52-2a777e6710a4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"new_sample_folder_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered name of an already existing folder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61a8e4d2-31dd-43fc-9b0c-0a51a5024d59",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cb4dd06c-7965-4e60-ab73-879c8f622fbf",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Folder name should be unique within the same directory\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing folderId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ebd339a0-5250-4cc7-a77c-827a79d37aeb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "06620c15-08f0-44b4-b86f-fd866438962b",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Folder does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/99999?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"99999"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered root folder id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d8e8b57-1c2a-43ce-9667-fa016bf0f079",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "91a7f677-b275-48cc-9a0a-b182a4f57e7e",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Root folder name is not editable\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/1?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"1"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to folderId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a38b98c7-1116-406a-aeb2-b055566d7cd3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ddb243f1-0d87-4436-bd58-0d31ac5087a3",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{string_input}}?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{string_input}}"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move",
					"item": [
						{
							"name": "Move a sample folder to another folder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3597622e-9861-4e97-99b4-e95585575875",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ad92194b-bcbb-45e9-8635-bbc6ba449221",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.parentId).to.eql(pm.environment.get(\"sample_folder_id_with_content\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}/move?newParentId={{sample_folder_id_with_content}}&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "{{sample_folder_id_with_content}}"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing folderId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76ba12ad-baf3-4649-a298-0f9168fd1600",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f26eb534-67eb-4bea-b7cc-89cf56ce65c6",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"sampleList does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/99999/move?newParentId={{sample_folder_id_with_content}}&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"99999",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "{{sample_folder_id_with_content}}"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing parent ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "236d38a5-225e-4ea7-bdde-5841abc14075",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "187f62a3-3360-4523-9b17-f5a8ceab45ed",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified newParentFolderId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}/move?newParentId=99999&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "99999"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to parentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c5e700d5-cc70-406c-a963-079f70e7ad32",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9de5f87-e2e1-4994-80e1-a7bb7ef2af6f",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}/move?newParentId={{string_input}}&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "{{string_input}}"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						},
						{
							"name": "Move the sample parent folder into its own child",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8118ddd3-250a-46e3-a293-f077dfec62e3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cb1d978b-be8f-4fc1-a35e-02da66290278",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"You can not move list because are relatives with parent folder\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{sample_folder_id_with_content}}/move?newParentId={{new_sample_folder_id}}&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{sample_folder_id_with_content}}",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "{{new_sample_folder_id}}"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs to all fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "92f0dc39-1e54-455d-bbe9-fb766d2dbe70",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "59b036dd-dfdb-462f-907f-008bac2e3163",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}"
									]
								},
								"description": "DELETE​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Delete a sample folder with existing contents",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8f7db36e-22a5-45d6-b1ef-ccbe6f769eec",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f19b4dc7-4492-485d-ad83-78ca2d62727d",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Folder has children and cannot be deleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{sample_folder_id_with_content}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{sample_folder_id_with_content}}"
									]
								},
								"description": "DELETE​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{crop}​/sample-lists​/search",
					"item": [
						{
							"name": "Verify response code and body when entered valid searchString and exactMatch is false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "44513690-4184-481e-afb4-6eafb1a48560",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "19bf7fe6-291a-4438-96ee-5e24bb2728b9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].listName).to.eql(\"Sample List 002\");",
											"    //pm.expect(jsonData[1].listName).to.eql(\"Sample List 003\");",
											"    //pm.expect(jsonData[2].listName).to.eql(\"Sample List 004\");",
											"    //pm.expect(jsonData[3].listName).to.eql(\"Sample List 005\");",
											"    //pm.expect(jsonData[4].listName).to.eql(\"Sample List 006\");",
											"    //pm.expect(jsonData[5].listName).to.eql(\"Sample List 007\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/sample-lists/search?programUUID={{api_program_id}}&exactMatch=false&searchString={{search_string_not_exact}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"sample-lists",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										},
										{
											"key": "exactMatch",
											"value": "false"
										},
										{
											"key": "searchString",
											"value": "{{search_string_not_exact}}"
										}
									]
								},
								"description": "GET ​/crops​/{crop}​/sample-lists​/search"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid searchString and exactMatch is true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d02e6a90-0c68-45b6-8575-b4da1af99761",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e02d21bf-1ac4-49a6-a22b-3c4074a62d10",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].listName).to.eql(\"Sample List 002\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/sample-lists/search?programUUID={{api_program_id}}&searchString={{search_string_exact}}&exactMatch=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"sample-lists",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										},
										{
											"key": "searchString",
											"value": "{{search_string_exact}}"
										},
										{
											"key": "exactMatch",
											"value": "false"
										}
									]
								},
								"description": "GET ​/crops​/{crop}​/sample-lists​/search"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "dataset-resource",
			"item": [
				{
					"name": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/instances",
					"item": [
						{
							"name": "Verify response code and body when entered valid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03077cf3-4ed2-43ad-911a-5bea9eea163c",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"//    pm.environment.unset(\"study_instanceId\");",
											"//    pm.environment.set(\"study_instanceId\", jsonData[0].instanceDbId);",
											" ",
											"pm.test(\"Check locationName\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											"pm.test(\"Check locationAbbreviation\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].locationAbbreviation).to.eql(\"WARDA\");",
											"});",
											"pm.test(\"Check instanceNumber\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].instanceNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1d1c1472-282a-4102-abd3-760d79df9326",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14532bb9-9b2c-4d2b-99ae-3da9af2ff5bd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/instances\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "435a2139-be6d-49c9-8817-92fa0392a6e5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83319ef4-8057-4fb9-8623-41ca1f259198",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/testdata/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/instances\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0155a9a-7eb5-4c34-a557-eada5d085d4a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b4bf906-dacc-40d6-8942-17f99dfd8ef8",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e55da5a-a67f-40a7-8525-14d171fb1499",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}//programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f32089f1-f284-4132-a83c-3813b58c0fa1",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56def26f-5b1d-46de-b3e5-c62a8572fad3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that is not associated to the studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfd64686-9811-4111-8ade-7555d6e0d112",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+ pm.environment.get(\"locked_study_subobs_datasetId\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "566fd644-33cd-4f15-a400-d2edff7909eb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{locked_study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{locked_study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3aa3968a-bd10-4418-8bf6-034d31264470",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41b08b90-ab88-429b-bb53-ada69b0e3067",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "384dc53d-2a34-41e7-8a76-84b81acfb46d",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e97b90c7-5e37-4199-a9f0-22ebbebba96b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{crop}/programs​/{programUUID}​/studies/{studyId}/datasets",
					"item": [
						{
							"name": "Verify response code and body when entered crop and studyId only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f6ebb1b-18f9-487e-a754-088a28edca2a",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check env dataset id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.equal(parseInt(pm.environment.get(\"study_env_id\")));",
											"});",
											"pm.test(\"Check env plot dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[1].datasetId).to.eql(parseInt(pm.environment.get(\"study_plot_datasetId\")));",
											"});",
											"pm.test(\"Check subobs dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[2].datasetId).to.eql(parseInt(pm.environment.get(\"study_subobs_datasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3531a4c-0796-46e5-a7a3-dcd02e7b4bc5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2ee4805-2338-4d8d-931f-fe595875d6ae",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5410d899-cd79-41b3-8b59-8db75d08de8b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "502bee78-2be4-40e6-9b7b-0b6e6aa3a54f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "11534c7e-de6d-4055-b98e-f13569c2658b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7112de16-fdf9-4fd7-83a0-88144a3fab2c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "16d5098f-9a3a-467c-904d-648a49713f95",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered multiple datasetTypeIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f41a2a11-1524-4719-a586-05155c1301d1",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check env dataset id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.equal(parseInt(pm.environment.get(\"study_env_id\")));",
											"});",
											"pm.test(\"Check env plot dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[1].datasetId).to.eql(parseInt(pm.environment.get(\"study_plot_datasetId\")));",
											"});",
											"pm.test(\"Check subobs dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[2].datasetId).to.eql(parseInt(pm.environment.get(\"study_subobs_datasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c45ec450-9778-4970-afdc-13f4e35d9ee8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{env_datasetTypeId}}, {{plot_datasetTypeId}},{{plant_subobs_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{env_datasetTypeId}}, {{plot_datasetTypeId}},{{plant_subobs_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered environment datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f28dc52e-a840-4589-8299-01ebb4b8f78e",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check env dataset id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.equal(parseInt(pm.environment.get(\"study_env_id\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "df0ba6e8-6ccc-416c-8221-7f96888c00a2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{env_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{env_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered plot datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e69bb6bb-d84f-4dfb-9d04-364c88ca843a",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check env plot dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.eql(parseInt(pm.environment.get(\"study_plot_datasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9cbe88ed-c857-4071-be6d-edcf2220ee9c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{plot_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{plot_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered means datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "025d1ed5-5272-4a7c-a613-f24fdff7eefc",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check means dataset id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.equal(parseInt(pm.environment.get(\"trialMeansDatasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5c4402b-01d4-487b-b3fa-a3122ead7bac",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets?datasetTypeIds={{means_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{means_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered subobs datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd9ef83c-9d9e-4604-a84b-ae088dfd6261",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check subobs dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.eql(parseInt(pm.environment.get(\"study_subobs_datasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd1e9c2e-9837-41e3-ad3b-fe7c51ec0d70",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{plant_subobs_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{plant_subobs_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11a63f5c-57d3-4c4a-83dd-3a4020b14e94",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3ffdc2f9-e98a-4148-9bdf-655f9839a7cf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdf584f5-6fba-471d-9a2f-c03fe5647e51",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3316556c-b8ef-4a39-a75f-f8d2372cbef3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid  datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08205c61-1a48-4aa9-9d96-b27346821fe8",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"//Add other assertions here",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"9,999 is not a valid dataset type\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7204a7e0-bc18-48c3-9dac-fde2ebb649c4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{non_existing_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{non_existing_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET/{crop}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}",
					"item": [
						{
							"name": "Verify response code and body when entered of environment datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69159e00-52ca-4257-af01-d49da62b4654",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.studyId).to.eql(studyId);",
											"});",
											"pm.test(\"Verify returned datasetId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var datasetId = Number(pm.environment.get(\"study_env_id\"));",
											"    pm.expect(jsonData.datasetId).to.eql(datasetId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d12cb631-0b31-418c-936d-865a5dcb3c2a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_env_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_env_id}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered of plot datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a4c9133-8f29-4fff-a2a3-9ee20af28aa3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.studyId).to.eql(studyId);",
											"});",
											"pm.test(\"Verify returned datasetId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var datasetId = Number(pm.environment.get(\"study_plot_datasetId\"));",
											"    pm.expect(jsonData.datasetId).to.eql(datasetId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cbbedadb-2626-4c08-8e7c-33ee8f3bb77c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered of sub-observation datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e42453f6-c414-4389-be94-e6e5da8c0fb9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.studyId).to.eql(studyId);",
											"});",
											"pm.test(\"Verify returned datasetId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var datasetId = Number(pm.environment.get(\"study_subobs_datasetId\"));",
											"    pm.expect(jsonData.datasetId).to.eql(datasetId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aeee22f9-132f-48ea-9084-ca3035a36a83",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered of means datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7290908-7b8b-4b72-b8dd-1c33f195a133",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Other assertions to follow"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aa9d97d2-f615-4e0f-a7b3-52aa01b6bf15",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets/{{trialMeansDatasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets",
										"{{trialMeansDatasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd3b910e-ce57-4442-9679-d8b3dbab4247",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cce3e5e0-028f-408d-85b7-f0e2d263b783",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cd6b57b-dfba-4d09-905c-63ff50e0bc9a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ec3e99cc-a9eb-4aa6-b15c-3b3ab0e0372d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90616c97-251a-42ae-a0cb-7d1ac4e4ac2f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af109134-c734-408e-921e-6a9843add194",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e900ff6b-e976-4b65-90d6-2a8c998b2ee1",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"//    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59ce1c85-bb9d-4aec-8922-e023d13af178",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c82651b5-c4ad-406c-8a34-8ff7a6de7118",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "700164c2-5de0-4760-b7c2-d685c17c2d6d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "932a5ec7-6244-430e-80f3-103c08a6a63b",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"//    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f79a63f-b0ad-44a0-8c1d-255a80e93d64",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_subobs_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_subobs_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22f10af2-658c-4951-9f4d-3cf280859164",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"//    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f898d0c0-9933-4979-8fdd-bf790c27cfd0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HEAD ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{instanceId}",
					"item": [
						{
							"name": "Retrieve phenotype counts for a plot dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c5c935a-d7d0-4e8e-9312-7c749d7cafe1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"80\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2bd90634-1de2-453a-8a59-cab4b5684601",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Retrieve phenotype counts for a subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97541b9e-4ad5-4c82-a196-cc8169e1ebab",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"80\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8c275393-439b-43de-a059-91c88bf1fb4c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and phenotype count for a dataset with no existing phenotypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9699ddc0-e70d-49f8-af99-c41df723176a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"0\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b21e5a7d-5409-4609-a8a4-b31b031f8053",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId_noPhenoCount}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observationUnits/{{study_noPheno_instandId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId_noPhenoCount}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observationUnits",
										"{{study_noPheno_instandId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Retrieve phenotype counts for a plot dataset with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb69a8ed-3e7e-466f-9228-4c72db3b7ae1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "05f05552-a634-4fa6-98a9-2e4f0b5c376c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Retrieve phenotype counts for a plot dataset with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "292e1d06-d98b-4997-8d3f-8e0c9f6e1d21",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "38cb0e75-1b17-442d-95a8-74c617c895c7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "224c31a3-8385-4c99-9415-e70e11634b7c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f1b403e-8f79-49dd-a126-af65c25ab847",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a0c9fe5-a6f7-4f38-9131-5fe9a7e2cff0",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4daef61-57bb-4065-b691-53b70a6d9859",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43b17fb5-5e87-4bb7-9c19-1e8dbf5db872",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "874d63d8-7f03-4e06-9047-f4f8820a08a2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered invalid studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36e353c9-e86e-4904-9417-0a00f2110a3a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6701f4ce-6aa4-4df1-a526-3d3e5673320a",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(",
											"            { ",
											"                \"username\": \"admin\",",
											"                \"password\": \"@dm1N\",",
											"                \"grant_type\": \"\",",
											"                \"client_id\": \"\"",
											"            ",
											"        })",
											"    }",
											"}, function (err, res) {",
											"    var jsonData = res.json();",
											"    pm.environment.set(\"masterToken\",jsonData.access_token);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{invalid_studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{invalid_studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered invalid datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "998ce181-c891-43b7-816d-80760a6a602a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0fd1c8ab-acdc-492d-a28d-fb22bc738324",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{studyId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{studyId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered invalid instanceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "531e5611-313d-4092-b93e-b6dada95b084",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "775de917-19b3-4604-b86c-b6ae1773c68c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{studyId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{studyId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6e00b83-b009-4771-86c0-465447ec2d6e",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "08a945ae-390a-4a2b-b090-be6a7ac0b4cd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d241cb03-a8dd-4526-bfdc-8f37cfd9b7da",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b2e2777-0e48-42ac-a661-0a71ba570a7b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered string input to instanceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02ef7073-7b48-434f-878c-81603912ebc6",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f8ac6dc-3c07-4602-85f2-a5d7f1bbf5ba",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{string_input}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET/crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns",
					"item": [
						{
							"name": "Verify response code and body when entered valid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d5f3120-f583-4b6b-b115-c179b8c8bdbd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check TRIAL INSTANCE term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].termId).to.equal(8170);",
											"    pm.expect(jsonData[0].name).to.equal(\"TRIAL_INSTANCE\");",
											"});",
											"",
											"pm.test(\"Check ENTRY TYPE term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[1].termId).to.equal(8255);",
											"    pm.expect(jsonData[1].name).to.equal(\"ENTRY_TYPE\");",
											"});",
											"",
											"pm.test(\"Check GID term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[2].termId).to.equal(8240);",
											"    pm.expect(jsonData[2].name).to.equal(\"GID\");",
											"});",
											"",
											"pm.test(\"Check DESIGNATION term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[3].termId).to.equal(8250);",
											"    pm.expect(jsonData[3].name).to.equal(\"DESIGNATION\");",
											"});",
											"",
											"pm.test(\"Check ENTRY_NO term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[4].termId).to.equal(8230);",
											"    pm.expect(jsonData[4].name).to.equal(\"ENTRY_NO\");",
											"});",
											"",
											"pm.test(\"Check OBS_UNIT_ID term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[5].termId).to.equal(8201);",
											"    pm.expect(jsonData[5].name).to.equal(\"OBS_UNIT_ID\");",
											"});",
											"",
											"",
											"pm.test(\"Check PLOT_NO term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[6].termId).to.equal(8200);",
											"    pm.expect(jsonData[6].name).to.equal(\"PLOT_NO\");",
											"});",
											"",
											"pm.test(\"Check PLANT_NO term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[7].termId).to.equal(8206);",
											"    pm.expect(jsonData[7].name).to.equal(\"PLANT_NO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e51f38ae-4130-4d37-888b-145e29f9eba2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49cd7125-ca26-4183-bc98-268e283e666d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/observationUnits/table/columns\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5caceda2-d469-465d-bf82-d3a41754b4a5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3342717a-761f-4ba9-a8e6-3806075401fa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/observationUnits/table/columns\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dfe56e4e-1387-49d8-acdf-239384added0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fa93d07-0758-4c33-a060-fc5080090add",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3336fe91-16bd-4857-93e9-9eb2518b1bd9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e9deb0-b3b3-4aa2-8e68-9a7f6e24b3f6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "812b5cfe-3fcd-42a3-bc78-6385df3f8b03",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that is not associated to the studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4df3631-7431-43e4-9338-ee9e8ed42b5f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+ pm.environment.get(\"locked_study_subobs_datasetId\")+ \" does not belong to the study \"+ pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7053835e-4535-4ade-af63-139a54fde015",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{locked_study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{locked_study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc479a6f-6884-4ef5-8095-3cef0dc34490",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "da1541c2-db8e-42e7-b666-6b6736dfac19",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbed919d-8d33-4efb-a221-b2bade262fcf",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0a571227-1368-47fe-ba25-9e82cde6ab69",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables​/{variableTypeId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs and trait variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0501c8df-362c-4f35-89d5-1e662b31e1ae",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(18100);",
											"    pm.expect(jsonData[1].id).to.equal(18000);",
											"    pm.expect(jsonData[2].id).to.equal(18010);",
											"});",
											"",
											"pm.test(\"Check returned variable names\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"WeedPressure_number\");",
											"    pm.expect(jsonData[1].name).to.equal(\"Grain_yield\");",
											"    pm.expect(jsonData[2].name).to.equal(\"Biomas_yield\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59c733e3-dcad-4caa-8ec6-73571f974106",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs and environment detail variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4dec88de-96b6-4229-acb9-3591bd419bc2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(8170);",
											"});",
											"",
											"pm.test(\"Check returned variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"TRIAL_INSTANCE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c512b17b-d3b4-4dae-8124-29c302dfd51c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{variableTypeId_env_detail}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{variableTypeId_env_detail}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs and experimental design variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24f385f3-0047-421a-8353-686ca338f804",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(8200);",
											"});",
											"",
											"pm.test(\"Check returned variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"PLOT_NO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d562ddb-4d54-4bcf-b721-1beb61683432",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{variableTypeId_exp_design}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{variableTypeId_exp_design}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs and germplasm descriptor variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b214340a-53f4-42c3-979b-0ce7ece1bae5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(8255);",
											"    pm.expect(jsonData[1].id).to.equal(8240);",
											"    pm.expect(jsonData[2].id).to.equal(8250);",
											"    pm.expect(jsonData[3].id).to.equal(8230);",
											"    pm.expect(jsonData[4].id).to.equal(8201);",
											"});",
											"",
											"pm.test(\"Check returned variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"ENTRY_TYPE\");",
											"    pm.expect(jsonData[1].name).to.equal(\"GID\");",
											"    pm.expect(jsonData[2].name).to.equal(\"DESIGNATION\");",
											"    pm.expect(jsonData[3].name).to.equal(\"ENTRY_NO\");",
											"    pm.expect(jsonData[4].name).to.equal(\"OBS_UNIT_ID\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c9c8f3ea-9aaf-4b74-b7ad-41cad87813a9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{variableTypeId_germ_desc}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{variableTypeId_germ_desc}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs and observation units variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "233af200-952b-4393-b22d-9c9f7bac5464",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(8206);",
											"});",
											"",
											"pm.test(\"Check returned variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"PLANT_NO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19fb3c2f-b19e-430f-a73c-2d974b2e48d3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables/{{variableTypeId_obs_unit}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables",
										"{{variableTypeId_obs_unit}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "562cb86c-2c77-4906-9e0e-3426fea7bfbb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/variables/\"+pm.environment.get(\"Trait_cvtermId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0b66327a-590e-4a52-97b3-3db43cd82508",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbc967a4-e4ae-4082-9a72-b2e9eb03d3bc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/variables/\"+pm.environment.get(\"Trait_cvtermId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "720f0607-f22b-4054-b953-419c83caee48",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84b8748c-1cab-495a-8491-3f874d300596",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8188ea3f-7744-4fe2-8bc2-b633d87f9675",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f7ea05c-62d7-4be4-a0f5-f5a6f6738d2c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3faee177-5633-49bb-85b6-c3249600d8ef",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d34ca325-68b7-4502-a828-66a06fbad83f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3fa79e1c-664b-4c0e-a42d-df4b2ffc07f5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3edafe37-fea0-4d39-afea-e76fc2915200",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad19173c-4414-488c-a510-ac15bfe94606",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5ea4fb0-2e92-4551-a547-77e908687715",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09c8ef70-7e44-4b2d-bf17-84609efb2df9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "941767bf-d739-4d60-9d8f-641b75207309",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15bb11ca-8851-49eb-b3f6-333655b18483",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{string_input}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HEAD ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables​/observations",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs and one variableId only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1a3105e-c8d4-41ee-91ff-3fc74429ac11",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"40\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5b2bdfd-cbd1-457e-867b-6d79f0f6fce1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45bffb4e-11c9-432e-b1bd-1edcf5971aa7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eb205820-84db-47e6-b772-07dc5c64fc9b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b770cd4a-8106-4ffb-be19-7d70b0bfc4b3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5c779d4-9836-42e4-b253-a2ca1447123c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify X-Total Count for study with no phenotypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08fc7e3e-a7cd-4bb1-8c55-0bb57c1c03a6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"0\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7f1ac16b-74d0-4804-a495-2540058c7ab4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId_noPhenoCount}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId_noPhenoCount}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when enterd multiple variableIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0218617-d577-4b68-9234-5865136ee3ff",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"120\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e83fd69e-3e12-4261-b63e-a54c1a151a01",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}},{{study_weedPressure_cvterm_id}},{{study_grainYield_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}},{{study_weedPressure_cvterm_id}},{{study_grainYield_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f53cfe9-4bcb-41e8-9bf3-1eb2a17b3499",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9d7dd81d-ecc7-41e1-bd24-c6129c254433",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{nonExistingGID}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{nonExistingGID}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57bf31af-a9d9-47de-bc39-b200270dee7e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "99cba4a1-0d55-4bd5-b3cc-280ee17d2ad3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{non_existing_dataset_id}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d666449a-2b6b-4cf0-962f-c88e3cd7b472",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1783d6a2-2bbf-41bb-994b-bf4c9c760925",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a8af9ac-6d76-46e5-94b2-b413fbe2bd18",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dd271c15-05d0-4cce-9795-3c95d2e1f02a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a04be5b-e095-4932-b357-d19c63da11bd",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1232b4c-4b38-47f5-857d-8d8b3e4825bf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string inputs to variableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b21336db-fec4-4951-b7e8-5a1bee23cb5d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0b705f71-4f6b-4a2c-8d12-8750d43fb3d3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0088871d-8e71-445c-a33e-8f5e0016fda3",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c05ed5ba-b7bc-4df7-9b09-d41053b00c41",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables",
					"item": [
						{
							"name": "Verify adding variable to a sub obs dataset with a numeric scale",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2eef0cb5-40c7-4f00-962f-d442446ef361",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var biomasId = Number(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(jsonData.termId).to.equal(biomasId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "82087a16-8351-475a-ab2d-448190706e76",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"studyAlias\": \"Biomas_yield\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify adding variable to a sub obs dataset with a categorical scale",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d391392-9288-498a-a8df-982e4f0e8d64",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var biomasId = Number(pm.environment.get(\"study_pestpressure_cvtermId\"));",
											"    pm.expect(jsonData.termId).to.equal(biomasId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "443485c9-5978-4440-b8af-f5403693e5eb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_pestpressure_cvtermId}}\",\r\n  \"studyAlias\": \"PestPressure_0_9\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableId={{study_pestpressure_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableId",
											"value": "{{study_pestpressure_cvtermId}}"
										}
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify adding variable to a sub obs dataset with a character scale",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f92e589-ec52-4b2d-ace1-bdf761dad25f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var biomasId = Number(pm.environment.get(\"study_notes_cvtermId\"));",
											"    pm.expect(jsonData.termId).to.equal(biomasId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "365ecea2-48ec-40a7-be15-0984c6e3e0fe",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify adding variable to a sub obs dataset with a date scale",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4151db73-5b46-4c98-aab6-961b8147fb54",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var varId = Number(pm.environment.get(\"germitest_date_cvtermId\"));",
											"    pm.expect(jsonData.termId).to.equal(varId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "46e654cd-f872-4fdb-85eb-e7eb3d968740",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{germitest_date_cvtermId}}\",\r\n  \"studyAlias\": \"GermiTest_date\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00d273cb-51c6-4248-9ec6-5a445ad011d9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "556f60e9-c813-4f94-938a-9f4cda3d8d20",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "755dd335-7de9-436c-96ee-6c4250e3484d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7650a6a8-5253-4892-ba97-1cdd574682e7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bc4e266-0106-4d0d-b3a8-7ec63dbbe983",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c59f2b-fb2f-44c6-84ff-3172b506f06b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d46a8b97-965a-4c69-9c72-fd2499f0eefa",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5345d2e9-d628-48f9-aa20-38f9ecc33b49",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fec47b7-4d6a-4469-9b11-92cf173c1ca1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35f0b994-18c2-4dd1-bad5-5bfbd6352ef2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify adding variable that is already associated to the dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "803981d4-fbbd-4cfe-98a5-f8e17b9aece9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Variable with id 18010 is already a variable of dataset.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "390b0df2-91aa-4f0a-bd5c-f8014909da90",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"studyAlias\": \"Biomas_yield\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered variable that is not of given variable type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6c00f4a-92b3-44ff-8098-6238bd46822b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Variable is not of given variable type.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "82648c91-4801-4c67-9513-951e82c142bd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{site_soil_ph_cvtermId}}\",\r\n  \"studyAlias\": \"SITE_SOIL_PH\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered selection variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5a1ee46-1f22-4af6-895f-a22ccee5512b",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var varId = Number(pm.environment.get(\"npsel_cvtermId\"));",
											"    pm.expect(jsonData.termId).to.equal(varId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d1e9577-5733-49f0-bc79-f8b8ee989645",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{selection_method_cvtermId}}\",\r\n  \"variableId\": \"{{npsel_cvtermId}}\",\r\n  \"studyAlias\": \"NPSEL\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered not supported variable type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1969dce9-9639-44c0-9516-0577eec711a8",
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Variable type is not supported.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1f0dd46-e81a-442f-832a-70fd055e4e9c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{study_condition_cvtermId}}\",\r\n  \"variableId\": \"{{site_soil_ph_cvtermId}}\",\r\n  \"studyAlias\": \"SITE_SOIL_PH\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify if locked study cannot be updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d307fca-8c27-43be-b303-c9623e78efec",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study is locked\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c10ddf81-18be-4c74-8af3-867854f7b9e5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user2\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password2\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('testUserToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('testUserTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{testUserToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"studyAlias\": \"Biomas_yield\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{locked_studyId}}/datasets/{{locked_study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{locked_studyId}}",
										"datasets",
										"{{locked_study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations",
					"item": [
						{
							"name": "Verify if user can add accepted observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b5bb685-16b8-4995-92b1-62e159e830c1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check returned variableId \", function () {",
											"    var biomasId = Number(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(jsonData.variableId).to.equal(biomasId);",
											"});",
											"pm.test(\"Check returned value \", function () {",
											"    pm.expect(jsonData.value).to.equal(\"5\");",
											"});",
											"",
											"pm.test(\"Check returned categoricalValueId \", function () {",
											"    pm.expect(jsonData.categoricalValueId).to.equal(null);",
											"});",
											"pm.test(\"Check returned status \", function () {",
											"    pm.expect(jsonData.status).to.equal(\"MANUALLY_EDITED\");",
											"});",
											"pm.test(\"Check returned observationUnitId \", function () {",
											"    var observationUnitId = Number(pm.environment.get(\"study_observationUnitId\"));",
											"    pm.expect(jsonData.observationUnitId).to.equal(observationUnitId);",
											"});",
											"pm.test(\"Check returned draftCategoricalValueId \", function () {",
											"    pm.expect(jsonData.draftCategoricalValueId).to.equal(null);",
											"});",
											"pm.test(\"Check returned draftValue \", function () {",
											"    pm.expect(jsonData.draftValue).to.equal(null);",
											"});",
											"pm.test(\"Check returned draftMode \", function () {",
											"    pm.expect(jsonData.draftMode).to.equal(false);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7dee1f72-ba19-42bb-9abd-d53b376b786a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3261bc-0464-4436-ade6-1f54dfaea9c1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/observationUnits/\"+pm.environment.get(\"study_observationUnitId\")+\"/observations\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "73482883-45cd-4d64-bceb-8d22fc161aab",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11b0203c-cfcc-4a31-8795-da1aa55ef09c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/observationUnits/\"+pm.environment.get(\"study_observationUnitId\")+\"/observations\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ba9d63bf-c33f-4a3e-a10e-ffac725cdd96",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80ee8c4e-a0de-4b5d-ab6e-3893039da3e0",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f1d7dd8-119e-4631-9b66-97be211525a6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f5eac4a-3c70-4dbe-b090-940e28cad0f4",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa3f4a56-39de-45f7-81ee-ee2bee004580",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9fcf7fc-075e-48c9-9954-723760dca1d6",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ba615979-db99-44df-a4d7-e9a23b80f07b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_observationUnitId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_observationUnitId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9055387-7dc2-47bc-a284-137f6a7e0519",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "28ffd9b9-4b80-4958-9ff0-48f15e789e35",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to observationUnitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee578d64-88fe-4277-b7b2-49eb8a7e6d9a",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "697609bd-9560-4fd9-8697-5a6c2c2883f5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{string_input}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{string_input}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered studyId and subobs datasetId do not belong to each other",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f8f2b56-f0df-4701-941e-88692b559947",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_subobs_datasetId\") +\" does not belong to the study \"+ pm.environment.get(\"trialStudyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "879902e6-c5c7-4e86-9efd-ceea312b4fd5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationUnitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cb8722f-66b8-461f-ac66-eea49012c6a4",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid observation unit id.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3dbbe1f-f060-4158-95f1-85871b5c20cc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/500/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"500",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables",
					"item": [
						{
							"name": "Delete an existing numeric trait from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac24ef97-2031-43fa-82d2-3c94fe129dc7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "20efbbd9-0928-4a40-8099-a366dcf09e47",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Delete an existing categorical trait from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb18d5ce-0092-49ad-a481-398de26dd8b7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "879253dc-2422-4684-a86b-32a2a898c8d8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_pestpressure_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_pestpressure_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Delete an existing character trait from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2c0fe4a-3879-4106-a531-cf3f3da6a12b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aa3ca865-ae7d-4537-92fe-de67edc46ab4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Delete an existing date trait from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a3d35aa-b42a-46fa-9fdb-ae0d2f22daf2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8b484a57-c6fe-499f-887d-ecad315f5916",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{germitest_date_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{germitest_date_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Delete an existing selection variable from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03735b27-ce8d-40d0-a088-af6fed6d15c9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "602b1e53-14f4-4dde-8319-0e2a3fe5a905",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{npsel_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{npsel_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered a variableId that is not existing in the dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd6f9f61-9632-473c-ba3e-60315fb8de03",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable with id 8390 is not a variable of dataset or it exists with unsupported variable type.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c104cb23-9d81-4472-945c-42dd5bf2e25b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de822890-3de5-4b6e-8ae6-428506b88468",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "31c34b6c-25b3-41ad-8889-a6e6ad9c1d97",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a59be79-7cc0-4a12-85f7-0038830bb391",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b350d03e-406e-4cd1-a451-2d2010aaec39",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95d925fb-fa71-4b66-abec-3ed236c2b7d4",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "599063ad-975f-486c-893a-57f6d5ebce01",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83ab205c-46eb-46e0-8334-3dd7aa661ad6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f34d75e5-b974-4aac-9f00-6b7879e6a59a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1478fe8b-7a66-4880-b351-e2f3ac25d9b9",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e6eb1c2a-85ab-4f13-a91e-03fad9610526",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "096fe1de-2b78-403a-b9ed-af13f53f55bc",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d4fccc4-105d-47f0-a608-eb087cc13847",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to variableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78b30750-f261-4a7e-82bc-2b6f201b2c2d",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6e52830-18af-425c-b697-b07f16126148",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table",
					"item": [
						{
							"name": "Retrieve observation units for 1 instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b980ff6-d671-4f90-bd8b-c88554b350eb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"var selectedData = jsonData.data[index];",
											"",
											"pm.test(\"Check observationUnitId\", function () {",
											"    pm.expect(selectedData.observationUnitId).to.eql(502);",
											"});",
											"",
											"pm.test(\"Check gid\", function () {",
											"    pm.expect(selectedData.gid).to.eql(21);",
											"});",
											"pm.test(\"Check designation\", function () {",
											"    pm.expect(selectedData.designation).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(selectedData.entryNumber).to.eql(1);",
											"});",
											"pm.test(\"Check trialInstance\", function () {",
											"    pm.expect(selectedData.trialInstance).to.eql(1);",
											"});",
											"pm.test(\"Check action\", function () {",
											"    pm.expect(selectedData.action).to.eql(\"502\");",
											"});",
											"pm.test(\"Check samplesCount\", function () {",
											"    pm.expect(selectedData.samplesCount).to.eql(\"2\");",
											"});",
											"pm.test(\"Check variable COL\", function () {",
											"    pm.expect(selectedData.variables.COL).to.eql({});",
											"});",
											"pm.test(\"Check variable GID\", function () {",
											"    pm.expect(selectedData.variables.GID.value).to.eql(\"21\");",
											"});",
											"pm.test(\"Check variable FIELDMAP RANGE\", function () {",
											"    pm.expect(selectedData.variables[\"FIELDMAP RANGE\"]).to.eql({});",
											"});",
											"pm.test(\"Check variable Grain_yield\", function () {",
											"    pm.expect(selectedData.variables.Grain_yield.observationId).to.eql(65050);",
											"    pm.expect(selectedData.variables.Grain_yield.value  ).to.eql(\"23\");",
											"    pm.expect(selectedData.variables.Grain_yield.variableId).to.eql(18000);",
											"});",
											"pm.test(\"Check variable NPSEL\", function () {",
											"    pm.expect(selectedData.variables.NPSEL.observationId).to.eql(65049);",
											"    pm.expect(selectedData.variables.NPSEL.value  ).to.eql(\"2\");",
											"    pm.expect(selectedData.variables.NPSEL.variableId).to.eql(8263);",
											"});",
											"pm.test(\"Check variable FIELDMAP COLUMN\", function () {",
											"    pm.expect(selectedData.variables[\"FIELDMAP COLUMN\"]).to.eql({});",
											"});",
											"pm.test(\"Check variable OBS_UNIT_ID\", function () {",
											"    pm.expect(selectedData.variables.OBS_UNIT_ID.value).to.eql(\"PKWDPtLOzD8Sz\");",
											"});",
											"pm.test(\"Check variable PARENT_OBS_UNIT_ID\", function () {",
											"    pm.expect(selectedData.variables.PARENT_OBS_UNIT_ID).to.eql({});",
											"});",
											"pm.test(\"Check variable Biomas_yield\", function () {",
											"    pm.expect(selectedData.variables.Biomas_yield.observationId).to.eql(65051);",
											"    pm.expect(selectedData.variables.Biomas_yield.value).to.eql(\"40\");",
											"    pm.expect(selectedData.variables.Biomas_yield.variableId).to.eql(18010);",
											"});",
											"pm.test(\"Check variable ENTRY_TYPE\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_TYPE.value).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check variable EXPT_DESIGN\", function () {",
											"    pm.expect(selectedData.variables.EXPT_DESIGN.value).to.eql(\"ELO\");",
											"});",
											"pm.test(\"Check variable InputVariable\", function () {",
											"    pm.expect(selectedData.variables.InputVariable.variableId).to.eql(100020);",
											"});",
											"pm.test(\"Check variable ENTRY_NO\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_NO.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check variable DESIGNATION\", function () {",
											"    pm.expect(selectedData.variables.DESIGNATION.value).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check variable WeedPressure_number\", function () {",
											"    pm.expect(selectedData.variables.WeedPressure_number.observationId).to.eql(65048);",
											"    pm.expect(selectedData.variables.WeedPressure_number.value  ).to.eql(\"21\");",
											"    pm.expect(selectedData.variables.WeedPressure_number.variableId).to.eql(18100);",
											"});",
											"pm.test(\"Check variable TRIAL_INSTANCE\", function () {",
											"    pm.expect(selectedData.variables.TRIAL_INSTANCE.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check variable ENTRY_CODE\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_CODE).to.eql({});",
											"});",
											"pm.test(\"Check variable BLOCK_NO\", function () {",
											"    pm.expect(selectedData.variables.BLOCK_NO).to.eql({});",
											"});",
											"pm.test(\"Check variable LOCATION_ID\", function () {",
											"    pm.expect(selectedData.variables.LOCATION_ID.value).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check variable ROW\", function () {",
											"    pm.expect(selectedData.variables.ROW).to.eql({});",
											"});",
											"pm.test(\"Check variable REP_NO\", function () {",
											"    pm.expect(selectedData.variables.REP_NO).to.eql({});",
											"});",
											"pm.test(\"Check variable PLOT_NO\", function () {",
											"    pm.expect(selectedData.variables.PLOT_NO.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check environmentVariables\", function () {",
											"    pm.expect(selectedData.environmentVariables).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcf581b2-85c9-4713-b1d5-0c05b62b3104",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8200,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8200,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units for all instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3219770-1ad1-40f1-96e3-48d1471933b1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"var selectedData = jsonData.data[index];",
											"",
											"pm.test(\"Check observationUnitId\", function () {",
											"    pm.expect(selectedData.observationUnitId).to.eql(502);",
											"});",
											"",
											"pm.test(\"Check gid\", function () {",
											"    pm.expect(selectedData.gid).to.eql(21);",
											"});",
											"pm.test(\"Check designation\", function () {",
											"    pm.expect(selectedData.designation).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(selectedData.entryNumber).to.eql(1);",
											"});",
											"pm.test(\"Check trialInstance\", function () {",
											"    pm.expect(selectedData.trialInstance).to.eql(1);",
											"});",
											"pm.test(\"Check action\", function () {",
											"    pm.expect(selectedData.action).to.eql(\"502\");",
											"});",
											"pm.test(\"Check samplesCount\", function () {",
											"    pm.expect(selectedData.samplesCount).to.eql(\"2\");",
											"});",
											"pm.test(\"Check variable COL\", function () {",
											"    pm.expect(selectedData.variables.COL).to.eql({});",
											"});",
											"pm.test(\"Check variable GID\", function () {",
											"    pm.expect(selectedData.variables.GID.value).to.eql(\"21\");",
											"});",
											"pm.test(\"Check variable FIELDMAP RANGE\", function () {",
											"    pm.expect(selectedData.variables[\"FIELDMAP RANGE\"]).to.eql({});",
											"});",
											"pm.test(\"Check variable Grain_yield\", function () {",
											"    pm.expect(selectedData.variables.Grain_yield.observationId).to.eql(65050);",
											"    pm.expect(selectedData.variables.Grain_yield.value  ).to.eql(\"23\");",
											"    pm.expect(selectedData.variables.Grain_yield.variableId).to.eql(18000);",
											"});",
											"pm.test(\"Check variable NPSEL\", function () {",
											"    pm.expect(selectedData.variables.NPSEL.observationId).to.eql(65049);",
											"    pm.expect(selectedData.variables.NPSEL.value  ).to.eql(\"2\");",
											"    pm.expect(selectedData.variables.NPSEL.variableId).to.eql(8263);",
											"});",
											"pm.test(\"Check variable FIELDMAP COLUMN\", function () {",
											"    pm.expect(selectedData.variables[\"FIELDMAP COLUMN\"]).to.eql({});",
											"});",
											"pm.test(\"Check variable OBS_UNIT_ID\", function () {",
											"    pm.expect(selectedData.variables.OBS_UNIT_ID.value).to.eql(\"PKWDPtLOzD8Sz\");",
											"});",
											"pm.test(\"Check variable PARENT_OBS_UNIT_ID\", function () {",
											"    pm.expect(selectedData.variables.PARENT_OBS_UNIT_ID).to.eql({});",
											"});",
											"pm.test(\"Check variable Biomas_yield\", function () {",
											"    pm.expect(selectedData.variables.Biomas_yield.observationId).to.eql(65051);",
											"    pm.expect(selectedData.variables.Biomas_yield.value).to.eql(\"40\");",
											"    pm.expect(selectedData.variables.Biomas_yield.variableId).to.eql(18010);",
											"});",
											"pm.test(\"Check variable ENTRY_TYPE\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_TYPE.value).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check variable EXPT_DESIGN\", function () {",
											"    pm.expect(selectedData.variables.EXPT_DESIGN.value).to.eql(\"ELO\");",
											"});",
											"pm.test(\"Check variable InputVariable\", function () {",
											"    pm.expect(selectedData.variables.InputVariable.variableId).to.eql(100020);",
											"});",
											"pm.test(\"Check variable ENTRY_NO\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_NO.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check variable DESIGNATION\", function () {",
											"    pm.expect(selectedData.variables.DESIGNATION.value).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check variable WeedPressure_number\", function () {",
											"    pm.expect(selectedData.variables.WeedPressure_number.observationId).to.eql(65048);",
											"    pm.expect(selectedData.variables.WeedPressure_number.value  ).to.eql(\"21\");",
											"    pm.expect(selectedData.variables.WeedPressure_number.variableId).to.eql(18100);",
											"});",
											"pm.test(\"Check variable TRIAL_INSTANCE\", function () {",
											"    pm.expect(selectedData.variables.TRIAL_INSTANCE.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check variable ENTRY_CODE\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_CODE).to.eql({});",
											"});",
											"pm.test(\"Check variable BLOCK_NO\", function () {",
											"    pm.expect(selectedData.variables.BLOCK_NO).to.eql({});",
											"});",
											"pm.test(\"Check variable LOCATION_ID\", function () {",
											"    pm.expect(selectedData.variables.LOCATION_ID.value).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check variable ROW\", function () {",
											"    pm.expect(selectedData.variables.ROW).to.eql({});",
											"});",
											"pm.test(\"Check variable REP_NO\", function () {",
											"    pm.expect(selectedData.variables.REP_NO).to.eql({});",
											"});",
											"pm.test(\"Check variable PLOT_NO\", function () {",
											"    pm.expect(selectedData.variables.PLOT_NO.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check environmentVariables\", function () {",
											"    pm.expect(selectedData.environmentVariables).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "929813bd-ce79-4953-9528-99d1ccbacfaa",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8200,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8200,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80dd26bf-02ed-48d0-b3d3-a98acb6864ee",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/table\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3ed9bf1b-d659-483e-92a4-b63c0503506c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74e97a6e-ac64-47d1-9fed-8003b6531ad4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/table\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "75883f12-bbad-44e3-93b8-2950c01e9938",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a380265-b2a2-40cb-9fe8-ea38b304ba9c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "33b79dbd-9ada-463e-bf30-ae9bbe527e0f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa370bb9-1184-4a81-861a-dd6dfc5a4456",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a3b9e059-d5c8-442c-93fb-e8e76fdda758",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by trialInstance asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69db3a55-fdfd-470a-9b6c-3f1761ff21ed",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next TRIAL_INSTANCE is greater or equal to previous TRIAL_INSTANCE\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].trialInstance)) >= (parseInt(selectedData[i].trialInstance))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"                             ",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f4b2c943-a23b-4070-9a82-caeef39db04e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 1,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8170,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8170,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by trialInstance desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb9cdeb9-e7cc-4fe4-b7e8-ca893cf3069b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next TRIAL_INSTANCE is greater or equal to previous TRIAL_INSTANCE\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].trialInstance)) <= (parseInt(selectedData[i].trialInstance))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3483c7c9-d759-488e-ac9e-b9cf96a42697",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 1,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8170,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8170,desc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by gid asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "221adfd2-ef8e-4c68-bdad-1f6b5f784656",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next gid is greater or equal to previous gid\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].gid)) >= (parseInt(selectedData[i].gid))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fc5dd4b7-b03b-4eb0-99e5-90de6b3a7e27",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 5,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8240,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8240,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by gid desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9385bcd-ea98-4058-98b5-4d0bd7b3e607",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next gid is greater or equal to previous gid\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].gid)) <= (parseInt(selectedData[i].gid))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f0e69cd9-d8fa-4262-be7b-168f6c4592b4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 5,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8240,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8240,desc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by entryNumber asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c306e52b-10e2-4457-97b2-0e3596ac7b03",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next entryNumber is greater or equal to previous entryNumber\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].entryNumber)) >= (parseInt(selectedData[i].entryNumber))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04184883-f270-4eea-819b-7daf98e4b90f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 6,\n\t\"sortedRequest\": {\n\t\t\"pageSize\": 50,\n\t\t\"pageNumber\": 1,\n\t\t\"sortBy\": 8230,\n\t\t\"sortOrder\": \"asc\"\n\t},\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8230,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8230,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by entryNumber desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a25d2a54-83dc-4e0e-b96c-b91700b719bb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next entryNumber is greater or equal to previous entryNumber\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].entryNumber)) <= (parseInt(selectedData[i].entryNumber))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32aa77b0-fd29-4b9b-9aa2-8ba3e51b181f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 6,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8230,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8230,desc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by plotNumber asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42776173-c85a-4b9a-9e9b-5c7765e9c401",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next PLOT_NO is greater or equal to previous PLOT_NO\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].variables.PLOT_NO.value)) >= (parseInt(selectedData[i].variables.PLOT_NO.value))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "60592139-7c27-461b-a19d-42e2aec285ae",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 7,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8200,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8200,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by plotNumber desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1f931a3-f6a6-458f-9319-8b8db5e17d03",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next PLOT_NO is greater or equal to previous PLOT_NO\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].variables.PLOT_NO.value)) <= (parseInt(selectedData[i].variables.PLOT_NO.value))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8876603-fa1f-4189-bca5-933e58136744",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 7,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8200,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8200,desc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Manage Observation Data",
					"item": [
						{
							"name": "Add observation to input variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75b6dfdb-c754-4c03-9f8c-23e2b02b5b9f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67be531c-cc9b-49df-a203-4cf754e81fdf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPr380Bs8L\",\r\n\t\t\t\"1\",\r\n\t\t\t\"39\",\r\n\t\t\t\"42\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDPaE59GEmX\",\r\n\t\t\t\"2\",\r\n\t\t\t\"35\",\r\n\t\t\t\"41\",\r\n\t\t\t\"21\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPrmTUoAR7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"33\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPvY4h2kxU\",\r\n\t\t\t\"4\",\r\n\t\t\t\"22\",\r\n\t\t\t\"25\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPOHE7tQlB\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\",\r\n\t\t\t\"41\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPjLgQAbkj\",\r\n\t\t\t\"6\",\r\n\t\t\t\"39\",\r\n\t\t\t\"17\",\r\n\t\t\t\"48\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP6Fii9PlK\",\r\n\t\t\t\"7\",\r\n\t\t\t\"38\",\r\n\t\t\t\"32\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPIdrKcnAt\",\r\n\t\t\t\"8\",\r\n\t\t\t\"28\",\r\n\t\t\t\"28\",\r\n\t\t\t\"27\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDP39sdRbmd\",\r\n\t\t\t\"9\",\r\n\t\t\t\"44\",\r\n\t\t\t\"44\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPIFfYsTeE\",\r\n\t\t\t\"10\",\r\n\t\t\t\"5\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDPL3EIrzIi\",\r\n\t\t\t\"11\",\r\n\t\t\t\"13\",\r\n\t\t\t\"48\",\r\n\t\t\t\"39\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPRoNUKI0a\",\r\n\t\t\t\"12\",\r\n\t\t\t\"19\",\r\n\t\t\t\"30\",\r\n\t\t\t\"50\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPG1xTuED6\",\r\n\t\t\t\"13\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPbsMoqfPx\",\r\n\t\t\t\"14\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5\",\r\n\t\t\t\"39\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDP9VwAD4Eo\",\r\n\t\t\t\"15\",\r\n\t\t\t\"43\",\r\n\t\t\t\"12\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDPRCjHplai\",\r\n\t\t\t\"16\",\r\n\t\t\t\"14\",\r\n\t\t\t\"49\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDPFU77vd3d\",\r\n\t\t\t\"17\",\r\n\t\t\t\"16\",\r\n\t\t\t\"48\",\r\n\t\t\t\"35\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDP5olR82ll\",\r\n\t\t\t\"18\",\r\n\t\t\t\"46\",\r\n\t\t\t\"45\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPQvs0xHVx\",\r\n\t\t\t\"19\",\r\n\t\t\t\"45\",\r\n\t\t\t\"37\",\r\n\t\t\t\"41\",\r\n\t\t\t\"\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPkP8b8XvQ\",\r\n\t\t\t\"20\",\r\n\t\t\t\"23\",\r\n\t\t\t\"31\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"3\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "080d3e89-8f26-480f-abaf-65413948698a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/observations\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb8939b2-54ab-4fba-a213-fe89c96b17b9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aed3e544-5f9d-4be3-afae-f76fe50bbb4a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/observations\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d7188e5e-e972-4c6b-8e40-011b68427634",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation values with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ac6de99-89a7-4011-87ce-697f9c905a57",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7ce1e8eb-1f65-442e-9c44-307a257178df",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation values with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e970636-8f6e-4ae1-a86e-1498f7e57871",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1ef7eff7-430d-4f4a-b8f8-6757f37c54f8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation values with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9541a1d9-4d9d-440f-a8f7-935259a8fb44",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52c36961-4c5c-4139-a94c-506cda00e017",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation with invalid numeric variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edba8937-2cfa-4080-9b9f-bb264c2c55f3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"The numeric variable InputVariable contains an invalid value: invalid. Please check the data file and try again.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ae59efbd-bb71-48a3-bc09-77cd58e854d1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"invalid\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation to a locked study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e4003a4-74da-4a5d-b38c-54215b394037",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study is locked\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5011588-3593-4b39-8dd4-aa14f67d6317",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user2\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password2\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('testUserToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('testUserTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{testUserToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"REP_NO\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"Grain_size\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"b9129428-d34a-42d5-8d9b-745b995f3fa1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"382\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"7fb97924-b41d-4f1c-bedb-03118acdf8ab\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2\",\r\n\t\t\t\"120\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"42d19ca0-9ce5-4ace-a2b4-765e34770036\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"1\",\r\n\t\t\t\"3\",\r\n\t\t\t\"301\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"002389b5-582c-4ee5-aa42-6a07ffe86c7c\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1\",\r\n\t\t\t\"4\",\r\n\t\t\t\"146\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"e5a64887-76d6-4133-84fc-b088edb35d1c\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"371\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"848e3199-0523-4ee4-a5b3-31783af1919c\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\",\r\n\t\t\t\"6\",\r\n\t\t\t\"105\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"dd3e2a9d-a16e-4913-a89d-0aaab936f8ef\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"7\",\r\n\t\t\t\"415\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"df130273-2689-4602-b0fd-9592f93612ba\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"1\",\r\n\t\t\t\"8\",\r\n\t\t\t\"469\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"e741338d-f076-42d2-aa6b-876c8cac51fd\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"1\",\r\n\t\t\t\"9\",\r\n\t\t\t\"388\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"21e85da8-c58d-479a-b540-5a8ce2126260\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"10\",\r\n\t\t\t\"238\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"140b8ca7-8875-4300-8684-0be748b321de\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"1\",\r\n\t\t\t\"11\",\r\n\t\t\t\"424\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"52869132-f86b-47ba-b42a-ab028ed55f39\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"1\",\r\n\t\t\t\"12\",\r\n\t\t\t\"488\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1286dc6b-a330-408c-b22d-2a63da1f0c15\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"4e3349e0-0786-48cb-bab4-614a7d4bae1d\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"184\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"74c10cc4-a784-471d-92c9-9633d446f5c6\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"1\",\r\n\t\t\t\"15\",\r\n\t\t\t\"271\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"3a8f24d9-5840-48bd-bb8f-ea853b4c96a7\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"1\",\r\n\t\t\t\"16\",\r\n\t\t\t\"208\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"bcd420d7-63ea-48e8-8577-4d627c748e9d\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1\",\r\n\t\t\t\"17\",\r\n\t\t\t\"117\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"62a5c1e7-b8b6-4ed7-9e8e-b645c1d6635d\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"1\",\r\n\t\t\t\"18\",\r\n\t\t\t\"375\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"f94a5062-9da1-4b1f-a425-f487b4f51cc1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"1\",\r\n\t\t\t\"19\",\r\n\t\t\t\"426\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"0b8672b7-b6ec-4d97-9a90-498a17f2d3ad\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"292\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"c651f61f-7d03-4e20-b8cc-c3a8a2b2884c\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"2\",\r\n\t\t\t\"21\",\r\n\t\t\t\"274\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"e910d405-7270-44ef-9313-5b1111b88068\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2\",\r\n\t\t\t\"22\",\r\n\t\t\t\"337\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"f7df3116-8a5e-438d-8ed5-0467757a2591\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2\",\r\n\t\t\t\"23\",\r\n\t\t\t\"391\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"a3b5cd79-ad6b-4bb0-aae7-630a407bf377\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"2\",\r\n\t\t\t\"24\",\r\n\t\t\t\"233\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"b5b14be3-621b-404a-84d3-197a37b5da52\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2\",\r\n\t\t\t\"25\",\r\n\t\t\t\"148\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"463d33ee-aaf3-4ead-b573-eea0197675cb\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"2\",\r\n\t\t\t\"26\",\r\n\t\t\t\"298\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"259a4362-104c-4bf1-9eab-3b546b67cd4b\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"2\",\r\n\t\t\t\"27\",\r\n\t\t\t\"278\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"30934fb5-20b6-4df1-bcae-66660b0b6867\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"2\",\r\n\t\t\t\"28\",\r\n\t\t\t\"237\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"d97b3b54-2862-49ef-bbd1-ff32267bc23f\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"29\",\r\n\t\t\t\"295\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"41112da6-9b7d-46d4-8b59-fd169a2762b0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"2\",\r\n\t\t\t\"30\",\r\n\t\t\t\"164\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"751818b2-c539-49d2-ae53-8748bd2729c5\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2\",\r\n\t\t\t\"31\",\r\n\t\t\t\"243\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1e173e16-fb12-49c2-9b76-fb5d799ac18b\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"2\",\r\n\t\t\t\"32\",\r\n\t\t\t\"272\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"62b3309e-29df-4601-b937-e0fd55358543\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"165\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"d9377c1c-b0c9-4273-a49b-e766d0db5218\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"2\",\r\n\t\t\t\"34\",\r\n\t\t\t\"374\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1c01dda0-c5ea-48ac-84ae-bbb2fae500c5\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"35\",\r\n\t\t\t\"154\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2f38e9fa-0623-4579-93d5-8ef6a96e8ddf\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"2\",\r\n\t\t\t\"36\",\r\n\t\t\t\"170\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"8bc7a69c-63ca-4232-ab38-bf4860709124\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"2\",\r\n\t\t\t\"37\",\r\n\t\t\t\"416\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"23fc0361-7b67-4f0d-8227-50801c95c0d1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"2\",\r\n\t\t\t\"38\",\r\n\t\t\t\"166\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"284843ff-3cb8-4f46-99d1-9e7221492e18\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"2\",\r\n\t\t\t\"39\",\r\n\t\t\t\"366\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"98c70963-a2c1-4d6d-8c58-4566cef0dff3\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2\",\r\n\t\t\t\"40\",\r\n\t\t\t\"255\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{locked_studyId}}/datasets/{{locked_study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{locked_studyId}}",
										"datasets",
										"{{locked_study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Reject pending data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da5785d9-86f5-4d4c-8962-623bc4cf765c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "da6f5997-57bf-4914-937f-597cb65c913a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/rejection",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"rejection"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6dbf5862-ad46-48cf-84da-019bbebf4daf",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/drafts/rejection\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f1eb5e5-5ae5-4ffd-ba8c-4a32d3f0f6b6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/rejection",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"rejection"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ab90673-ed6e-4587-a7a0-20160aa32e1a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/drafts/rejection\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2c694793-0a9e-4253-8faa-1c84b6339df6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/rejection",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"rejection"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55281473-10db-43ef-994a-e20e428ed3a3",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b5b0f62d-d616-4e3e-8cb5-769aee06d2ad",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/rejection/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"rejection",
										""
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​ rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47131fdc-3231-416d-8fcf-3830112bbe6f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1e684de-e4f2-4892-a042-3ab81c5d048a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/rejection/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"rejection",
										""
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​ rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with non-obs datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b91fb7c6-f7db-49d2-811c-f51c0239a772",
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset is not an observation or subobservation dataset.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b469c7d2-f099-47ea-921f-7e3b157b7f1d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_env_id}}/observation-units/drafts/rejection/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_env_id}}",
										"observation-units",
										"drafts",
										"rejection",
										""
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​ rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da2346bc-3268-4c79-ba84-7b2b024373a9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a782d061-45b2-4a52-900b-5669c39b14af",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/rejection/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"rejection",
										""
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​ rejection"
							},
							"response": []
						},
						{
							"name": "Add observation to input variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51defc4f-f716-4446-b2d4-34adc334f8fa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c91b9e8a-3ba3-43d2-83aa-569eb74267c0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"35\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"27\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"10\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"45\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"36\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"15\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"45\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"23\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"38\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"19\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"24\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"46\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"16\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"38\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"48\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"11\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"38\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"42\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPr380Bs8L\",\r\n\t\t\t\"1\",\r\n\t\t\t\"39\",\r\n\t\t\t\"42\",\r\n\t\t\t\"7\",\r\n\t\t\t\"21\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDPaE59GEmX\",\r\n\t\t\t\"2\",\r\n\t\t\t\"35\",\r\n\t\t\t\"41\",\r\n\t\t\t\"21\",\r\n\t\t\t\"21\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPrmTUoAR7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"33\",\r\n\t\t\t\"13\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPvY4h2kxU\",\r\n\t\t\t\"4\",\r\n\t\t\t\"22\",\r\n\t\t\t\"25\",\r\n\t\t\t\"3\",\r\n\t\t\t\"24\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPOHE7tQlB\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\",\r\n\t\t\t\"41\",\r\n\t\t\t\"45\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPjLgQAbkj\",\r\n\t\t\t\"6\",\r\n\t\t\t\"39\",\r\n\t\t\t\"17\",\r\n\t\t\t\"48\",\r\n\t\t\t\"44\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP6Fii9PlK\",\r\n\t\t\t\"7\",\r\n\t\t\t\"38\",\r\n\t\t\t\"32\",\r\n\t\t\t\"2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPIdrKcnAt\",\r\n\t\t\t\"8\",\r\n\t\t\t\"28\",\r\n\t\t\t\"28\",\r\n\t\t\t\"27\",\r\n\t\t\t\"31\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDP39sdRbmd\",\r\n\t\t\t\"9\",\r\n\t\t\t\"44\",\r\n\t\t\t\"44\",\r\n\t\t\t\"11\",\r\n\t\t\t\"21\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPIFfYsTeE\",\r\n\t\t\t\"10\",\r\n\t\t\t\"5\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"17\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDPL3EIrzIi\",\r\n\t\t\t\"11\",\r\n\t\t\t\"13\",\r\n\t\t\t\"48\",\r\n\t\t\t\"39\",\r\n\t\t\t\"45\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPRoNUKI0a\",\r\n\t\t\t\"12\",\r\n\t\t\t\"19\",\r\n\t\t\t\"30\",\r\n\t\t\t\"50\",\r\n\t\t\t\"36\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPG1xTuED6\",\r\n\t\t\t\"13\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"9\",\r\n\t\t\t\"22\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPbsMoqfPx\",\r\n\t\t\t\"14\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5\",\r\n\t\t\t\"39\",\r\n\t\t\t\"17\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDP9VwAD4Eo\",\r\n\t\t\t\"15\",\r\n\t\t\t\"43\",\r\n\t\t\t\"12\",\r\n\t\t\t\"19\",\r\n\t\t\t\"46\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDPRCjHplai\",\r\n\t\t\t\"16\",\r\n\t\t\t\"14\",\r\n\t\t\t\"49\",\r\n\t\t\t\"4\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDPFU77vd3d\",\r\n\t\t\t\"17\",\r\n\t\t\t\"16\",\r\n\t\t\t\"48\",\r\n\t\t\t\"35\",\r\n\t\t\t\"24\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDP5olR82ll\",\r\n\t\t\t\"18\",\r\n\t\t\t\"46\",\r\n\t\t\t\"45\",\r\n\t\t\t\"14\",\r\n\t\t\t\"27\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPQvs0xHVx\",\r\n\t\t\t\"19\",\r\n\t\t\t\"45\",\r\n\t\t\t\"37\",\r\n\t\t\t\"41\",\r\n\t\t\t\"18\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPkP8b8XvQ\",\r\n\t\t\t\"20\",\r\n\t\t\t\"23\",\r\n\t\t\t\"31\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"3\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Accept pending data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d74bda9-0a48-4b00-804e-3cda7be7662e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09a45a3b-0d42-4868-899a-1491ff5d0f9f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b495e6f0-417e-4b82-abeb-efe22fd88dcc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/drafts/acceptance\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a623dbd-505f-42e5-a0ff-5dc50b578757",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fb477d3-0045-451e-b24f-007ab4b76ed2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/drafts/acceptance\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8d3b0f6e-2ce5-4fa2-9107-ace7748c4969",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9349babe-9bfb-4f7e-85a3-03218a85a9b4",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69c07a56-5e46-4b68-916a-05d88ab0450d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93c266d6-ff67-4eeb-8f54-4f65fecbec05",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d17e48f-bf95-45ca-8676-41e0d781a528",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd2f7746-2545-4be3-89f3-e1f39115a840",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5775cb86-f2c2-49ba-97f3-d93663e943aa",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with non-obs datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7b71c90-396e-4e17-ae46-648e3e420cb3",
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset is not an observation or subobservation dataset.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "df4bf3c5-e819-4bb5-b3ff-ab64fe776f22",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_env_id}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_env_id}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c74e6917-8fa6-4ea3-b6dc-221e82a5a940",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.InputVariable.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cefb3d3d-ab7e-45b9-8f64-dc6460dd5f8a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 2,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Delete observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f2f0fe2-a81d-4c6a-a5c9-b1ad2e8bc5a5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0c22ab2a-6fea-414d-91ab-f9699b55faab",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 2,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a73e5db1-cde7-4da7-88e2-cc03be10f492",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/\"+pm.environment.get(\"observationUnitId\")+\"/observations/\"+pm.environment.get(\"observationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ee4d774-ce1f-4c32-ae22-4af5fd6bd0bc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65defeb5-f3d8-4f06-8375-5d7dd16b3105",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/\"+pm.environment.get(\"observationUnitId\")+\"/observations/\"+pm.environment.get(\"observationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "78a4d346-e9cb-4d22-a93f-febf56f395c6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9eb95e96-e263-4b82-89d1-9d38e73c8c1d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "375b8da9-5097-44c5-b44e-a7fb5f2e277a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92841817-93e2-4612-a776-d95d0f1d4db8",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7ff093d-d4b8-43ec-9f5b-2d70add78f4a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db3b7066-79ac-44f4-bd43-6e2a74b7a1b7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be4de24f-df59-4e41-abe6-efc818055ba6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype for 1 instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70a426fe-2dfb-42be-8b50-1bf10993c917",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" var jsonData = pm.response.json();",
											"pm.test(\"Check totalFilteredPhenotypes\", function () {",
											"    pm.expect(jsonData.totalFilteredPhenotypes).to.eql(20);",
											"});",
											"pm.test(\"Check totalFilteredPhenotypes\", function () {",
											"    pm.expect(jsonData.totalFilteredInstances).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04922f70-00f9-4d0f-a3e5-f94b8ccb61fa",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype for all instances",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a308c19d-630f-41ab-ab11-94f261c8aebb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" var jsonData = pm.response.json();",
											"pm.test(\"Check totalFilteredPhenotypes\", function () {",
											"    pm.expect(jsonData.totalFilteredPhenotypes).to.eql(40);",
											"});",
											"pm.test(\"Check totalFilteredPhenotypes\", function () {",
											"    pm.expect(jsonData.totalFilteredInstances).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8518d6e-653c-463d-812f-35b1977afdd9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "809d44bd-dcfd-4662-99f0-59e8e17eba04",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/observations/filter/count\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1355e7bb-1432-4d45-9401-98f0e5185c0a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5e60629-6ab2-4a97-a728-46eaba106703",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/observations/filter/count\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f77d5383-0194-4b34-899f-bffc0cca1ade",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72843fbd-dd7b-49d9-ab2d-63fe1a078828",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c67f980e-c28a-4c7e-979b-724b2fb04297",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d608b42c-2595-4747-ba77-fe2d9a678d52",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8836195-f577-48ad-a7c3-cc8633ee93f7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06503288-b2ce-4af5-b522-8846eb6dae74",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35e50d72-afce-479e-8223-0909f7920200",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b7a9c67-89e5-47bc-b1c0-46bb8359be73",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c6c6e39-bbee-4763-99fc-f427fff1bff6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51b0894f-1b3b-4bf2-842a-4cb112cab093",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/filter/set-value\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "01115a90-326a-4f38-a249-c8bb354f9ec9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2aaa82be-05f2-4472-952d-1d8da7dfa7f5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/testdata/programs/invalid/studies/3009/datasets/3011/observation-units/filter/set-value\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dfc44909-0585-4314-95e3-6cacb63ec32e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4e0fdaa-96bf-4bb2-9fdb-f6033a3961a7",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "521c299f-d284-4a46-b87a-f60b2b1785ab",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5a0d5a7-3d4f-4c76-9252-6360b234d5b3",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9835646e-5ebd-432b-8011-9e1cf276d127",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1244d0a1-e45f-4f31-9475-7c0061b6480f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "752a9713-c8a4-4b1d-803e-9c1147c5ccb9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set invalid value for filtered phenotype",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77410dec-6857-4871-a692-9924a058936b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid value.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9995768d-2f65-499a-a0bc-dc7bcf4e29cf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"invalidValue\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating filtered phenotype",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d23b6279-8ead-4a9b-96b0-d6693788fd6b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.InputVariable.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69ae3378-bc82-4170-aeb5-701a5b8ada02",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Delete observation of upated filtered phenotypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c4213dd-92ac-4095-b54a-84f8d2051c06",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b24e6ce0-65ca-4e63-addb-fc32a7ea23e3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating filtered phenotype Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bb4ae8b-6413-4676-a908-3a69f102ce80",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.PestPressure_0_9.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1c395098-cac1-428d-afc7-4f6dd58f86e4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Delete observation of catgorical variable in subobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a64eda1a-9236-4551-9769-0803fd1b53c9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation of catgorical variable in subobs\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2eb0a309-6aaf-4ef1-923c-991066fdff3c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values before adding observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "125d7f85-f6b0-4fb1-b179-1fd0b08d6b97",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1457b4fb-9009-4e1f-a136-4e323255b983",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Add observation to categorical variable in subobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "503effba-06b6-402f-ac5a-3be23b14a4ee",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "49af5efe-64e5-4167-a7dc-49a7f8f5a373",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"QUADRAT_NO\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"PestPressure_0_9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"0b261507-54ce-4713-b3f2-709736761734\",\r\n\t\t\t\"1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"15\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"315fb141-03c0-4182-88f1-7a9c85f72328\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2\",\r\n\t\t\t\"50\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2d10c00d-4009-4e4e-951e-f7007a313af7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"3\",\r\n\t\t\t\"18\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"899d0d12-e86d-4b17-87ac-e281a94e92ec\",\r\n\t\t\t\"1\",\r\n\t\t\t\"4\",\r\n\t\t\t\"19\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"cfa758b5-9bb8-40dd-9054-0219feca641a\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1\",\r\n\t\t\t\"98\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69d0f45f-9b50-41e2-8d4a-6d1e819b338e\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1bfa2437-3b9a-4076-ab76-5a179cc15922\",\r\n\t\t\t\"2\",\r\n\t\t\t\"3\",\r\n\t\t\t\"34\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2595fc34-8297-4270-a08e-8ccfc7721cb5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"4\",\r\n\t\t\t\"60\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"638ca187-ee3d-4b04-9323-d1445beffe90\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"3cf8a747-33a1-4d67-aa3f-352a00613f00\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2\",\r\n\t\t\t\"61\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2c1272ee-9c14-46b4-a827-1cdc8f507467\",\r\n\t\t\t\"3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1d191e63-4cfa-473a-afbe-40f4be48c64b\",\r\n\t\t\t\"3\",\r\n\t\t\t\"4\",\r\n\t\t\t\"50\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"93580832-f751-453e-a6a2-f95f76b288cf\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1\",\r\n\t\t\t\"63\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"dbb7f2f6-e8cd-4870-a9b5-a3fc00ba12fa\",\r\n\t\t\t\"4\",\r\n\t\t\t\"2\",\r\n\t\t\t\"64\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1f26c682-785b-4ee6-842f-2f672ba882c9\",\r\n\t\t\t\"4\",\r\n\t\t\t\"3\",\r\n\t\t\t\"58\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"3bbe6c39-a1d6-4652-8bba-7b1723d6ecf5\",\r\n\t\t\t\"4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"43\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"964a445e-bcd2-4482-a1f0-67990a9845cd\",\r\n\t\t\t\"5\",\r\n\t\t\t\"1\",\r\n\t\t\t\"78\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"bd0e959a-cebf-4858-82ed-61433679de02\",\r\n\t\t\t\"5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"49\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"194e49cd-4a72-4337-b207-c0ad03924dc1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"3\",\r\n\t\t\t\"76\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"cfaf837f-508d-4b3c-8eb0-968439a92ad3\",\r\n\t\t\t\"5\",\r\n\t\t\t\"4\",\r\n\t\t\t\"87\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"33f3fd46-745e-40d0-99d4-abb86307c963\",\r\n\t\t\t\"6\",\r\n\t\t\t\"1\",\r\n\t\t\t\"28\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2ecbc964-212b-4d87-b6d6-8dd86869180c\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"0744db7c-e5f3-44c6-bcde-da6ef23261c6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"3\",\r\n\t\t\t\"21\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"0a864c70-4eb1-4111-9a05-25fc6159dd8a\",\r\n\t\t\t\"6\",\r\n\t\t\t\"4\",\r\n\t\t\t\"36\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"5d7a76f5-407e-45ad-9d3e-caccd110bfe0\",\r\n\t\t\t\"7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"5909e7a8-e402-4e76-b88d-bd152174fbca\",\r\n\t\t\t\"7\",\r\n\t\t\t\"2\",\r\n\t\t\t\"34\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"524bc770-e069-449b-9973-43efc938f351\",\r\n\t\t\t\"7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"16\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"70cba2b2-df16-42ad-99fd-b43e243cbfdc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"4\",\r\n\t\t\t\"11\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"9456f46a-72a4-4e2f-900e-26a4d056901a\",\r\n\t\t\t\"8\",\r\n\t\t\t\"1\",\r\n\t\t\t\"57\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"ab4c4997-f3ea-4a47-ad22-7c2cc73cd5cc\",\r\n\t\t\t\"8\",\r\n\t\t\t\"2\",\r\n\t\t\t\"77\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"b581068d-e240-4ba0-8df5-228fa2c2f4db\",\r\n\t\t\t\"8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"84\",\r\n\t\t\t\"17\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6e54de07-9b2e-4f88-9e31-28101efc2c5e\",\r\n\t\t\t\"8\",\r\n\t\t\t\"4\",\r\n\t\t\t\"92\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"8160083f-0c23-4cb6-824d-9b9bd7226437\",\r\n\t\t\t\"9\",\r\n\t\t\t\"1\",\r\n\t\t\t\"73\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"b682d671-e83f-4c90-aa92-e52184e6d72a\",\r\n\t\t\t\"9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"5bf2357a-b346-41bc-bad2-faba1e35994b\",\r\n\t\t\t\"9\",\r\n\t\t\t\"3\",\r\n\t\t\t\"86\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"7fe198f5-b983-4333-8615-9c801218ad61\",\r\n\t\t\t\"9\",\r\n\t\t\t\"4\",\r\n\t\t\t\"94\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"07126092-8b56-4d5e-8f98-118873f2463d\",\r\n\t\t\t\"10\",\r\n\t\t\t\"1\",\r\n\t\t\t\"46\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"9d1a3fa0-c20b-447b-8b10-bd48a269ff61\",\r\n\t\t\t\"10\",\r\n\t\t\t\"2\",\r\n\t\t\t\"9\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"d6c3a7cf-da8c-41be-8656-0312c86dac10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"3\",\r\n\t\t\t\"56\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"d6f29725-e27b-49ea-b2a4-0e8999189728\",\r\n\t\t\t\"10\",\r\n\t\t\t\"4\",\r\n\t\t\t\"27\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"fac0c26d-0dee-4d30-9a53-82d1d78c741f\",\r\n\t\t\t\"11\",\r\n\t\t\t\"1\",\r\n\t\t\t\"36\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"b634d60f-a7bd-4687-99fe-c92e5b067a90\",\r\n\t\t\t\"11\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"5a08eead-02c6-4146-9114-15d04fd5a9eb\",\r\n\t\t\t\"11\",\r\n\t\t\t\"3\",\r\n\t\t\t\"49\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"080603ca-d4ad-4406-9a70-180bffe645b0\",\r\n\t\t\t\"11\",\r\n\t\t\t\"4\",\r\n\t\t\t\"18\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"e6ce6248-4051-40eb-af4b-ecde2569c82a\",\r\n\t\t\t\"12\",\r\n\t\t\t\"1\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"fbf3a70f-1fd0-414a-ac4e-a0f180d4cbb3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2\",\r\n\t\t\t\"27\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48b392cb-3179-42c2-8321-05eb6c57afd4\",\r\n\t\t\t\"12\",\r\n\t\t\t\"3\",\r\n\t\t\t\"18\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2005942c-616e-4747-8ee8-0ad2f66966b6\",\r\n\t\t\t\"12\",\r\n\t\t\t\"4\",\r\n\t\t\t\"57\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"85d04aea-36cf-4b01-ba39-4ede2e9f5c71\",\r\n\t\t\t\"13\",\r\n\t\t\t\"1\",\r\n\t\t\t\"66\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"314a5e14-0bea-458c-b314-602654b36c21\",\r\n\t\t\t\"13\",\r\n\t\t\t\"2\",\r\n\t\t\t\"84\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"93ffeae1-8695-4b8d-94b7-1f59731b804b\",\r\n\t\t\t\"13\",\r\n\t\t\t\"3\",\r\n\t\t\t\"29\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"d683a7eb-d4d3-46f4-aef1-a9c20ed128ca\",\r\n\t\t\t\"13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"73\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36f04eb5-63e0-4d60-9a58-9d48e1c01f50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\",\r\n\t\t\t\"28\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"3cdd899e-55b0-4eac-ab3f-9f40a2626963\",\r\n\t\t\t\"14\",\r\n\t\t\t\"2\",\r\n\t\t\t\"7\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"af24c30b-e91f-4381-be65-34d7412f73b0\",\r\n\t\t\t\"14\",\r\n\t\t\t\"3\",\r\n\t\t\t\"46\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"f0059745-7bb4-4df0-9363-1a01bc7490d5\",\r\n\t\t\t\"14\",\r\n\t\t\t\"4\",\r\n\t\t\t\"71\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1243686c-5eea-4d33-b2bf-25b7d34150be\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1\",\r\n\t\t\t\"79\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"e8b6a8ec-90aa-4636-9a7a-563418ca54fc\",\r\n\t\t\t\"15\",\r\n\t\t\t\"2\",\r\n\t\t\t\"98\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"c8f6c6f6-b66f-4a1d-8df2-ced6953e176d\",\r\n\t\t\t\"15\",\r\n\t\t\t\"3\",\r\n\t\t\t\"59\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"bc7b2c2e-1b32-4981-b9b1-713d6df8d43e\",\r\n\t\t\t\"15\",\r\n\t\t\t\"4\",\r\n\t\t\t\"74\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"8d23c31b-cd3b-48b6-978c-32061714cf5e\",\r\n\t\t\t\"16\",\r\n\t\t\t\"1\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"71b7d84a-6b59-4f7b-a2e0-92b2e7799a88\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2\",\r\n\t\t\t\"96\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2c4940bc-9775-4733-aec3-0599692a00e3\",\r\n\t\t\t\"16\",\r\n\t\t\t\"3\",\r\n\t\t\t\"33\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"66c29362-af06-4280-92cd-65ba393dd025\",\r\n\t\t\t\"16\",\r\n\t\t\t\"4\",\r\n\t\t\t\"9\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"d9771cde-0161-40c8-87ea-0e845d2d7f87\",\r\n\t\t\t\"17\",\r\n\t\t\t\"1\",\r\n\t\t\t\"11\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"59879668-5fa8-4ba7-a930-823c30426ccb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"2\",\r\n\t\t\t\"36\",\r\n\t\t\t\"20\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"5d187628-c118-4f45-aeba-c81328d33f0e\",\r\n\t\t\t\"17\",\r\n\t\t\t\"3\",\r\n\t\t\t\"56\",\r\n\t\t\t\"8\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"86216685-143a-402d-8d52-cccf76c8f949\",\r\n\t\t\t\"17\",\r\n\t\t\t\"4\",\r\n\t\t\t\"62\",\r\n\t\t\t\"8\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"dfc52e00-8a51-4f91-b0b3-a364697da9aa\",\r\n\t\t\t\"18\",\r\n\t\t\t\"1\",\r\n\t\t\t\"68\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"9b745a60-23af-4530-8a10-c002b4cf5061\",\r\n\t\t\t\"18\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"ed32ad4d-711e-4774-b83b-f98aa3e6c4fa\",\r\n\t\t\t\"18\",\r\n\t\t\t\"3\",\r\n\t\t\t\"79\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"d3f269e0-b77e-47e7-906d-554b93060ba6\",\r\n\t\t\t\"18\",\r\n\t\t\t\"4\",\r\n\t\t\t\"78\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"810e5db4-c7ca-466e-a9d7-cb7edde9e531\",\r\n\t\t\t\"19\",\r\n\t\t\t\"1\",\r\n\t\t\t\"60\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"34f406a9-60c6-4957-a644-4a9e16e52382\",\r\n\t\t\t\"19\",\r\n\t\t\t\"2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"6cf3bc95-85ff-499c-a1f4-84a565f4a4d2\",\r\n\t\t\t\"19\",\r\n\t\t\t\"3\",\r\n\t\t\t\"14\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"a125b0f7-a1b4-4be5-bbcd-50efffa8fbd3\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4\",\r\n\t\t\t\"70\",\r\n\t\t\t\"20\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"0e7688f7-7e7f-435b-bd86-fa541aa4eb13\",\r\n\t\t\t\"20\",\r\n\t\t\t\"1\",\r\n\t\t\t\"77\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"c7cb7363-9d1c-4080-82d7-ef302280baf1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"7008760c-5e8f-4d6f-9986-c47e8d2a23cb\",\r\n\t\t\t\"20\",\r\n\t\t\t\"3\",\r\n\t\t\t\"46\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"c371cb1e-c0f9-4129-8900-460fff2b58ff\",\r\n\t\t\t\"20\",\r\n\t\t\t\"4\",\r\n\t\t\t\"35\",\r\n\t\t\t\"20\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values after adding observation with out of bound values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a223b8e0-ba41-4e00-8417-a7e66caa4097",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "173edad3-303d-48f6-8177-759d749996f5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "585122b3-cbcc-4fea-b7a5-2810a0048c13",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/out-of-bounds\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ea90e6e-4497-46e0-a76c-316d9093cd41",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83549d42-9381-41ee-bbc5-b9c0f6ed1059",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/out-of-bounds\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ceab4d62-3f84-44b5-b877-83ba4968f66a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95a66b69-6137-47cd-9c31-31d2b2a20f82",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e33bdc82-9d5e-4625-a99d-6918edb88723",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "248e7ffd-4f25-4427-90a6-6ad777ea7191",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3469b6fc-33b3-4a01-b6b6-2945ab64a596",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad3dde25-1f1a-4e72-807e-6d8192e7341e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e29e271-5f32-4233-b230-deb8c8f1466a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8bb7d50-939f-4a55-9a18-4d5b806d4745",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a570fa4-1c91-4983-ba2b-55ef821fc960",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/filter​/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1cb69fae-f678-41e0-9d0c-98c8afdd6d54",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error messag\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/filter/acceptance\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9dfc0162-b43e-4dd1-98f0-6ac2bf88d48d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48eff4b2-a167-4ea1-80aa-ac5f823ee6eb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error messag\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/filter/acceptance\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1c958ae-7915-4e16-8d17-697441022080",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03212b0b-bb35-46c1-ae25-7969d14347da",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "915d7158-7b61-4423-868f-7e6293a4cd43",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17edfc84-78f7-4bfe-873b-67ff500ab0dd",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0adb164c-5a6e-415d-8863-eb6af7f22e22",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data for a non-existing variableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "168113cb-21ae-4397-83d2-b3c019f1efe3",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c85be77e-55fc-45d2-89f9-873f2d1abd8a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 99999,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b0b0b88-b379-438c-b749-2b5064228ec0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd7869f1-2272-47f1-aae6-1871dcfaa009",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 99999,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating filtered phenotype Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f051edf-ffaf-4078-a8ac-7417f9e61488",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.PestPressure_0_9.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c49fc374-3773-4b66-a335-905f638e9291",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Delete observation of catgorical variable in subobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65a7a91e-e5db-44d9-ac50-d61027f21b78",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation of catgorical variable in subobs\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41eb9367-7bb0-4866-b8c5-39f26b51900f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Add observation to categorical variable in subobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eadbbfbc-7f23-4c65-a3aa-d99ca226ab2f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ea0c89c8-7682-4fdc-94f6-f45f24be38c5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"QUADRAT_NO\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"PestPressure_0_9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"0b261507-54ce-4713-b3f2-709736761734\",\r\n\t\t\t\"1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"15\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"315fb141-03c0-4182-88f1-7a9c85f72328\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2\",\r\n\t\t\t\"50\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2d10c00d-4009-4e4e-951e-f7007a313af7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"3\",\r\n\t\t\t\"18\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"899d0d12-e86d-4b17-87ac-e281a94e92ec\",\r\n\t\t\t\"1\",\r\n\t\t\t\"4\",\r\n\t\t\t\"19\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"cfa758b5-9bb8-40dd-9054-0219feca641a\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1\",\r\n\t\t\t\"98\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69d0f45f-9b50-41e2-8d4a-6d1e819b338e\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1bfa2437-3b9a-4076-ab76-5a179cc15922\",\r\n\t\t\t\"2\",\r\n\t\t\t\"3\",\r\n\t\t\t\"34\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2595fc34-8297-4270-a08e-8ccfc7721cb5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"4\",\r\n\t\t\t\"60\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"638ca187-ee3d-4b04-9323-d1445beffe90\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"3cf8a747-33a1-4d67-aa3f-352a00613f00\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2\",\r\n\t\t\t\"61\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2c1272ee-9c14-46b4-a827-1cdc8f507467\",\r\n\t\t\t\"3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1d191e63-4cfa-473a-afbe-40f4be48c64b\",\r\n\t\t\t\"3\",\r\n\t\t\t\"4\",\r\n\t\t\t\"50\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"93580832-f751-453e-a6a2-f95f76b288cf\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1\",\r\n\t\t\t\"63\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"dbb7f2f6-e8cd-4870-a9b5-a3fc00ba12fa\",\r\n\t\t\t\"4\",\r\n\t\t\t\"2\",\r\n\t\t\t\"64\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1f26c682-785b-4ee6-842f-2f672ba882c9\",\r\n\t\t\t\"4\",\r\n\t\t\t\"3\",\r\n\t\t\t\"58\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"3bbe6c39-a1d6-4652-8bba-7b1723d6ecf5\",\r\n\t\t\t\"4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"43\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"964a445e-bcd2-4482-a1f0-67990a9845cd\",\r\n\t\t\t\"5\",\r\n\t\t\t\"1\",\r\n\t\t\t\"78\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"bd0e959a-cebf-4858-82ed-61433679de02\",\r\n\t\t\t\"5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"49\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"194e49cd-4a72-4337-b207-c0ad03924dc1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"3\",\r\n\t\t\t\"76\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"cfaf837f-508d-4b3c-8eb0-968439a92ad3\",\r\n\t\t\t\"5\",\r\n\t\t\t\"4\",\r\n\t\t\t\"87\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"33f3fd46-745e-40d0-99d4-abb86307c963\",\r\n\t\t\t\"6\",\r\n\t\t\t\"1\",\r\n\t\t\t\"28\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2ecbc964-212b-4d87-b6d6-8dd86869180c\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"0744db7c-e5f3-44c6-bcde-da6ef23261c6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"3\",\r\n\t\t\t\"21\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"0a864c70-4eb1-4111-9a05-25fc6159dd8a\",\r\n\t\t\t\"6\",\r\n\t\t\t\"4\",\r\n\t\t\t\"36\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"5d7a76f5-407e-45ad-9d3e-caccd110bfe0\",\r\n\t\t\t\"7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"5909e7a8-e402-4e76-b88d-bd152174fbca\",\r\n\t\t\t\"7\",\r\n\t\t\t\"2\",\r\n\t\t\t\"34\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"524bc770-e069-449b-9973-43efc938f351\",\r\n\t\t\t\"7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"16\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"70cba2b2-df16-42ad-99fd-b43e243cbfdc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"4\",\r\n\t\t\t\"11\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"9456f46a-72a4-4e2f-900e-26a4d056901a\",\r\n\t\t\t\"8\",\r\n\t\t\t\"1\",\r\n\t\t\t\"57\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"ab4c4997-f3ea-4a47-ad22-7c2cc73cd5cc\",\r\n\t\t\t\"8\",\r\n\t\t\t\"2\",\r\n\t\t\t\"77\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"b581068d-e240-4ba0-8df5-228fa2c2f4db\",\r\n\t\t\t\"8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"84\",\r\n\t\t\t\"17\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6e54de07-9b2e-4f88-9e31-28101efc2c5e\",\r\n\t\t\t\"8\",\r\n\t\t\t\"4\",\r\n\t\t\t\"92\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"8160083f-0c23-4cb6-824d-9b9bd7226437\",\r\n\t\t\t\"9\",\r\n\t\t\t\"1\",\r\n\t\t\t\"73\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"b682d671-e83f-4c90-aa92-e52184e6d72a\",\r\n\t\t\t\"9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"5bf2357a-b346-41bc-bad2-faba1e35994b\",\r\n\t\t\t\"9\",\r\n\t\t\t\"3\",\r\n\t\t\t\"86\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"7fe198f5-b983-4333-8615-9c801218ad61\",\r\n\t\t\t\"9\",\r\n\t\t\t\"4\",\r\n\t\t\t\"94\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"07126092-8b56-4d5e-8f98-118873f2463d\",\r\n\t\t\t\"10\",\r\n\t\t\t\"1\",\r\n\t\t\t\"46\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"9d1a3fa0-c20b-447b-8b10-bd48a269ff61\",\r\n\t\t\t\"10\",\r\n\t\t\t\"2\",\r\n\t\t\t\"9\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"d6c3a7cf-da8c-41be-8656-0312c86dac10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"3\",\r\n\t\t\t\"56\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"d6f29725-e27b-49ea-b2a4-0e8999189728\",\r\n\t\t\t\"10\",\r\n\t\t\t\"4\",\r\n\t\t\t\"27\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"fac0c26d-0dee-4d30-9a53-82d1d78c741f\",\r\n\t\t\t\"11\",\r\n\t\t\t\"1\",\r\n\t\t\t\"36\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"b634d60f-a7bd-4687-99fe-c92e5b067a90\",\r\n\t\t\t\"11\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"5a08eead-02c6-4146-9114-15d04fd5a9eb\",\r\n\t\t\t\"11\",\r\n\t\t\t\"3\",\r\n\t\t\t\"49\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"080603ca-d4ad-4406-9a70-180bffe645b0\",\r\n\t\t\t\"11\",\r\n\t\t\t\"4\",\r\n\t\t\t\"18\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"e6ce6248-4051-40eb-af4b-ecde2569c82a\",\r\n\t\t\t\"12\",\r\n\t\t\t\"1\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"fbf3a70f-1fd0-414a-ac4e-a0f180d4cbb3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2\",\r\n\t\t\t\"27\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48b392cb-3179-42c2-8321-05eb6c57afd4\",\r\n\t\t\t\"12\",\r\n\t\t\t\"3\",\r\n\t\t\t\"18\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2005942c-616e-4747-8ee8-0ad2f66966b6\",\r\n\t\t\t\"12\",\r\n\t\t\t\"4\",\r\n\t\t\t\"57\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"85d04aea-36cf-4b01-ba39-4ede2e9f5c71\",\r\n\t\t\t\"13\",\r\n\t\t\t\"1\",\r\n\t\t\t\"66\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"314a5e14-0bea-458c-b314-602654b36c21\",\r\n\t\t\t\"13\",\r\n\t\t\t\"2\",\r\n\t\t\t\"84\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"93ffeae1-8695-4b8d-94b7-1f59731b804b\",\r\n\t\t\t\"13\",\r\n\t\t\t\"3\",\r\n\t\t\t\"29\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"d683a7eb-d4d3-46f4-aef1-a9c20ed128ca\",\r\n\t\t\t\"13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"73\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36f04eb5-63e0-4d60-9a58-9d48e1c01f50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\",\r\n\t\t\t\"28\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"3cdd899e-55b0-4eac-ab3f-9f40a2626963\",\r\n\t\t\t\"14\",\r\n\t\t\t\"2\",\r\n\t\t\t\"7\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"af24c30b-e91f-4381-be65-34d7412f73b0\",\r\n\t\t\t\"14\",\r\n\t\t\t\"3\",\r\n\t\t\t\"46\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"f0059745-7bb4-4df0-9363-1a01bc7490d5\",\r\n\t\t\t\"14\",\r\n\t\t\t\"4\",\r\n\t\t\t\"71\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1243686c-5eea-4d33-b2bf-25b7d34150be\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1\",\r\n\t\t\t\"79\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"e8b6a8ec-90aa-4636-9a7a-563418ca54fc\",\r\n\t\t\t\"15\",\r\n\t\t\t\"2\",\r\n\t\t\t\"98\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"c8f6c6f6-b66f-4a1d-8df2-ced6953e176d\",\r\n\t\t\t\"15\",\r\n\t\t\t\"3\",\r\n\t\t\t\"59\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"bc7b2c2e-1b32-4981-b9b1-713d6df8d43e\",\r\n\t\t\t\"15\",\r\n\t\t\t\"4\",\r\n\t\t\t\"74\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"8d23c31b-cd3b-48b6-978c-32061714cf5e\",\r\n\t\t\t\"16\",\r\n\t\t\t\"1\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"71b7d84a-6b59-4f7b-a2e0-92b2e7799a88\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2\",\r\n\t\t\t\"96\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2c4940bc-9775-4733-aec3-0599692a00e3\",\r\n\t\t\t\"16\",\r\n\t\t\t\"3\",\r\n\t\t\t\"33\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"66c29362-af06-4280-92cd-65ba393dd025\",\r\n\t\t\t\"16\",\r\n\t\t\t\"4\",\r\n\t\t\t\"9\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"d9771cde-0161-40c8-87ea-0e845d2d7f87\",\r\n\t\t\t\"17\",\r\n\t\t\t\"1\",\r\n\t\t\t\"11\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"59879668-5fa8-4ba7-a930-823c30426ccb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"2\",\r\n\t\t\t\"36\",\r\n\t\t\t\"20\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"5d187628-c118-4f45-aeba-c81328d33f0e\",\r\n\t\t\t\"17\",\r\n\t\t\t\"3\",\r\n\t\t\t\"56\",\r\n\t\t\t\"8\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"86216685-143a-402d-8d52-cccf76c8f949\",\r\n\t\t\t\"17\",\r\n\t\t\t\"4\",\r\n\t\t\t\"62\",\r\n\t\t\t\"8\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"dfc52e00-8a51-4f91-b0b3-a364697da9aa\",\r\n\t\t\t\"18\",\r\n\t\t\t\"1\",\r\n\t\t\t\"68\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"9b745a60-23af-4530-8a10-c002b4cf5061\",\r\n\t\t\t\"18\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"ed32ad4d-711e-4774-b83b-f98aa3e6c4fa\",\r\n\t\t\t\"18\",\r\n\t\t\t\"3\",\r\n\t\t\t\"79\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"d3f269e0-b77e-47e7-906d-554b93060ba6\",\r\n\t\t\t\"18\",\r\n\t\t\t\"4\",\r\n\t\t\t\"78\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"810e5db4-c7ca-466e-a9d7-cb7edde9e531\",\r\n\t\t\t\"19\",\r\n\t\t\t\"1\",\r\n\t\t\t\"60\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"34f406a9-60c6-4957-a644-4a9e16e52382\",\r\n\t\t\t\"19\",\r\n\t\t\t\"2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"6cf3bc95-85ff-499c-a1f4-84a565f4a4d2\",\r\n\t\t\t\"19\",\r\n\t\t\t\"3\",\r\n\t\t\t\"14\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"a125b0f7-a1b4-4be5-bbcd-50efffa8fbd3\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4\",\r\n\t\t\t\"70\",\r\n\t\t\t\"20\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"0e7688f7-7e7f-435b-bd86-fa541aa4eb13\",\r\n\t\t\t\"20\",\r\n\t\t\t\"1\",\r\n\t\t\t\"77\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"c7cb7363-9d1c-4080-82d7-ef302280baf1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"7008760c-5e8f-4d6f-9986-c47e8d2a23cb\",\r\n\t\t\t\"20\",\r\n\t\t\t\"3\",\r\n\t\t\t\"46\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"c371cb1e-c0f9-4129-8900-460fff2b58ff\",\r\n\t\t\t\"20\",\r\n\t\t\t\"4\",\r\n\t\t\t\"35\",\r\n\t\t\t\"20\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b74b831-4e2b-4f0d-a156-9eba8be70e66",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e63b6d26-1703-403d-ae75-cb9467bff98b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ffc6000-5b8c-4192-a4b4-2f11f3f7d220",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/set-as-missing\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b5d93736-051e-4f6d-83c3-20426ce98d56",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5888f862-07fb-4b30-9441-1d6056e5af51",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/set-as-missing\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6812f19e-5d9f-436e-8689-d42128ff4d13",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a20373c-dbec-4860-a814-2279c0e1ea3a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19ccaa46-1189-4303-8c56-bf161d2fb08a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2169bdb-2c36-4316-8f0b-3651e0163bca",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "25808065-46ea-41c2-847f-8fc11a4c3b4a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7715807b-7c32-4887-ad80-cfdba2151a5b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "93acc68f-31db-401f-99fd-3e0815586f51",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating filtered phenotype",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be85c034-2853-4d67-8ba8-681d4f334099",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.PestPressure_0_9.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d42a58d1-6bc3-4d91-a756-6db659e45aa5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Delete observation of catgorical variable with missing values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8a0acba-7f0c-413b-8957-62724ddf77bc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation of catgorical variable with missing values\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "869498c7-82e3-4a55-89b2-97f9c336c164",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9363ffd7-0579-4d63-8c71-a7a2efadfdd5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7f853d47-e203-4daf-aae2-2336f2a2adea",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}
{
	"info": {
		"_postman_id": "f6971550-fb3f-4449-b4bc-2a47c5f27194",
		"name": "BMSAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication-controller-brapi",
			"item": [
				{
					"name": "Get admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b25d9ca-58f5-43f7-8ca7-8c8255a24e18",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"masterToken\");",
									"pm.environment.set(\"masterToken\", jsonData.access_token);",
									"pm.environment.unset(\"masterTokenExpiry\");",
									"pm.environment.set(\"masterTokenExpiry\", jsonData.expires_in);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{bms_user}}\",\r\n  \"password\": \"{{bms_password}}\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get test user token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37881cd3-56b9-4dc7-9aaf-bd5e7f162b00",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"testuser_token\");",
									"pm.environment.set(\"testuser_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"apitestuser\",\r\n  \"password\": \"apitestuser\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ontology-get-services",
			"item": [
				{
					"name": "GET /crops/{cropname}/methods",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c6cf1a6-fb2e-4621-a13f-24e0facfd305",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Note: Checked details of first, middle and last method only for all methods are too many.",
									"pm.test(\"Check applied method\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"4020\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Applied\");",
									"    pm.expect(jsonData[0].description).to.eql(\"Factor applied\");",
									"});",
									"",
									"",
									"pm.test(\"Check Method for MSE method\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[40].id).to.eql(\"4360\");",
									"    pm.expect(jsonData[40].name).to.eql(\"Method for MSE\");",
									"    pm.expect(jsonData[40].description).to.eql(\"Method for Mean square error statistic\");",
									"});",
									"",
									"",
									"pm.test(\"Check weighed method\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[86].id).to.eql(pm.environment.get(\"weighed_method_id\"));",
									"    pm.expect(jsonData[86].name).to.eql(\"Weighed\");",
									"    pm.expect(jsonData[86].description).to.eql(\"Weighing method\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "100fa449-d4b9-4815-b95b-d437c5b17769",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crop/{cropname}/methods/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aefbdea7-aa63-4c5f-ad67-ea354cf80661",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Check method id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"weighed_method_id\"));",
									"});",
									"pm.test(\"Check method name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Weighed\");",
									"});",
									"pm.test(\"Check method description\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"Weighing method\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bb92b81e-ffde-4c9b-b7a7-02a237e2aba9",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods/{{weighed_method_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods",
								"{{weighed_method_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e96dc7cd-3e5d-4490-b2a9-8046c1cdb81a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Note: Checked details of first, middle and last property only for all properties are too many.",
									"pm.test(\"Check altitude property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"2260\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Altitude\");",
									"    pm.expect(jsonData[0].description).to.eql(\"Altitude\");",
									"});",
									"",
									"",
									"pm.test(\"Check micronutrient property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[78].id).to.eql(\"2440\");",
									"    pm.expect(jsonData[78].name).to.eql(\"Micronutrient\");",
									"    pm.expect(jsonData[78].description).to.eql(\"Micronutrient\");",
									"});",
									"",
									"",
									"pm.test(\"Check trial instance property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[162].id).to.eql(\"2100\");",
									"    pm.expect(jsonData[162].name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData[162].description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c54f696-1eb6-4134-97f1-35cb60eed79f",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/properties/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c08831c-0ca2-4d97-8b1f-afc363ed5a81",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check trial instance property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"2100\");",
									"    pm.expect(jsonData.name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData.description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "584cada2-7e77-49a2-a3ae-3c2f1146eeac",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties/{{trial_instance_property_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties",
								"{{trial_instance_property_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/scales",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6706c6e9-4ab7-4a59-a69d-5bd7ecfd3075",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Note: Checked details of first, middle and last property only for all properties are too many.",
									"pm.test(\"Check accession name scale\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"6110\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Accession name\");",
									"    pm.expect(jsonData[0].description).to.eql(\"Unique accession number or name in a genebank or germplasm collection\");",
									"});",
									"",
									"",
									"pm.test(\"Check LOC_ABBR scale\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[41].id).to.eql(\"6016\");",
									"    pm.expect(jsonData[41].name).to.eql(\"LOC_ABBR\");",
									"    pm.expect(jsonData[41].description).to.eql(\"Location abbreviation (from LOCATION.LABBR)\");",
									"});",
									"",
									"",
									"pm.test(\"Check type scale\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[82].id).to.eql(\"6070\");",
									"    pm.expect(jsonData[82].name).to.eql(\"Type\");",
									"    pm.expect(jsonData[82].description).to.eql(\"Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ab768848-25b8-47a2-b25c-9ff945b6f683",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/scales?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"scales"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/scales/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "549b073c-06ed-4e82-ae88-dff7905eb1f8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check number scale\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"6040\");",
									"    pm.expect(jsonData.name).to.eql(\"Number\");",
									"    pm.expect(jsonData.description).to.eql(\"Number\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5c12dd47-f185-4ff3-9dac-fff03a88d2a0",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/scales/{{number_scale_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"scales",
								"{{number_scale_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /crops/{cropname}/variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1c86299-8dac-4021-83b9-a3fd1206def7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Note: Checked details of first, middle and last property only for all properties are too many.",
									"pm.test(\"Check TRIAL_CODE variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"8185\");",
									"    pm.expect(jsonData[0].name).to.eql(\"TRIAL_CODE\");",
									"    pm.expect(jsonData[0].description).to.eql(\"Trial code - assigned (text)\");",
									"    //Check properties",
									"    pm.expect(jsonData[0].property.id).to.eql(\"2100\");",
									"    pm.expect(jsonData[0].property.name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData[0].property.description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"    ",
									"    //Check method",
									"    pm.expect(jsonData[0].method.id).to.eql(\"4030\");",
									"    pm.expect(jsonData[0].method.name).to.eql(\"Assigned\");",
									"    pm.expect(jsonData[0].method.description).to.eql(\"Term, name or id assigned\");    ",
									"    ",
									"   //Check scale",
									"    pm.expect(jsonData[0].scale.id).to.eql(\"6020\");",
									"    pm.expect(jsonData[0].scale.name).to.eql(\"Text\");",
									"    pm.expect(jsonData[0].scale.description).to.eql(\"Text\");    ",
									"    ",
									"    ",
									"   //Check variableTypes",
									"    pm.expect(jsonData[0].variableTypes[0].id).to.eql(\"1806\");",
									"    pm.expect(jsonData[0].variableTypes[0].name).to.eql(\"Environment Detail\");",
									"    pm.expect(jsonData[0].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   ",
									"    ",
									"    pm.expect(jsonData[0].variableTypes[1].id).to.eql(\"1805\");",
									"    pm.expect(jsonData[0].variableTypes[1].name).to.eql(\"Study Detail\");",
									"    pm.expect(jsonData[0].variableTypes[1].description).to.eql(\"Administrative details to be tracked per study.\");   ",
									"    ",
									"});",
									"",
									"pm.test(\"Check TRIAL_INSTANCE variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].id).to.eql(\"8170\");",
									"    pm.expect(jsonData[1].name).to.eql(\"TRIAL_INSTANCE\");",
									"    pm.expect(jsonData[1].description).to.eql(\"Trial instance - enumerated (number)\");",
									"    //Check properties",
									"    pm.expect(jsonData[1].property.id).to.eql(\"2100\");",
									"    pm.expect(jsonData[1].property.name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData[1].property.description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"    ",
									"    //Check method",
									"    pm.expect(jsonData[1].method.id).to.eql(\"4040\");",
									"    pm.expect(jsonData[1].method.name).to.eql(\"Enumerated\");",
									"    pm.expect(jsonData[1].method.description).to.eql(\"Levels enumerated - 1,2,3\");    ",
									"    ",
									"   //Check scale",
									"    pm.expect(jsonData[1].scale.id).to.eql(\"6040\");",
									"    pm.expect(jsonData[1].scale.name).to.eql(\"Number\");",
									"    pm.expect(jsonData[1].scale.description).to.eql(\"Number\");    ",
									"    ",
									"    ",
									"   //Check variableTypes",
									"    pm.expect(jsonData[1].variableTypes[0].id).to.eql(\"1806\");",
									"    pm.expect(jsonData[1].variableTypes[0].name).to.eql(\"Environment Detail\");",
									"    pm.expect(jsonData[1].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   ",
									"    ",
									"    pm.expect(jsonData[1].variableTypes[0].id).to.eql(\"1806\");",
									"    pm.expect(jsonData[1].variableTypes[0].name).to.eql(\"Environment Detail\");",
									"    pm.expect(jsonData[1].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   ",
									"    ",
									"});",
									"",
									"pm.test(\"Check Trial_Type variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[2].id).to.eql(\"8670\");",
									"    pm.expect(jsonData[2].name).to.eql(\"Trial_Type\");",
									"    pm.expect(jsonData[2].description).to.eql(\"Code for trial type or series\");",
									"    //Check properties",
									"    pm.expect(jsonData[2].property.id).to.eql(\"2100\");",
									"    pm.expect(jsonData[2].property.name).to.eql(\"Trial instance\");",
									"    pm.expect(jsonData[2].property.description).to.eql(\"Identifier for an individual experiment ina multi environemt trial\");",
									"    ",
									"    //Check method",
									"    pm.expect(jsonData[2].method.id).to.eql(\"4030\");",
									"    pm.expect(jsonData[2].method.name).to.eql(\"Assigned\");",
									"    pm.expect(jsonData[2].method.description).to.eql(\"Term, name or id assigned\");    ",
									"    ",
									"    ",
									"   //Check scale",
									"    pm.expect(jsonData[2].scale.id).to.eql(\"17280\");",
									"    pm.expect(jsonData[2].scale.name).to.eql(\"Code of Trial_Type\");",
									"    pm.expect(jsonData[2].scale.description).to.eql(\"Code of Trial_Type_generated\");    ",
									"    ",
									"    ",
									"   //Check variableTypes",
									"    pm.expect(jsonData[2].variableTypes[0].id).to.eql(\"1806\");",
									"    pm.expect(jsonData[2].variableTypes[0].name).to.eql(\"Environment Detail\");",
									"    pm.expect(jsonData[2].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   ",
									"    ",
									"    pm.expect(jsonData[2].variableTypes[1].id).to.eql(\"1805\");",
									"    pm.expect(jsonData[2].variableTypes[1].name).to.eql(\"Study Detail\");",
									"    pm.expect(jsonData[2].variableTypes[1].description).to.eql(\"Administrative details to be tracked per study.\");   ",
									"    ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b2617a6a-d8d9-4f8c-9919-b6695bfbbcfa",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables?property={{trial_instance_property_id}}&favourite=false&programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables"
							],
							"query": [
								{
									"key": "property",
									"value": "{{trial_instance_property_id}}"
								},
								{
									"key": "favourite",
									"value": "false"
								},
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /ontology/{cropname}/variables/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1778e65b-6c1e-4c17-a948-87cdd1b48598",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check biomass_yield variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"18010\");",
									"    pm.expect(jsonData.name).to.eql(\"Biomas_yield\");",
									"    pm.expect(jsonData.description).to.eql(\"Biomas - dry and weigh (t/ha)\");",
									"    ",
									"   ",
									"    pm.expect(jsonData.property.id).to.eql(\"15010\");",
									"    pm.expect(jsonData.property.name).to.eql(\"Biomass\");",
									"    pm.expect(jsonData.property.description).to.eql(\"Biomass\"); ",
									"    ",
									"    pm.expect(jsonData.method.id).to.eql(\"16000\");",
									"    pm.expect(jsonData.method.name).to.eql(\"Dry and weigh\");",
									"    pm.expect(jsonData.method.description).to.eql(\"Dry and weigh\"); ",
									"    ",
									"    pm.expect(jsonData.scale.id).to.eql(\"17010\");",
									"    pm.expect(jsonData.scale.name).to.eql(\"t/ha\");",
									"    pm.expect(jsonData.scale.description).to.eql(\"Tonnesper hectare\"); ",
									"    pm.expect(jsonData.scale.dataType.name).to.eql(\"Numeric\");",
									"    ",
									"    pm.expect(jsonData.variableTypes[0].id).to.eql(\"1808\");",
									"    pm.expect(jsonData.variableTypes[0].name).to.eql(\"Trait\");",
									"    pm.expect(jsonData.variableTypes[0].description).to.eql(\"Characteristics of a germplasm to be recorded during a study.\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5123c54e-4b10-4848-8e0f-59735d133f10",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/{{study_biomass_cvterm_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"{{study_biomass_cvterm_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "study-resource",
			"item": [
				{
					"name": "GET ​/crops​/{cropName}​/programs​/{programUUID}​/studies​/{studyId}​/sampled",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs to study with samples",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6f3ec89-e1e6-49ac-a15e-8322218513ba",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned boolean value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b6d820b7-c077-4e77-ad34-40e128da5148",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/sampled",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"sampled"
									]
								},
								"description": "GET /crops​/{cropName}​/programs​/{programUUID}​/studies​/{studyId}​/sampled"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs to study with no samples",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "478c6fc5-329c-4a7f-a8d3-93a3b33e679d",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned boolean value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0131a6d-06a3-4a98-9bfb-2f153db3e4e2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{locked_studyId}}/sampled",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{locked_studyId}}",
										"sampled"
									]
								},
								"description": "GET /crops​/{cropName}​/programs​/{programUUID}​/studies​/{studyId}​/sampled"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "dataset-resource",
			"item": [
				{
					"name": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/instances",
					"item": [
						{
							"name": "Verify response code and body when entered valid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23b65132-ff7c-41b3-9583-a29acf2f0463",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"//    pm.environment.unset(\"study_instanceId\");",
											"//    pm.environment.set(\"study_instanceId\", jsonData[0].instanceDbId);",
											" ",
											"pm.test(\"Check locationName\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].locationName).to.eql(\"Africa Rice Centre\");",
											"});",
											"",
											"pm.test(\"Check locationAbbreviation\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].locationAbbreviation).to.eql(\"WARDA\");",
											"});",
											"pm.test(\"Check instanceNumber\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].instanceNumber).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5afda0e-a441-42be-ae41-ff9e728ce9cc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6fd434b-d91a-4a8a-9468-5e1e361faf42",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/instances\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7fb2bf2-f76d-4aae-aeb7-2af3e4e50911",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "228832f8-1c6b-4cf7-b793-94217b23e7ef",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/testdata/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/instances\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1dfd8ba7-9f5b-44f9-b8a0-7b86e3000f57",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aea82eb2-818d-48f4-af8d-addfc6549ee8",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d96745d8-b198-4837-8a4a-36fd08749c7b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}//programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3eb4719a-9279-4211-b4e2-99962876ac54",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "99eb64cd-dbdf-47a3-aa1f-3b5b1f5bdaff",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that is not associated to the studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98722a73-b092-46f3-98f5-0bb0c5047922",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+ pm.environment.get(\"locked_study_subobs_datasetId\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f20142a-48df-4292-923e-04a7eb7531a0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{locked_study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{locked_study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f1f7d18-d028-469c-8044-36f4bcbfe24d",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69742054-3bca-4e5a-bd7c-d4e2180ea375",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_subobs_datasetId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85f59a08-779c-4575-87e3-294d0f2bb151",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "208ca5f1-2357-4c89-9e3d-a6e26f23c4d2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"instances"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/instances"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{crop}/programs​/{programUUID}​/studies/{studyId}/datasets",
					"item": [
						{
							"name": "Verify response code and body when entered crop and studyId only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edc5e483-5f0c-406f-a629-c91e55e875d1",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check env dataset id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.equal(parseInt(pm.environment.get(\"study_env_id\")));",
											"});",
											"pm.test(\"Check env plot dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[1].datasetId).to.eql(parseInt(pm.environment.get(\"study_plot_datasetId\")));",
											"});",
											"pm.test(\"Check subobs dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[2].datasetId).to.eql(parseInt(pm.environment.get(\"study_subobs_datasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "60fb2ae6-c66c-49cd-a440-586f6e3ff9ae",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f33fd29-420e-432f-80a1-b4f083979345",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e356a5a9-c3e0-4d04-bca0-4cfe38709a9e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70e81787-fbba-4701-b0b4-18ffaecf6097",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b40cd37b-2418-4429-8340-269ec22ae6d7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49b6251e-ee2b-415d-8413-aece6eca4766",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af7124c5-5c6d-4021-9e9f-324b7d758024",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered multiple datasetTypeIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5f10822-0fa0-4822-8f75-4f45d7a6e097",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check env dataset id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.equal(parseInt(pm.environment.get(\"study_env_id\")));",
											"});",
											"pm.test(\"Check env plot dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[1].datasetId).to.eql(parseInt(pm.environment.get(\"study_plot_datasetId\")));",
											"});",
											"pm.test(\"Check subobs dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[2].datasetId).to.eql(parseInt(pm.environment.get(\"study_subobs_datasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebcd9faf-c3cd-47df-96a1-ce6a0340a8b6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{env_datasetTypeId}}, {{plot_datasetTypeId}},{{plant_subobs_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{env_datasetTypeId}}, {{plot_datasetTypeId}},{{plant_subobs_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered environment datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02b11faa-0c0d-43c0-8ebc-c672d75194e8",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check env dataset id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.equal(parseInt(pm.environment.get(\"study_env_id\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4a01330-f149-457d-9b81-17846ba3f382",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{env_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{env_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered plot datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ca5b33b-f97b-46ff-b438-44b944d78d19",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check env plot dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.eql(parseInt(pm.environment.get(\"study_plot_datasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a34bbe51-c4cb-4894-a538-80f0b890f371",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{plot_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{plot_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered means datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cb2d226-80c3-4403-917e-39397d73e933",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check means dataset id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.equal(parseInt(pm.environment.get(\"trialMeansDatasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1db7d3d7-7b49-4519-b103-8b79734e00c1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets?datasetTypeIds={{means_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{means_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered subobs datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b5f1a68-46e8-46a4-aa21-12f6a50d4263",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check subobs dataset id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].datasetId).to.eql(parseInt(pm.environment.get(\"study_subobs_datasetId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d4fac3a3-6e13-421c-9790-5160d9fc5348",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{plant_subobs_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{plant_subobs_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8251b5b4-143c-49ce-907c-430fb02ed465",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32852f20-e796-4a0e-881e-9ef8f08d5593",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to  datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11f3273e-9c28-4ad5-a3bd-639683e24548",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef7a21f5-1637-4807-9f48-b8e77f86a2e9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid  datasetTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44a36a45-2a78-4d25-9ed4-9ae519516408",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"//Add other assertions here",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"9,999 is not a valid dataset type\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d5396a05-9741-4ad6-9d4c-852e88256c78",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets?datasetTypeIds={{non_existing_datasetTypeId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets"
									],
									"query": [
										{
											"key": "datasetTypeIds",
											"value": "{{non_existing_datasetTypeId}}"
										}
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET/{crop}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}",
					"item": [
						{
							"name": "Verify response code and body when entered of environment datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8b4bcbe-beb8-4bb8-8774-0b67ec034c71",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.studyId).to.eql(studyId);",
											"});",
											"pm.test(\"Verify returned datasetId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var datasetId = Number(pm.environment.get(\"study_env_id\"));",
											"    pm.expect(jsonData.datasetId).to.eql(datasetId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a39dc52d-77a7-4b6a-afbf-6ac92f2387db",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_env_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_env_id}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered of plot datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79fcdbd4-2fea-4027-b981-883098bc2d47",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.studyId).to.eql(studyId);",
											"});",
											"pm.test(\"Verify returned datasetId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var datasetId = Number(pm.environment.get(\"study_plot_datasetId\"));",
											"    pm.expect(jsonData.datasetId).to.eql(datasetId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d2006be3-c73b-4349-8ec6-2f6ff5e18751",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered of sub-observation datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "339289ef-e086-4149-abb8-96b827ae985f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.studyId).to.eql(studyId);",
											"});",
											"pm.test(\"Verify returned datasetId\", function () {",
											"    var jsonData = pm.response.json();",
											"    var datasetId = Number(pm.environment.get(\"study_subobs_datasetId\"));",
											"    pm.expect(jsonData.datasetId).to.eql(datasetId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c3851ea-0722-45b6-bdde-bf519ba0c781",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered of means datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2befa7e8-592f-48cb-b92a-5b9a56767a6c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Other assertions to follow"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0125b4c4-a053-4b92-aa23-1da8ac29a7e5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets/{{trialMeansDatasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets",
										"{{trialMeansDatasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f1f3de7-d432-4f5e-82e8-326b998e3c76",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "07d2c9f5-8d91-489f-92e8-7ddcc7ac48ff",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "651f0560-ba9d-44bd-8bf7-e68bd232b900",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ae6ddede-ba8a-45ba-84ee-82521fba71f9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9321aad2-933e-405b-97f0-5bba5d84b918",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e4549199-8160-4f83-97da-f23b723b1fe3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86725a68-f43c-4f60-b540-b20c38e336d0",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"//    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e8f722f5-ee6e-4be9-8f11-027ab8042db4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b45f8c44-4ddc-4e67-9647-58b1927a5bfa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d072f645-091f-4dfb-ad5b-c40a7ebe7e41",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "421bd784-783f-4df6-a221-9561ba98e407",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"//    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e24c4a4a-bd84-4470-9527-66de16c9b663",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_subobs_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_subobs_datasetId}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cab739e5-062a-47db-bc59-677c76f88734",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify returned studyId\", function () {",
											"    var jsonData = pm.response.json();",
											"//    var studyId = Number(pm.environment.get(\"studyId\"));",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "44bc46d7-bd82-46da-af92-c90dd2355828",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}"
									]
								},
								"description": "GET/{crop}/studies/{studyId}/datasets/{datasetId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HEAD ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{instanceId}",
					"item": [
						{
							"name": "Retrieve phenotype counts for a plot dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a363093-a3ee-41c9-96f2-58501f652022",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"80\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ec1aef50-333e-4dce-8463-dd75cbc22675",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Retrieve phenotype counts for a subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a421bf2e-c8ef-4f88-b448-1d2094f8d730",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"110\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "11264043-0cb9-415e-8459-cd3a80f7ea2e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and phenotype count for a dataset with no existing phenotypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de15f316-d9e4-4a76-999b-c51e7f743d86",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"0\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "51750198-b198-4df6-a401-993c814b2923",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId_noPhenoCount}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observationUnits/{{study_noPheno_instandId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId_noPhenoCount}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observationUnits",
										"{{study_noPheno_instandId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Retrieve phenotype counts for a plot dataset with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "682df6e3-fd44-44a6-8066-f412cf614013",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71a35ed6-1053-435e-aaf4-abc8a592cbba",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Retrieve phenotype counts for a plot dataset with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ef1fb93-7adb-4001-a6a8-1a3b705b8ccf",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4e73dd85-7106-4955-9b22-ee7cd895bba6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78b71633-37e6-459c-bb6f-413dc76f7c97",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71ebf990-b82a-447d-bb4c-7285daa332f8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce6edc99-33ea-4c30-a542-486f15b1279b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a4a91daf-c4cf-491a-9a0b-4bbafd9b460a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a371743-df5b-4f2e-b1f1-80e5529dcd67",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f854686a-94cb-4682-8b46-c240a382069e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered invalid studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9b4fdc5-f39e-452b-8d33-f43afe1aced9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a7a88c0-3bd7-4f6f-b845-7df74f240ef0",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(",
											"            { ",
											"                \"username\": \"admin\",",
											"                \"password\": \"@dm1N\",",
											"                \"grant_type\": \"\",",
											"                \"client_id\": \"\"",
											"            ",
											"        })",
											"    }",
											"}, function (err, res) {",
											"    var jsonData = res.json();",
											"    pm.environment.set(\"masterToken\",jsonData.access_token);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{invalid_studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{invalid_studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered invalid datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90242ceb-73fa-483b-b723-bc39913f3ced",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5681031-64bd-4fdc-bd6a-306559863523",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{studyId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{studyId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered invalid instanceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad7f4e43-46e4-41fc-8173-b635a92bec7f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad027ac0-6d9c-4e8b-8da3-a657b6c0a8d4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{studyId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{studyId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00533711-9e4e-45d4-9cde-840c2ff654af",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "99930d8f-eee2-43e1-a5d2-6c1475a7ad9b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_plot_datasetId}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38f498dc-cd42-4472-b03e-d03c51769721",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f147fa65-0a68-4aa9-93bb-68d8f8ccbb34",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/observationUnits/{{study_instanceId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"observationUnits",
										"{{study_instanceId}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code when entered string input to instanceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0d1a49b-3b56-4d8b-96dd-554808a3ab85",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c9adcdd7-a203-42ed-a453-d5b48fcbdf07",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{string_input}}"
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/{instanceId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET/crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns",
					"item": [
						{
							"name": "Verify response code and body when entered valid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8d15617-b4b4-4698-a179-ccae1e183a4c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check TRIAL INSTANCE term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].termId).to.equal(8170);",
											"    pm.expect(jsonData[0].name).to.equal(\"TRIAL_INSTANCE\");",
											"});",
											"",
											"pm.test(\"Check ENTRY TYPE term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[1].termId).to.equal(8255);",
											"    pm.expect(jsonData[1].name).to.equal(\"ENTRY_TYPE\");",
											"});",
											"",
											"pm.test(\"Check GID term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[2].termId).to.equal(8240);",
											"    pm.expect(jsonData[2].name).to.equal(\"GID\");",
											"});",
											"",
											"pm.test(\"Check DESIGNATION term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[3].termId).to.equal(8250);",
											"    pm.expect(jsonData[3].name).to.equal(\"DESIGNATION\");",
											"});",
											"",
											"pm.test(\"Check ENTRY_NO term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[4].termId).to.equal(8230);",
											"    pm.expect(jsonData[4].name).to.equal(\"ENTRY_NO\");",
											"});",
											"",
											"pm.test(\"Check OBS_UNIT_ID term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[5].termId).to.equal(8201);",
											"    pm.expect(jsonData[5].name).to.equal(\"OBS_UNIT_ID\");",
											"});",
											"",
											"",
											"pm.test(\"Check PLOT_NO term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[6].termId).to.equal(8200);",
											"    pm.expect(jsonData[6].name).to.equal(\"PLOT_NO\");",
											"});",
											"",
											"pm.test(\"Check PLANT_NO term id and name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[7].termId).to.equal(8206);",
											"    pm.expect(jsonData[7].name).to.equal(\"PLANT_NO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5686831-348f-481f-8f7a-c3c8d76b6069",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d177b95-b328-481b-9411-d750220677a4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/observationUnits/table/columns\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22145e5d-f184-4abd-ae17-cf371e4a23fa",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20a2d91a-8c7d-4f6a-be11-a0c76238f9b8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/observationUnits/table/columns\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e70e2bf-85eb-40fb-8cd2-55510770c1c0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3a45942-9f86-4eca-931c-ff92bf27a572",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8fed1190-ca16-4326-8df4-692e21eedba4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "004509c9-0af9-4f30-b4f2-1ee7efdb5b90",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f77c8aee-7796-4263-b733-b09b7441fa86",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that is not associated to the studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5eb97109-350f-486c-9670-cafe18380f02",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+ pm.environment.get(\"locked_study_subobs_datasetId\")+ \" does not belong to the study \"+ pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "58304213-7d5d-43c4-bfcc-ec1ddbf8db07",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{locked_study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{locked_study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da543d09-8840-4a1c-baec-6a138fe7b51c",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a61b9e0-5565-4e82-b020-a9c93fbf4106",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_subobs_datasetId}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8942cc22-3e78-4b30-8afd-e960373a62be",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2409575c-d207-4d38-9128-10cf2773604f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/observationUnits/table/columns",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"observationUnits",
										"table",
										"columns"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/observationUnits/table/columns"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables​/{variableTypeId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs and trait variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d164527c-48f2-4133-8d28-6ea0d1d32326",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(18100);",
											"    pm.expect(jsonData[1].id).to.equal(18000);",
											"    pm.expect(jsonData[2].id).to.equal(18010);",
											"});",
											"",
											"pm.test(\"Check returned variable names\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"WeedPressure_number\");",
											"    pm.expect(jsonData[1].name).to.equal(\"Grain_yield\");",
											"    pm.expect(jsonData[2].name).to.equal(\"Biomas_yield\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "290808b9-a66f-4f8b-be4c-3b74096c0821",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs and environment detail variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b13c11a-7e6d-4435-961f-17887c0530ea",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(8170);",
											"});",
											"",
											"pm.test(\"Check returned variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"TRIAL_INSTANCE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "61f97a61-d8c6-4fa3-aa79-81d620939303",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{variableTypeId_env_detail}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{variableTypeId_env_detail}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs and experimental design variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8554ceaf-159f-4be2-a579-a07886a1319d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(8200);",
											"});",
											"",
											"pm.test(\"Check returned variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"PLOT_NO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "beb5e434-4cfa-4f2e-af4e-2720a428f5c8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{variableTypeId_exp_design}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{variableTypeId_exp_design}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs and germplasm descriptor variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a4d1541-5f75-41f2-aaf4-73a80a15d2cb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(8255);",
											"    pm.expect(jsonData[1].id).to.equal(8240);",
											"    pm.expect(jsonData[2].id).to.equal(8250);",
											"    pm.expect(jsonData[3].id).to.equal(8230);",
											"    pm.expect(jsonData[4].id).to.equal(8201);",
											"});",
											"",
											"pm.test(\"Check returned variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"ENTRY_TYPE\");",
											"    pm.expect(jsonData[1].name).to.equal(\"GID\");",
											"    pm.expect(jsonData[2].name).to.equal(\"DESIGNATION\");",
											"    pm.expect(jsonData[3].name).to.equal(\"ENTRY_NO\");",
											"    pm.expect(jsonData[4].name).to.equal(\"OBS_UNIT_ID\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dfb25f00-bf1b-4b60-958e-d2fd550313bc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{variableTypeId_germ_desc}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{variableTypeId_germ_desc}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid inputs and observation units variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "343e6dbe-04cd-4fea-8159-6f608a326a58",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned variable id\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.equal(8206);",
											"});",
											"",
											"pm.test(\"Check returned variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.equal(\"PLANT_NO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0dbb1f50-1776-41e5-930b-af6f14c8de33",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables/{{variableTypeId_obs_unit}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables",
										"{{variableTypeId_obs_unit}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce3ba7eb-48ce-4228-8f0a-34b9874b71a2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/variables/\"+pm.environment.get(\"Trait_cvtermId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "16ac80cb-0d46-4a38-8224-15d999711510",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f26f6c1c-b438-454a-a7ab-a44497189ee4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/variables/\"+pm.environment.get(\"Trait_cvtermId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "503a6a08-2e42-48c1-a465-534119d36a53",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0937ede4-e77f-4b07-b9b3-6759553cf767",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "40a6cff4-2c4f-4ea5-80f3-310989d1b893",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48719a01-7308-4e49-9b80-8f20f1a27717",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ef16488-3c25-4981-a564-ae9496e2430e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64683e1e-c043-4be9-ad9c-5feb27d91529",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "14e7c731-7f99-4ce5-9e91-59f511789a6d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "237ca2b1-0dc6-4900-859d-ff68d64ed2d4",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "73a52c32-02f4-4265-a03b-905fcc2259d5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_plot_datasetId}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "147e8efe-c3eb-4896-bfa1-29a03046dbbb",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f60cff0f-5f71-40cd-84f2-6521a28dc837",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/variables/{{Trait_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"variables",
										"{{Trait_cvtermId}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to variableTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f0eadde-15cf-4ac9-be6e-ca17fba2877b",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "912784f7-ee0f-4599-ad41-e48033f47728",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/{{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"{{string_input}}"
									]
								},
								"description": "GET /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/{variableTypeId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HEAD ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables​/observations",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs and one variableId only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b3bbd64-1ebd-41e2-8d2d-e96da73c2a01",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"40\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f9be9f1-b336-4797-b76a-b7f36c65f30c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d42c9cb-a0ce-4ba3-aa12-3ed597a9931d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8953d1ae-bfbf-4949-a84f-fe056d555395",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "120a72b8-c57c-4ba2-857a-c4e04f4392eb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7f52e025-7eb2-4e11-88f1-59b78151a191",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify X-Total Count for study with no phenotypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8199869b-72c6-4611-917a-e0f102c23e8d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"0\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ca10006-114e-47a9-969b-c11a2f66eeb3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId_noPhenoCount}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId_noPhenoCount}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when enterd multiple variableIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93e8650d-eed6-4496-9120-6df7e05c654f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"80\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fdb840bb-b5e8-40cd-b309-22adfa212443",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}},{{study_weedPressure_cvterm_id}},{{study_grainYield_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}},{{study_weedPressure_cvterm_id}},{{study_grainYield_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e79a22fb-cec9-4618-ba63-07712b8adb98",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e97108ea-43be-433c-a247-d3fbc9108189",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{nonExistingGID}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{nonExistingGID}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1179147-302e-45b7-be95-ac0912e9cfd3",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d2eb1873-845b-4568-86e1-2465a7d098fc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{non_existing_dataset_id}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cad9c956-2655-4234-a8e0-ebaa2bd6409f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "07a2adb9-1284-48f8-a168-6588c37e1626",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1bc2403-1cc3-422c-bc46-933e258d38bf",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a1f0d7bb-17b3-4e66-a032-5cdc2bf50fff",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf9d3ee6-ef20-48ea-aa10-d6f589f0cb9f",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "49f862ed-72ae-425c-8cf1-fa63857bc09f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string inputs to variableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3012674b-02cb-4262-b317-01cc08b94678",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c93d66da-88af-42d0-8f6c-22978e95fccb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12deb07f-a3a3-407a-8316-fa960da029d4",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fe24aabe-53b0-499c-8556-c371e55dd7c5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_plot_datasetId}}/variables/observations?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"variables",
										"observations"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables",
					"item": [
						{
							"name": "Verify adding variable to a sub obs dataset with a numeric scale",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4cc7b86-e031-4a7d-9675-af9311fd9793",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var biomasId = Number(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(jsonData.termId).to.equal(biomasId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce4206f2-6f37-4c86-bac1-96fea327033a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"studyAlias\": \"Biomas_yield\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify adding variable to a sub obs dataset with a categorical scale",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd0284f2-0604-4099-b67c-899702f0f71e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var biomasId = Number(pm.environment.get(\"study_pestpressure_cvtermId\"));",
											"    pm.expect(jsonData.termId).to.equal(biomasId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6f123386-7d79-434a-b519-deb07d46a89c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_pestpressure_cvtermId}}\",\r\n  \"studyAlias\": \"PestPressure_0_9\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableId={{study_pestpressure_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableId",
											"value": "{{study_pestpressure_cvtermId}}"
										}
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify adding variable to a sub obs dataset with a character scale",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c04e47e-78dc-4024-a127-507b218ccd83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var biomasId = Number(pm.environment.get(\"study_notes_cvtermId\"));",
											"    pm.expect(jsonData.termId).to.equal(biomasId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c313131-c541-4c10-af3a-1abfc106d5ef",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify adding variable to a sub obs dataset with a date scale",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97bf2d8f-f44e-4d47-b202-8bdcc244c37b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var varId = Number(pm.environment.get(\"germitest_date_cvtermId\"));",
											"    pm.expect(jsonData.termId).to.equal(varId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "008784d9-e3a1-4c35-937d-b5ad976b4d11",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{germitest_date_cvtermId}}\",\r\n  \"studyAlias\": \"GermiTest_date\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebb09a8b-0ebc-47f5-8aed-c673d0c7e64d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "698785ce-af4e-4cb3-995f-27d641ab5f28",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd79e6e8-1342-4dd2-874e-3e4bd550de1c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4911e888-9193-41b0-8cec-9f88ebcfd921",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb9abbf8-38dc-4077-a0c6-fe799702ca0d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "021a93b6-aadb-4866-b79f-45cf4bea3751",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f641f12-0c55-4d43-94b0-87ca3292b9cb",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1980e244-d722-452b-9f43-df382e92536f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e9a5701-1211-4219-89ae-9e8b107bed93",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d08e59b8-0ab7-46f2-a3a2-4e12e6b55af5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_notes_cvtermId}}\",\r\n  \"studyAlias\": \"NOTES\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify adding variable that is already associated to the dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a3747f1-828a-44a5-8fc8-dd83e25d881b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Variable with id 18010 is already a variable of dataset.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "51b017b9-a26e-47d2-a33a-2101a18301ed",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"studyAlias\": \"Biomas_yield\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered variable that is not of given variable type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d6bc397-ead9-4c08-b7fa-5cf240e2853b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Variable is not of given variable type.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3a1a0334-7994-4bf6-915a-e9a1a43812c6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{site_soil_ph_cvtermId}}\",\r\n  \"studyAlias\": \"SITE_SOIL_PH\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered selection variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f551194-fb6f-4d70-a12b-5fd066879e6b",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check returned \", function () {",
											"    var jsonData = pm.response.json();",
											"    var varId = Number(pm.environment.get(\"npsel_cvtermId\"));",
											"    pm.expect(jsonData.termId).to.equal(varId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ecd9f6c4-4edf-4edd-86a2-205322205b25",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{selection_method_cvtermId}}\",\r\n  \"variableId\": \"{{npsel_cvtermId}}\",\r\n  \"studyAlias\": \"NPSEL\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered not supported variable type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f3b45eb-60b7-4c62-97c4-b9001991674c",
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Variable type is not supported.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8cba5aa8-d96f-4048-a755-9ba0ddeb7168",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{study_condition_cvtermId}}\",\r\n  \"variableId\": \"{{site_soil_ph_cvtermId}}\",\r\n  \"studyAlias\": \"SITE_SOIL_PH\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Verify if locked study cannot be updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88c076da-028b-4283-bb3c-c8343e1a57cf",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study is locked\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84aa2236-ecea-40ef-88e7-61692c2cd641",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user2\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password2\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('testUserToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('testUserTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{testUserToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"variableTypeId\": \"{{Trait_cvtermId}}\",\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"studyAlias\": \"Biomas_yield\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{locked_studyId}}/datasets/{{locked_study_subobs_datasetId}}/variables",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{locked_studyId}}",
										"datasets",
										"{{locked_study_subobs_datasetId}}",
										"variables"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations",
					"item": [
						{
							"name": "Verify if user can add accepted observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a431128-bab6-4a5e-9e49-fe78cccf5192",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check returned variableId \", function () {",
											"    var biomasId = Number(pm.environment.get(\"study_biomass_cvterm_id\"));",
											"    pm.expect(jsonData.variableId).to.equal(biomasId);",
											"});",
											"pm.test(\"Check returned value \", function () {",
											"    pm.expect(jsonData.value).to.equal(\"5\");",
											"});",
											"",
											"pm.test(\"Check returned categoricalValueId \", function () {",
											"    pm.expect(jsonData.categoricalValueId).to.equal(null);",
											"});",
											"pm.test(\"Check returned status \", function () {",
											"    pm.expect(jsonData.status).to.equal(\"MANUALLY_EDITED\");",
											"});",
											"pm.test(\"Check returned observationUnitId \", function () {",
											"    var observationUnitId = Number(pm.environment.get(\"study_observationUnitId\"));",
											"    pm.expect(jsonData.observationUnitId).to.equal(observationUnitId);",
											"});",
											"pm.test(\"Check returned draftCategoricalValueId \", function () {",
											"    pm.expect(jsonData.draftCategoricalValueId).to.equal(null);",
											"});",
											"pm.test(\"Check returned draftValue \", function () {",
											"    pm.expect(jsonData.draftValue).to.equal(null);",
											"});",
											"pm.test(\"Check returned draftMode \", function () {",
											"    pm.expect(jsonData.draftMode).to.equal(false);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fb70bce9-f439-4772-88fa-8051b86515bf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ffa1ee6-fac8-4630-904f-a8771f515fe5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/observationUnits/\"+pm.environment.get(\"study_observationUnitId\")+\"/observations\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2bc21dff-e98a-4dc4-9ad4-1a65dca0d782",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "758c8598-ef76-4946-8eb3-5686130c9ab2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/observationUnits/\"+pm.environment.get(\"study_observationUnitId\")+\"/observations\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4be40398-11b7-40b0-be9a-fb94a38b0ba2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d933979-89b8-4ca1-8d39-8eb8f6ff17b1",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04463460-9ffe-4e1c-af43-b8ece871a6a4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30e77a83-c747-4124-a9b9-ea9a232a05cc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cbe4477d-2d4e-4d68-b174-3023629df59c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fdfcfdb-de99-40d1-8765-a720c9b6e7eb",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "26b90c14-b56e-426c-9772-35083623e35d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_observationUnitId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_observationUnitId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a20b69f0-8844-40cf-a5c0-b44d0bd76f73",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad88f343-b227-4c84-944f-16150c948124",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to observationUnitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fdbb8eb-2e33-4574-b228-d9d84484f6d7",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "91a649f1-0803-446f-b687-03daee202af1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{string_input}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{string_input}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered studyId and subobs datasetId do not belong to each other",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffea4a2b-3ef4-4dab-b85f-b4b3c872b697",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_subobs_datasetId\") +\" does not belong to the study \"+ pm.environment.get(\"trialStudyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "123b9a22-23b1-45a9-b2b4-8b788f24ab02",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/{{study_observationUnitId}}/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"{{study_observationUnitId}}",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid observationUnitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b4e0f82-2966-46ac-8577-7d89a8e84b48",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid observation unit id.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "257b8bc5-f5d6-4136-8069-67584e64bee3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoricalValueId\": null,\r\n  \"variableId\": \"{{study_biomass_cvterm_id}}\",\r\n  \"value\": \"5\",\r\n  \"observationUnitId\": \"{{study_observationUnitId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/observationUnits/500/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"observationUnits",
										"500",
										"observations"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables",
					"item": [
						{
							"name": "Delete an existing numeric trait from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "119d8a78-dc82-44a5-a330-06aeb3c09632",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "271c7172-3a1b-412d-9cc2-bb5df4046959",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_biomass_cvterm_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_biomass_cvterm_id}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Delete an existing categorical trait from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc70b9e4-2c4c-43c1-b8ee-155b00550f6c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b48413d2-39d0-4aa3-ac83-c60d2ba9745b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_pestpressure_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_pestpressure_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Delete an existing character trait from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cf04647-cf52-46c3-ba8a-49bbfa1df98b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f5af080-5f53-47c8-b4a8-1f8ed2b0db3c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Delete an existing date trait from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccbbb49f-49c4-4894-b4b5-00c6d0326013",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "08d4a031-9907-42c4-9367-b53b587046f5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{germitest_date_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{germitest_date_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Delete an existing selection variable from subobservation dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aebd7603-16dd-4035-81fc-86e358454f47",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dde56435-f91d-438b-b555-b839792efbc3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{npsel_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{npsel_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered a variableId that is not existing in the dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4a08479-af32-4fc9-8e48-38c588798e6c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable with id 8390 is not a variable of dataset or it exists with unsupported variable type.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "50f94159-1608-4cf6-823d-2415f1c48265",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c145bea7-7e68-4df6-82ea-a31f4746df53",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4749d2b2-0f64-4e14-aa89-cf5072c2e97f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dac7e49-c640-45ee-b6d4-d1d622182fbb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs_datasetId\")+\"/variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0c18926b-b99d-49da-8ae3-aeeba30f898f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1d81a1c-3e54-40ec-b15d-57241d677032",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98e962fe-50c2-4da0-8aef-45d1c9594ddf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d481de9-88dc-42db-abe2-1a98cfa7e8ae",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9bf4d789-ebc2-4d74-a291-59d8e27ada5e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a93b25b-0071-4af9-b086-0805df13e9a4",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3312bf74-169e-4727-abf1-769f7e2dc0f2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{string_input}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{string_input}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2626915-fbfd-4312-9efc-6333a573232b",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfd55c26-6700-4b02-b0c0-d0a8aa37b969",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{string_input}}/variables?variableIds={{study_notes_cvtermId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{string_input}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{study_notes_cvtermId}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to variableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c95acd3-e32c-4404-b4d0-8647c4fae85f",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify response message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5dcc847-ee4e-4748-8aa5-8883453a380b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs_datasetId}}/variables?variableIds={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs_datasetId}}",
										"variables"
									],
									"query": [
										{
											"key": "variableIds",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table",
					"item": [
						{
							"name": "Retrieve observation units for 1 instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "441400fc-adfd-4341-a680-d66d8730e371",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"var selectedData = jsonData.data[index];",
											"",
											"pm.test(\"Check observationUnitId\", function () {",
											"    pm.expect(selectedData.observationUnitId).to.eql(502);",
											"});",
											"",
											"pm.test(\"Check gid\", function () {",
											"    pm.expect(selectedData.gid).to.eql(21);",
											"});",
											"pm.test(\"Check designation\", function () {",
											"    pm.expect(selectedData.designation).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(selectedData.entryNumber).to.eql(1);",
											"});",
											"pm.test(\"Check trialInstance\", function () {",
											"    pm.expect(selectedData.trialInstance).to.eql(1);",
											"});",
											"pm.test(\"Check action\", function () {",
											"    pm.expect(selectedData.action).to.eql(\"502\");",
											"});",
											"pm.test(\"Check samplesCount\", function () {",
											"    pm.expect(selectedData.samplesCount).to.eql(\"2\");",
											"});",
											"pm.test(\"Check variable COL\", function () {",
											"    pm.expect(selectedData.variables.COL).to.eql({});",
											"});",
											"pm.test(\"Check variable GID\", function () {",
											"    pm.expect(selectedData.variables.GID.value).to.eql(\"21\");",
											"});",
											"pm.test(\"Check variable FIELDMAP RANGE\", function () {",
											"    pm.expect(selectedData.variables[\"FIELDMAP RANGE\"]).to.eql({});",
											"});",
											"pm.test(\"Check variable Grain_yield\", function () {",
											"    pm.expect(selectedData.variables.Grain_yield.observationId).to.eql(1425);",
											"    pm.expect(selectedData.variables.Grain_yield.value  ).to.eql(\"23\");",
											"    pm.expect(selectedData.variables.Grain_yield.variableId).to.eql(18000);",
											"});",
											"pm.test(\"Check variable NPSEL\", function () {",
											"    pm.expect(selectedData.variables.NPSEL.observationId).to.eql(500);",
											"    pm.expect(selectedData.variables.NPSEL.value  ).to.eql(\"2\");",
											"    pm.expect(selectedData.variables.NPSEL.variableId).to.eql(8263);",
											"});",
											"pm.test(\"Check variable FIELDMAP COLUMN\", function () {",
											"    pm.expect(selectedData.variables[\"FIELDMAP COLUMN\"]).to.eql({});",
											"});",
											"pm.test(\"Check variable OBS_UNIT_ID\", function () {",
											"    pm.expect(selectedData.variables.OBS_UNIT_ID.value).to.eql(\"PKWDPtLOzD8Sz\");",
											"});",
											"pm.test(\"Check variable PARENT_OBS_UNIT_ID\", function () {",
											"    pm.expect(selectedData.variables.PARENT_OBS_UNIT_ID).to.eql({});",
											"});",
											"pm.test(\"Check variable Biomas_yield\", function () {",
											"    pm.expect(selectedData.variables.Biomas_yield.observationId).to.eql(2000);",
											"    pm.expect(selectedData.variables.Biomas_yield.value).to.eql(\"40\");",
											"    pm.expect(selectedData.variables.Biomas_yield.variableId).to.eql(18010);",
											"});",
											"pm.test(\"Check variable ENTRY_TYPE\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_TYPE.value).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check variable EXPT_DESIGN\", function () {",
											"    pm.expect(selectedData.variables.EXPT_DESIGN.value).to.eql(\"ELO\");",
											"});",
											"pm.test(\"Check variable InputVariable\", function () {",
											"    pm.expect(selectedData.variables.InputVariable.variableId).to.eql(100020);",
											"});",
											"pm.test(\"Check variable ENTRY_NO\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_NO.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check variable DESIGNATION\", function () {",
											"    pm.expect(selectedData.variables.DESIGNATION.value).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check variable WeedPressure_number\", function () {",
											"    pm.expect(selectedData.variables.WeedPressure_number.observationId).to.eql(1424);",
											"    pm.expect(selectedData.variables.WeedPressure_number.value  ).to.eql(\"21\");",
											"    pm.expect(selectedData.variables.WeedPressure_number.variableId).to.eql(18100);",
											"});",
											"pm.test(\"Check variable TRIAL_INSTANCE\", function () {",
											"    pm.expect(selectedData.variables.TRIAL_INSTANCE.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check variable ENTRY_CODE\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_CODE).to.eql({});",
											"});",
											"pm.test(\"Check variable BLOCK_NO\", function () {",
											"    pm.expect(selectedData.variables.BLOCK_NO).to.eql({});",
											"});",
											"pm.test(\"Check variable LOCATION_ID\", function () {",
											"    pm.expect(selectedData.variables.LOCATION_ID.value).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check variable ROW\", function () {",
											"    pm.expect(selectedData.variables.ROW).to.eql({});",
											"});",
											"pm.test(\"Check variable REP_NO\", function () {",
											"    pm.expect(selectedData.variables.REP_NO).to.eql({});",
											"});",
											"pm.test(\"Check variable PLOT_NO\", function () {",
											"    pm.expect(selectedData.variables.PLOT_NO.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check environmentVariables\", function () {",
											"    pm.expect(selectedData.environmentVariables).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "017d0d49-b279-4fe2-a823-ddfefadd4cd1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8200,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8200,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units for all instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5edef818-13d9-4074-ad91-e94c5ff82ac3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"var selectedData = jsonData.data[index];",
											"",
											"pm.test(\"Check observationUnitId\", function () {",
											"    pm.expect(selectedData.observationUnitId).to.eql(502);",
											"});",
											"",
											"pm.test(\"Check gid\", function () {",
											"    pm.expect(selectedData.gid).to.eql(21);",
											"});",
											"pm.test(\"Check designation\", function () {",
											"    pm.expect(selectedData.designation).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check entryNumber\", function () {",
											"    pm.expect(selectedData.entryNumber).to.eql(1);",
											"});",
											"pm.test(\"Check trialInstance\", function () {",
											"    pm.expect(selectedData.trialInstance).to.eql(1);",
											"});",
											"pm.test(\"Check action\", function () {",
											"    pm.expect(selectedData.action).to.eql(\"502\");",
											"});",
											"pm.test(\"Check samplesCount\", function () {",
											"    pm.expect(selectedData.samplesCount).to.eql(\"2\");",
											"});",
											"pm.test(\"Check variable COL\", function () {",
											"    pm.expect(selectedData.variables.COL).to.eql({});",
											"});",
											"pm.test(\"Check variable GID\", function () {",
											"    pm.expect(selectedData.variables.GID.value).to.eql(\"21\");",
											"});",
											"pm.test(\"Check variable FIELDMAP RANGE\", function () {",
											"    pm.expect(selectedData.variables[\"FIELDMAP RANGE\"]).to.eql({});",
											"});",
											"pm.test(\"Check variable Grain_yield\", function () {",
											"    pm.expect(selectedData.variables.Grain_yield.observationId).to.eql(1425);",
											"    pm.expect(selectedData.variables.Grain_yield.value  ).to.eql(\"23\");",
											"    pm.expect(selectedData.variables.Grain_yield.variableId).to.eql(18000);",
											"});",
											"pm.test(\"Check variable NPSEL\", function () {",
											"    pm.expect(selectedData.variables.NPSEL.observationId).to.eql(500);",
											"    pm.expect(selectedData.variables.NPSEL.value  ).to.eql(\"2\");",
											"    pm.expect(selectedData.variables.NPSEL.variableId).to.eql(8263);",
											"});",
											"pm.test(\"Check variable FIELDMAP COLUMN\", function () {",
											"    pm.expect(selectedData.variables[\"FIELDMAP COLUMN\"]).to.eql({});",
											"});",
											"pm.test(\"Check variable OBS_UNIT_ID\", function () {",
											"    pm.expect(selectedData.variables.OBS_UNIT_ID.value).to.eql(\"PKWDPtLOzD8Sz\");",
											"});",
											"pm.test(\"Check variable PARENT_OBS_UNIT_ID\", function () {",
											"    pm.expect(selectedData.variables.PARENT_OBS_UNIT_ID).to.eql({});",
											"});",
											"pm.test(\"Check variable Biomas_yield\", function () {",
											"    pm.expect(selectedData.variables.Biomas_yield.observationId).to.eql(2000);",
											"    pm.expect(selectedData.variables.Biomas_yield.value).to.eql(\"40\");",
											"    pm.expect(selectedData.variables.Biomas_yield.variableId).to.eql(18010);",
											"});",
											"pm.test(\"Check variable ENTRY_TYPE\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_TYPE.value).to.eql(\"Test entry\");",
											"});",
											"pm.test(\"Check variable EXPT_DESIGN\", function () {",
											"    pm.expect(selectedData.variables.EXPT_DESIGN.value).to.eql(\"ELO\");",
											"});",
											"pm.test(\"Check variable InputVariable\", function () {",
											"    pm.expect(selectedData.variables.InputVariable.variableId).to.eql(100020);",
											"});",
											"pm.test(\"Check variable ENTRY_NO\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_NO.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check variable DESIGNATION\", function () {",
											"    pm.expect(selectedData.variables.DESIGNATION.value).to.eql(\"GP1\");",
											"});",
											"pm.test(\"Check variable WeedPressure_number\", function () {",
											"    pm.expect(selectedData.variables.WeedPressure_number.observationId).to.eql(1424);",
											"    pm.expect(selectedData.variables.WeedPressure_number.value  ).to.eql(\"21\");",
											"    pm.expect(selectedData.variables.WeedPressure_number.variableId).to.eql(18100);",
											"});",
											"pm.test(\"Check variable TRIAL_INSTANCE\", function () {",
											"    pm.expect(selectedData.variables.TRIAL_INSTANCE.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check variable ENTRY_CODE\", function () {",
											"    pm.expect(selectedData.variables.ENTRY_CODE).to.eql({});",
											"});",
											"pm.test(\"Check variable BLOCK_NO\", function () {",
											"    pm.expect(selectedData.variables.BLOCK_NO).to.eql({});",
											"});",
											"pm.test(\"Check variable LOCATION_ID\", function () {",
											"    pm.expect(selectedData.variables.LOCATION_ID.value).to.eql(\"Africa Rice Centre\");",
											"});",
											"pm.test(\"Check variable ROW\", function () {",
											"    pm.expect(selectedData.variables.ROW).to.eql({});",
											"});",
											"pm.test(\"Check variable REP_NO\", function () {",
											"    pm.expect(selectedData.variables.REP_NO).to.eql({});",
											"});",
											"pm.test(\"Check variable PLOT_NO\", function () {",
											"    pm.expect(selectedData.variables.PLOT_NO.value).to.eql(\"1\");",
											"});",
											"pm.test(\"Check environmentVariables\", function () {",
											"    pm.expect(selectedData.environmentVariables).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5b262b08-dd47-4ed2-831e-03f41f362f60",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8200,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8200,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f60349a3-8ce9-4ed1-ad43-31bea9b8cf9a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/table\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a18c67a4-cefd-44d2-84b0-4af60e901caa",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5743652b-acaf-4867-ad9b-73e040224a06",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/table\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1ad72f45-0651-4d0b-b2ac-100e87e29e55",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d447ef7a-dcb3-4f29-9b58-e172c72e6d0d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5531f457-9ffa-46ea-9150-134f7ef96f1b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "664a2701-af7a-4c85-8429-d7dba4162cd7",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a9290507-bd97-4ff2-88a9-504e9514aec4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 2,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by trialInstance asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd56593a-2c29-4b1e-b38f-b0c0ba4dd424",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next TRIAL_INSTANCE is greater or equal to previous TRIAL_INSTANCE\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].trialInstance)) >= (parseInt(selectedData[i].trialInstance))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"                             ",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "87439ef9-3322-4d9e-acbb-cd8c6805b45f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 1,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8170,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8170,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by trialInstance desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "793d102b-8bbc-4c9c-893e-3ccd7e01b172",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next TRIAL_INSTANCE is greater or equal to previous TRIAL_INSTANCE\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].trialInstance)) <= (parseInt(selectedData[i].trialInstance))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "28cedcd2-c88a-4f28-8a17-4bbc6a4f3545",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 1,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8170,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8170,desc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by gid asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d0ba143-c434-428d-8215-0fad2c8a6ab7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next gid is greater or equal to previous gid\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].gid)) >= (parseInt(selectedData[i].gid))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "824d486a-48db-434f-8c77-56a6529c51d0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 5,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8240,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8240,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by gid desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c7d44e4-e78a-44db-ae9f-08dacee61728",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next gid is greater or equal to previous gid\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].gid)) <= (parseInt(selectedData[i].gid))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3068f94b-aa4d-4c06-a311-b651676980e0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 5,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8240,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8240,desc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by entryNumber asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "919ef1d5-07cd-4451-ab8d-f17e24425817",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next entryNumber is greater or equal to previous entryNumber\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].entryNumber)) >= (parseInt(selectedData[i].entryNumber))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "89fdefcb-a387-4ce3-bf48-3ee442298b39",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 6,\n\t\"sortedRequest\": {\n\t\t\"pageSize\": 50,\n\t\t\"pageNumber\": 1,\n\t\t\"sortBy\": 8230,\n\t\t\"sortOrder\": \"asc\"\n\t},\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8230,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8230,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by entryNumber desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6d2c2c8-73cd-414d-8a2e-32eb716c80ef",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next entryNumber is greater or equal to previous entryNumber\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].entryNumber)) <= (parseInt(selectedData[i].entryNumber))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b685b6d3-afb9-4093-b977-01d32e04f1ed",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 6,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8230,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8230,desc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by plotNumber asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "039efbdb-2d8c-42d1-8b67-c7981df3d704",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next PLOT_NO is greater or equal to previous PLOT_NO\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].variables.PLOT_NO.value)) >= (parseInt(selectedData[i].variables.PLOT_NO.value))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e06e1843-bc6f-4a53-883e-ef36fad1e029",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 7,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8200,asc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8200,asc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units sorted by plotNumber desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96a97d00-e156-470f-aba9-077d87babde5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(40);",
											"});",
											"",
											"pm.test(\"Check if next PLOT_NO is greater or equal to previous PLOT_NO\", function () {",
											"   // var i;",
											"    var selectedData = jsonData.data;",
											"    var proceed = true",
											"    for (var i = 0; i+1 < selectedData.length ; i++) {",
											"        ",
											"           if((parseInt(selectedData[i+1].variables.PLOT_NO.value)) <= (parseInt(selectedData[i].variables.PLOT_NO.value))){",
											"               proceed = true;",
											"           }else{",
											"              proceed = false;",
											"     }",
											"     pm.expect(proceed).to.eql(true);  ",
											"   }",
											"        ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cfb27e5-4e28-4c6b-abc9-23eeac493a3f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"draw\": 7,\n\t\"draftMode\": false,\n\t\"filter\": {\n\t\t\"byOutOfBound\": null,\n\t\t\"byMissing\": null,\n\t\t\"byOutOfSync\": null,\n\t\t\"byOverwritten\": null,\n\t\t\"variableId\": null,\n\t\t\"filterColumns\": [],\n\t\t\"filteredValues\": {},\n\t\t\"filteredTextValues\": {},\n\t\t\"variableTypeMap\": {\n\t\t\t\"8170\": null,\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\n\t\t\t\"8263\": \"SELECTION_METHOD\",\n\t\t\t\"18000\": \"TRAIT\",\n\t\t\t\"18010\": \"TRAIT\",\n\t\t\t\"18100\": \"TRAIT\",\n\t\t\t\"100020\": \"TRAIT\",\n\t\t\t\"-2\": null\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table?size=50&page=0&sort=8200,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									],
									"query": [
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sort",
											"value": "8200,desc"
										}
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Manage Observation Data",
					"item": [
						{
							"name": "Add observation to input variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59dae872-438f-468a-8ffe-e5972b54b275",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "29be56ab-6eea-476e-a8d2-64a39e27abed",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db599610-3e9c-4d16-93e1-5f553f4a6117",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/observations\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a0879ca-5586-4861-b3c6-994274aadb7b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ee346ca-0f49-42e1-81c4-3f1929100ed1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/observations\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f9d3717-b6dd-43f3-ab2e-e3f78f908bc8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation values with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e6ee734-5554-4538-a3b3-ccfcfb462eb2",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bfef3256-189e-49ed-8062-601acc5f50ca",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation values with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4485b33-6a6a-43e0-b16a-b63d6df3f638",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "42ab20fe-51e0-4111-a7cd-133e5b100a64",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation values with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54eabed-478c-4ef2-94f8-217cf22f7625",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fed0bc24-cd65-4579-b018-b82f02ce1ba7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation with invalid numeric variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e588f66-028c-469e-8a47-eb036e44b6c5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"The numeric variable InputVariable contains an invalid value: invalid. Please check the data file and try again.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "33533fae-fcc0-4f7d-9b5e-1bd36eeb46bb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"invalid\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Add observation to a locked study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28abaf39-d6ba-4d96-a0e7-ff5cf9d31d25",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.equal(\"Study is locked\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1eed180-2cd8-42d8-a3fc-0a7cef852d9d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user2\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password2\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('testUserToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('testUserTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{testUserToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"REP_NO\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"Grain_size\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"b9129428-d34a-42d5-8d9b-745b995f3fa1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"382\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"7fb97924-b41d-4f1c-bedb-03118acdf8ab\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2\",\r\n\t\t\t\"120\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"42d19ca0-9ce5-4ace-a2b4-765e34770036\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"1\",\r\n\t\t\t\"3\",\r\n\t\t\t\"301\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"002389b5-582c-4ee5-aa42-6a07ffe86c7c\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1\",\r\n\t\t\t\"4\",\r\n\t\t\t\"146\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"e5a64887-76d6-4133-84fc-b088edb35d1c\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"371\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"848e3199-0523-4ee4-a5b3-31783af1919c\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\",\r\n\t\t\t\"6\",\r\n\t\t\t\"105\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"dd3e2a9d-a16e-4913-a89d-0aaab936f8ef\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"7\",\r\n\t\t\t\"415\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"df130273-2689-4602-b0fd-9592f93612ba\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"1\",\r\n\t\t\t\"8\",\r\n\t\t\t\"469\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"e741338d-f076-42d2-aa6b-876c8cac51fd\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"1\",\r\n\t\t\t\"9\",\r\n\t\t\t\"388\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"21e85da8-c58d-479a-b540-5a8ce2126260\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"10\",\r\n\t\t\t\"238\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"140b8ca7-8875-4300-8684-0be748b321de\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"1\",\r\n\t\t\t\"11\",\r\n\t\t\t\"424\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"52869132-f86b-47ba-b42a-ab028ed55f39\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"1\",\r\n\t\t\t\"12\",\r\n\t\t\t\"488\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1286dc6b-a330-408c-b22d-2a63da1f0c15\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"4e3349e0-0786-48cb-bab4-614a7d4bae1d\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"184\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"74c10cc4-a784-471d-92c9-9633d446f5c6\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"1\",\r\n\t\t\t\"15\",\r\n\t\t\t\"271\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"3a8f24d9-5840-48bd-bb8f-ea853b4c96a7\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"1\",\r\n\t\t\t\"16\",\r\n\t\t\t\"208\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"bcd420d7-63ea-48e8-8577-4d627c748e9d\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1\",\r\n\t\t\t\"17\",\r\n\t\t\t\"117\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"62a5c1e7-b8b6-4ed7-9e8e-b645c1d6635d\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"1\",\r\n\t\t\t\"18\",\r\n\t\t\t\"375\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"f94a5062-9da1-4b1f-a425-f487b4f51cc1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"1\",\r\n\t\t\t\"19\",\r\n\t\t\t\"426\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"0b8672b7-b6ec-4d97-9a90-498a17f2d3ad\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"292\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"c651f61f-7d03-4e20-b8cc-c3a8a2b2884c\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"2\",\r\n\t\t\t\"21\",\r\n\t\t\t\"274\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"e910d405-7270-44ef-9313-5b1111b88068\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2\",\r\n\t\t\t\"22\",\r\n\t\t\t\"337\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"f7df3116-8a5e-438d-8ed5-0467757a2591\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2\",\r\n\t\t\t\"23\",\r\n\t\t\t\"391\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"a3b5cd79-ad6b-4bb0-aae7-630a407bf377\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"2\",\r\n\t\t\t\"24\",\r\n\t\t\t\"233\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"b5b14be3-621b-404a-84d3-197a37b5da52\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2\",\r\n\t\t\t\"25\",\r\n\t\t\t\"148\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"463d33ee-aaf3-4ead-b573-eea0197675cb\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"2\",\r\n\t\t\t\"26\",\r\n\t\t\t\"298\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"259a4362-104c-4bf1-9eab-3b546b67cd4b\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"2\",\r\n\t\t\t\"27\",\r\n\t\t\t\"278\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"30934fb5-20b6-4df1-bcae-66660b0b6867\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"2\",\r\n\t\t\t\"28\",\r\n\t\t\t\"237\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"d97b3b54-2862-49ef-bbd1-ff32267bc23f\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"29\",\r\n\t\t\t\"295\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"41112da6-9b7d-46d4-8b59-fd169a2762b0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"2\",\r\n\t\t\t\"30\",\r\n\t\t\t\"164\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"751818b2-c539-49d2-ae53-8748bd2729c5\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2\",\r\n\t\t\t\"31\",\r\n\t\t\t\"243\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1e173e16-fb12-49c2-9b76-fb5d799ac18b\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"2\",\r\n\t\t\t\"32\",\r\n\t\t\t\"272\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"62b3309e-29df-4601-b937-e0fd55358543\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"165\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"d9377c1c-b0c9-4273-a49b-e766d0db5218\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"2\",\r\n\t\t\t\"34\",\r\n\t\t\t\"374\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1c01dda0-c5ea-48ac-84ae-bbb2fae500c5\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"35\",\r\n\t\t\t\"154\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2f38e9fa-0623-4579-93d5-8ef6a96e8ddf\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"2\",\r\n\t\t\t\"36\",\r\n\t\t\t\"170\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"8bc7a69c-63ca-4232-ab38-bf4860709124\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"2\",\r\n\t\t\t\"37\",\r\n\t\t\t\"416\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"23fc0361-7b67-4f0d-8227-50801c95c0d1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"2\",\r\n\t\t\t\"38\",\r\n\t\t\t\"166\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"284843ff-3cb8-4f46-99d1-9e7221492e18\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"2\",\r\n\t\t\t\"39\",\r\n\t\t\t\"366\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"98c70963-a2c1-4d6d-8c58-4566cef0dff3\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2\",\r\n\t\t\t\"40\",\r\n\t\t\t\"255\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{locked_studyId}}/datasets/{{locked_study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{locked_studyId}}",
										"datasets",
										"{{locked_study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observationUnits/observations"
							},
							"response": []
						},
						{
							"name": "Reject pending data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54eb88a3-b474-40ca-846d-78f1dc9ca865",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f78fe07d-8c9a-4067-9459-2dc6bf2d4782",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/rejection",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"rejection"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4ec652b-fc68-40ac-b8d3-03bf6cc11b99",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/drafts/rejection\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d008642f-d64a-4424-84cc-273600311f70",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/rejection",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"rejection"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27c3b4b0-582a-490e-bafd-43af04ac509f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/drafts/rejection\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d8e66a9f-8f8f-4c6a-92a4-162189e5edc9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/rejection",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"rejection"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc9d4182-51fc-46a6-add3-aa12897a9d29",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "934c3dc6-74f6-4b3c-a470-a1955211b6ed",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/rejection/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"rejection",
										""
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​ rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f010218d-1146-4d74-98d9-dd8c40f49327",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "54fcbf83-2ba4-4357-9d38-0b3d4348c6a0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/rejection/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"rejection",
										""
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​ rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with non-obs datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d48429c4-36e6-4aaa-9b68-b721933f0ee3",
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset is not an observation or subobservation dataset.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dda93156-4a18-4710-a7b8-45ddcb86b3f1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_env_id}}/observation-units/drafts/rejection/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_env_id}}",
										"observation-units",
										"drafts",
										"rejection",
										""
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​ rejection"
							},
							"response": []
						},
						{
							"name": "Reject pending data with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1044cc2b-9c26-4973-8744-5414f3a4ce95",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22daacbb-576e-4219-9c76-928aff94523e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/rejection/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"rejection",
										""
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​ rejection"
							},
							"response": []
						},
						{
							"name": "Add observation to input variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47e96ab2-c1a3-4dcb-8d7e-cdbea4aa19ed",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90b425b0-19ea-402d-937b-ed0a6311f2b6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Accept pending data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae6164f9-a9cb-4a5c-9e5a-4867a47aaf8d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f33b5430-00b8-4180-ba2f-d9f9adfd55fc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c942588-aa0b-48b9-8f33-cc33259b95a6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/drafts/acceptance\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a646816b-1c74-41cd-a4f0-c78b690ca402",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b781c5c2-4174-4d4b-bb73-a5b17863b5b2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/drafts/acceptance\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a26da0e0-32f6-4f0a-adbc-712b199b94f4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fea65377-513f-4105-9562-dd67d264cf9d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "581d3005-9c43-470c-ad53-57878ae23d41",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af853023-dc04-4c7d-bebc-9efc5de0ee71",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "983cab9a-fb99-49bc-a196-875387935419",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36b4698a-c2bb-462b-81d5-195a268cbdd4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3a7094e3-ec9f-4129-ae69-00b608afb995",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept pending data with non-obs datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f8b6de4-b46a-4a10-83cf-da4462e56b8d",
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset is not an observation or subobservation dataset.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c835a67b-b870-4918-abdd-3c7f6773cbda",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_env_id}}/observation-units/drafts/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_env_id}}",
										"observation-units",
										"drafts",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2dbceb8-5e17-44c9-b520-5f08b4f82450",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.InputVariable.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c45049be-c22d-4f67-b938-2342a19b4733",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Delete observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ace04a9-7edd-4bcd-82c0-bbb340645150",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12c549ae-3d8b-4c5e-93e0-b6778fb8329d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5f34052-8576-411b-a41f-efb911d3e29f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/\"+pm.environment.get(\"observationUnitId\")+\"/observations/\"+pm.environment.get(\"observationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74ff2b59-d515-4d9b-bc83-3b157507a2d5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01d3a864-867f-4a98-bad5-c01eeafab983",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observationUnits/\"+pm.environment.get(\"observationUnitId\")+\"/observations/\"+pm.environment.get(\"observationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e4baf64-8e93-4b48-8d72-01b188daeb06",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6c0d0a6-ed9c-4fe6-946e-2e1c2dd26bff",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6f7843db-b783-4b79-8346-475dd957eb29",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fd6bf52-7457-4b89-a0eb-0693f765815f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56b16a0f-946a-49d5-b13b-39f0400cc03c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Delete observation with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d784371f-56fe-4961-8a71-cc2731f49c83",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85d32daa-c2bd-46cf-be75-646fbdf9300c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype for 1 instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "642e74d1-8af8-4df9-9dbd-c613d9742576",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" var jsonData = pm.response.json();",
											"pm.test(\"Check totalFilteredPhenotypes\", function () {",
											"    pm.expect(jsonData.totalFilteredPhenotypes).to.eql(20);",
											"});",
											"pm.test(\"Check totalFilteredPhenotypes\", function () {",
											"    pm.expect(jsonData.totalFilteredInstances).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f228299e-d513-45e5-987c-5b94e14b74da",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype for all instances",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fae12b7-e853-4dea-9de2-3a06c9819011",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" var jsonData = pm.response.json();",
											"pm.test(\"Check totalFilteredPhenotypes\", function () {",
											"    pm.expect(jsonData.totalFilteredPhenotypes).to.eql(40);",
											"});",
											"pm.test(\"Check totalFilteredPhenotypes\", function () {",
											"    pm.expect(jsonData.totalFilteredInstances).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "437948eb-1b44-4ca6-823c-ddf4215ca235",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4bf15a3-eaf6-4fae-928e-e05478c5aec6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/observations/filter/count\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fbf32f98-07f2-42d4-84ca-dfcd40756048",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf74a65c-0b2d-42d4-8980-79739c68cbda",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/observations/filter/count\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d34d6d0-ef83-44be-b4f1-1d07501a8541",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38f0c0f7-b5fa-4b8e-8721-acdfc872d1b5",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "49315efa-520c-451b-949c-4fa2674d711c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d12426fc-d6df-4b42-934d-787eff84917f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6de5271-855c-4b10-815e-79ff2c93effb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Count filtered phenotype with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a7149c4-d718-48bb-8194-c38e9de28dc5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f515e7d4-be96-476a-9d65-4c9ef72bd561",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 100020,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\"-2\": null\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/testdata/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/observations/filter/count",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"testdata",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"observations",
										"filter",
										"count"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aee3ae7f-0c7b-4597-b314-00fa3adf018e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9dc77c02-167d-46f8-a428-f164f9bf5d03",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccc7b172-c0b7-41e3-ac57-58f3d2f65587",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_plot_datasetId\")+\"/observation-units/filter/set-value\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a826fe5-a25e-4f04-9c4d-c263d1f8367c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c26c23a-b1b1-406c-992e-ee3c7d8ec149",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/testdata/programs/invalid/studies/3009/datasets/3011/observation-units/filter/set-value\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4f466f4d-d471-441e-9564-84947b055821",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6309193-4018-4614-ade8-b3e7078663e8",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1a71e91-23a4-41f0-bc96-b639fa1905ae",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a536aee-ef1f-4599-9a27-c50f64ca9aa1",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0bdfd430-bd51-4e69-89b0-a5e4c959f82b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set value for filtered phenotype with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3601c1-fd44-4428-b11c-dcdf6365c467",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ae1f57cc-120d-4740-bddb-76a46082950d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"2\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Set invalid value for filtered phenotype",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1ed8f52-e00e-4ac5-a6bb-7f93adfe3df5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid value.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12af7e2f-b0a9-4689-b269-21396a5e5aca",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"newValue\": \"invalidValue\",\r\n\t\"newCategoricalValueId\": null,\r\n\t\"observationUnitsSearchDTO\": {\r\n\t\t\"instanceId\": 1,\r\n\t\t\"draftMode\": false,\r\n\t\t\"filter\": {\r\n\t\t\t\"byOutOfBound\": null,\r\n\t\t\t\"byMissing\": null,\r\n\t\t\t\"byOutOfSync\": null,\r\n\t\t\t\"byOverwritten\": null,\r\n\t\t\t\"variableId\": 100020,\r\n\t\t\t\"filterColumns\": [],\r\n\t\t\t\"filteredValues\": {},\r\n\t\t\t\"filteredTextValues\": {},\r\n\t\t\t\"variableTypeMap\": {\r\n\t\t\t\t\"8170\": null,\r\n\t\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\t\"100020\": \"TRAIT\",\r\n\t\t\t\t\"-2\": null\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observation-units/filter/set-value",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observation-units",
										"filter",
										"set-value"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/observations​ filter​/count"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating filtered phenotype",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a5e191d-eee8-4e5f-ab16-5086f203fcfc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(20);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.InputVariable.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f885e9d9-f0cf-4306-9931-9f143cac68c7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8263\": \"SELECTION_METHOD\",\r\n\t\t\t\"18000\": \"TRAIT\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18100\": \"TRAIT\",\r\n\t\t\t\"100020\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Delete observation of upated filtered phenotypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87463202-d706-4143-bf78-27c7723fb4cc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ddf1f0c1-61c3-446a-a0ea-598aa23ad59b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating filtered phenotype Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "674ffe4c-ceab-4594-bb2e-fdf3be286169",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.PestPressure_0_9.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0afdf453-f789-402d-b6a1-0f845af9efbf",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Delete observation of catgorical variable in subobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2ed08f6-5212-4f70-9e2f-fcdb5e320620",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation of catgorical variable in subobs\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2d32123-ee3e-45ec-b88f-cd6ab1ddc1b4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values before adding observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "960042f0-5c4d-477c-915b-4ac83f886a22",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fb614b5c-170f-4537-bc6a-f4f04447dd3b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Add observation to categorical variable in subobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd72b819-147d-4857-bfb5-1beba256985d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8cb1b259-5f55-43be-9113-8e4b41cdddeb",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"QUADRAT_NO\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"PestPressure_0_9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"0b261507-54ce-4713-b3f2-709736761734\",\r\n\t\t\t\"1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"15\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"315fb141-03c0-4182-88f1-7a9c85f72328\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2\",\r\n\t\t\t\"50\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2d10c00d-4009-4e4e-951e-f7007a313af7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"3\",\r\n\t\t\t\"18\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"899d0d12-e86d-4b17-87ac-e281a94e92ec\",\r\n\t\t\t\"1\",\r\n\t\t\t\"4\",\r\n\t\t\t\"19\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"cfa758b5-9bb8-40dd-9054-0219feca641a\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1\",\r\n\t\t\t\"98\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69d0f45f-9b50-41e2-8d4a-6d1e819b338e\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1bfa2437-3b9a-4076-ab76-5a179cc15922\",\r\n\t\t\t\"2\",\r\n\t\t\t\"3\",\r\n\t\t\t\"34\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2595fc34-8297-4270-a08e-8ccfc7721cb5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"4\",\r\n\t\t\t\"60\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"638ca187-ee3d-4b04-9323-d1445beffe90\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"3cf8a747-33a1-4d67-aa3f-352a00613f00\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2\",\r\n\t\t\t\"61\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2c1272ee-9c14-46b4-a827-1cdc8f507467\",\r\n\t\t\t\"3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1d191e63-4cfa-473a-afbe-40f4be48c64b\",\r\n\t\t\t\"3\",\r\n\t\t\t\"4\",\r\n\t\t\t\"50\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"93580832-f751-453e-a6a2-f95f76b288cf\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1\",\r\n\t\t\t\"63\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"dbb7f2f6-e8cd-4870-a9b5-a3fc00ba12fa\",\r\n\t\t\t\"4\",\r\n\t\t\t\"2\",\r\n\t\t\t\"64\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1f26c682-785b-4ee6-842f-2f672ba882c9\",\r\n\t\t\t\"4\",\r\n\t\t\t\"3\",\r\n\t\t\t\"58\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"3bbe6c39-a1d6-4652-8bba-7b1723d6ecf5\",\r\n\t\t\t\"4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"43\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"964a445e-bcd2-4482-a1f0-67990a9845cd\",\r\n\t\t\t\"5\",\r\n\t\t\t\"1\",\r\n\t\t\t\"78\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"bd0e959a-cebf-4858-82ed-61433679de02\",\r\n\t\t\t\"5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"49\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"194e49cd-4a72-4337-b207-c0ad03924dc1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"3\",\r\n\t\t\t\"76\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"cfaf837f-508d-4b3c-8eb0-968439a92ad3\",\r\n\t\t\t\"5\",\r\n\t\t\t\"4\",\r\n\t\t\t\"87\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"33f3fd46-745e-40d0-99d4-abb86307c963\",\r\n\t\t\t\"6\",\r\n\t\t\t\"1\",\r\n\t\t\t\"28\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2ecbc964-212b-4d87-b6d6-8dd86869180c\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"0744db7c-e5f3-44c6-bcde-da6ef23261c6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"3\",\r\n\t\t\t\"21\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"0a864c70-4eb1-4111-9a05-25fc6159dd8a\",\r\n\t\t\t\"6\",\r\n\t\t\t\"4\",\r\n\t\t\t\"36\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"5d7a76f5-407e-45ad-9d3e-caccd110bfe0\",\r\n\t\t\t\"7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"5909e7a8-e402-4e76-b88d-bd152174fbca\",\r\n\t\t\t\"7\",\r\n\t\t\t\"2\",\r\n\t\t\t\"34\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"524bc770-e069-449b-9973-43efc938f351\",\r\n\t\t\t\"7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"16\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"70cba2b2-df16-42ad-99fd-b43e243cbfdc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"4\",\r\n\t\t\t\"11\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"9456f46a-72a4-4e2f-900e-26a4d056901a\",\r\n\t\t\t\"8\",\r\n\t\t\t\"1\",\r\n\t\t\t\"57\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"ab4c4997-f3ea-4a47-ad22-7c2cc73cd5cc\",\r\n\t\t\t\"8\",\r\n\t\t\t\"2\",\r\n\t\t\t\"77\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"b581068d-e240-4ba0-8df5-228fa2c2f4db\",\r\n\t\t\t\"8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"84\",\r\n\t\t\t\"17\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6e54de07-9b2e-4f88-9e31-28101efc2c5e\",\r\n\t\t\t\"8\",\r\n\t\t\t\"4\",\r\n\t\t\t\"92\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"8160083f-0c23-4cb6-824d-9b9bd7226437\",\r\n\t\t\t\"9\",\r\n\t\t\t\"1\",\r\n\t\t\t\"73\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"b682d671-e83f-4c90-aa92-e52184e6d72a\",\r\n\t\t\t\"9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"5bf2357a-b346-41bc-bad2-faba1e35994b\",\r\n\t\t\t\"9\",\r\n\t\t\t\"3\",\r\n\t\t\t\"86\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"7fe198f5-b983-4333-8615-9c801218ad61\",\r\n\t\t\t\"9\",\r\n\t\t\t\"4\",\r\n\t\t\t\"94\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"07126092-8b56-4d5e-8f98-118873f2463d\",\r\n\t\t\t\"10\",\r\n\t\t\t\"1\",\r\n\t\t\t\"46\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"9d1a3fa0-c20b-447b-8b10-bd48a269ff61\",\r\n\t\t\t\"10\",\r\n\t\t\t\"2\",\r\n\t\t\t\"9\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"d6c3a7cf-da8c-41be-8656-0312c86dac10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"3\",\r\n\t\t\t\"56\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"d6f29725-e27b-49ea-b2a4-0e8999189728\",\r\n\t\t\t\"10\",\r\n\t\t\t\"4\",\r\n\t\t\t\"27\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"fac0c26d-0dee-4d30-9a53-82d1d78c741f\",\r\n\t\t\t\"11\",\r\n\t\t\t\"1\",\r\n\t\t\t\"36\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"b634d60f-a7bd-4687-99fe-c92e5b067a90\",\r\n\t\t\t\"11\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"5a08eead-02c6-4146-9114-15d04fd5a9eb\",\r\n\t\t\t\"11\",\r\n\t\t\t\"3\",\r\n\t\t\t\"49\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"080603ca-d4ad-4406-9a70-180bffe645b0\",\r\n\t\t\t\"11\",\r\n\t\t\t\"4\",\r\n\t\t\t\"18\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"e6ce6248-4051-40eb-af4b-ecde2569c82a\",\r\n\t\t\t\"12\",\r\n\t\t\t\"1\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"fbf3a70f-1fd0-414a-ac4e-a0f180d4cbb3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2\",\r\n\t\t\t\"27\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48b392cb-3179-42c2-8321-05eb6c57afd4\",\r\n\t\t\t\"12\",\r\n\t\t\t\"3\",\r\n\t\t\t\"18\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2005942c-616e-4747-8ee8-0ad2f66966b6\",\r\n\t\t\t\"12\",\r\n\t\t\t\"4\",\r\n\t\t\t\"57\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"85d04aea-36cf-4b01-ba39-4ede2e9f5c71\",\r\n\t\t\t\"13\",\r\n\t\t\t\"1\",\r\n\t\t\t\"66\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"314a5e14-0bea-458c-b314-602654b36c21\",\r\n\t\t\t\"13\",\r\n\t\t\t\"2\",\r\n\t\t\t\"84\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"93ffeae1-8695-4b8d-94b7-1f59731b804b\",\r\n\t\t\t\"13\",\r\n\t\t\t\"3\",\r\n\t\t\t\"29\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"d683a7eb-d4d3-46f4-aef1-a9c20ed128ca\",\r\n\t\t\t\"13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"73\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36f04eb5-63e0-4d60-9a58-9d48e1c01f50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\",\r\n\t\t\t\"28\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"3cdd899e-55b0-4eac-ab3f-9f40a2626963\",\r\n\t\t\t\"14\",\r\n\t\t\t\"2\",\r\n\t\t\t\"7\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"af24c30b-e91f-4381-be65-34d7412f73b0\",\r\n\t\t\t\"14\",\r\n\t\t\t\"3\",\r\n\t\t\t\"46\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"f0059745-7bb4-4df0-9363-1a01bc7490d5\",\r\n\t\t\t\"14\",\r\n\t\t\t\"4\",\r\n\t\t\t\"71\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1243686c-5eea-4d33-b2bf-25b7d34150be\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1\",\r\n\t\t\t\"79\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"e8b6a8ec-90aa-4636-9a7a-563418ca54fc\",\r\n\t\t\t\"15\",\r\n\t\t\t\"2\",\r\n\t\t\t\"98\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"c8f6c6f6-b66f-4a1d-8df2-ced6953e176d\",\r\n\t\t\t\"15\",\r\n\t\t\t\"3\",\r\n\t\t\t\"59\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"bc7b2c2e-1b32-4981-b9b1-713d6df8d43e\",\r\n\t\t\t\"15\",\r\n\t\t\t\"4\",\r\n\t\t\t\"74\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"8d23c31b-cd3b-48b6-978c-32061714cf5e\",\r\n\t\t\t\"16\",\r\n\t\t\t\"1\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"71b7d84a-6b59-4f7b-a2e0-92b2e7799a88\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2\",\r\n\t\t\t\"96\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2c4940bc-9775-4733-aec3-0599692a00e3\",\r\n\t\t\t\"16\",\r\n\t\t\t\"3\",\r\n\t\t\t\"33\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"66c29362-af06-4280-92cd-65ba393dd025\",\r\n\t\t\t\"16\",\r\n\t\t\t\"4\",\r\n\t\t\t\"9\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"d9771cde-0161-40c8-87ea-0e845d2d7f87\",\r\n\t\t\t\"17\",\r\n\t\t\t\"1\",\r\n\t\t\t\"11\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"59879668-5fa8-4ba7-a930-823c30426ccb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"2\",\r\n\t\t\t\"36\",\r\n\t\t\t\"20\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"5d187628-c118-4f45-aeba-c81328d33f0e\",\r\n\t\t\t\"17\",\r\n\t\t\t\"3\",\r\n\t\t\t\"56\",\r\n\t\t\t\"8\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"86216685-143a-402d-8d52-cccf76c8f949\",\r\n\t\t\t\"17\",\r\n\t\t\t\"4\",\r\n\t\t\t\"62\",\r\n\t\t\t\"8\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"dfc52e00-8a51-4f91-b0b3-a364697da9aa\",\r\n\t\t\t\"18\",\r\n\t\t\t\"1\",\r\n\t\t\t\"68\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"9b745a60-23af-4530-8a10-c002b4cf5061\",\r\n\t\t\t\"18\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"ed32ad4d-711e-4774-b83b-f98aa3e6c4fa\",\r\n\t\t\t\"18\",\r\n\t\t\t\"3\",\r\n\t\t\t\"79\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"d3f269e0-b77e-47e7-906d-554b93060ba6\",\r\n\t\t\t\"18\",\r\n\t\t\t\"4\",\r\n\t\t\t\"78\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"810e5db4-c7ca-466e-a9d7-cb7edde9e531\",\r\n\t\t\t\"19\",\r\n\t\t\t\"1\",\r\n\t\t\t\"60\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"34f406a9-60c6-4957-a644-4a9e16e52382\",\r\n\t\t\t\"19\",\r\n\t\t\t\"2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"6cf3bc95-85ff-499c-a1f4-84a565f4a4d2\",\r\n\t\t\t\"19\",\r\n\t\t\t\"3\",\r\n\t\t\t\"14\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"a125b0f7-a1b4-4be5-bbcd-50efffa8fbd3\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4\",\r\n\t\t\t\"70\",\r\n\t\t\t\"20\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"0e7688f7-7e7f-435b-bd86-fa541aa4eb13\",\r\n\t\t\t\"20\",\r\n\t\t\t\"1\",\r\n\t\t\t\"77\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"c7cb7363-9d1c-4080-82d7-ef302280baf1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"7008760c-5e8f-4d6f-9986-c47e8d2a23cb\",\r\n\t\t\t\"20\",\r\n\t\t\t\"3\",\r\n\t\t\t\"46\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"c371cb1e-c0f9-4129-8900-460fff2b58ff\",\r\n\t\t\t\"20\",\r\n\t\t\t\"4\",\r\n\t\t\t\"35\",\r\n\t\t\t\"20\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values after adding observation with out of bound values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ff631e1-9869-406a-8da8-9d7a121db12b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "10839aae-a796-4eaa-934a-fe358b23e661",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2093e66-620d-434c-8e0e-4d9a2df59134",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/out-of-bounds\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "277293c6-f15e-4ced-b9cc-8ec28e653d5e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3dfd0116-c14f-44eb-927d-7672f9ab4d6f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/out-of-bounds\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f03f12e7-cb88-4adb-9e50-567d1dff6c62",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b133b4ee-f3f6-4232-9dab-6f89e764a2b6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e0351155-a8a4-41e8-998d-f9970afbf2d5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72e2f073-c85c-40d0-b98e-2cc94ada8b6f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c99b7436-0dd2-4a8a-947a-f4ec9589919f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Check existing out of bound values with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10d37987-ddab-4276-a7e4-f26b7d9364e4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3b440dda-249e-49c7-944b-422fde300148",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/out-of-bounds",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"out-of-bounds"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14f4b44f-d473-4898-8806-61cca1ce927a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b8fd4a2-4aec-4c19-a4b3-b4ba9055c341",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/filter​/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "493d1a6a-9927-463e-bf24-c576ee193752",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error messag\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/filter/acceptance\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6fa11fd9-a5d4-4acf-a463-bd5bd3e8926c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "398d5e74-34bb-4c57-8337-c667f6b67b1b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check error messag\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/filter/acceptance\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "06cda80d-6566-4407-92bf-79991a717c1c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ecbb4ef-cdf3-4cb7-bcd8-f89b69526761",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3de5f2ec-1409-40a0-b2fe-107a119fa06c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdd98d20-5841-437e-b277-fa8f85416322",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35829532-3410-4adc-947c-8f5efe42c913",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data for a non-existing variableId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b4bb4fc-a895-4e5e-81c8-5b2234c8a947",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "36753be0-eb2a-4d40-b1f1-90c035b8d19f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 99999,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Accept filtered pending data with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c0d0e5d-1cdd-41b4-af81-5503594c3452",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "276f11a6-1a57-4ff3-9dba-cc853cb530d1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 99999,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/filter/acceptance",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"filter",
										"acceptance"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating filtered phenotype Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1df38366-93e2-4188-bf7a-35d7980ca083",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.PestPressure_0_9.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0abe63b5-b4fc-4663-b6b8-989671c344df",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST /crops/{cropName}/programs​/{programUUID}​/studies/{studyId}/datasets/{datasetId}/observation-units/drafts/acceptance"
							},
							"response": []
						},
						{
							"name": "Delete observation of catgorical variable in subobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fc40a22-16cf-4631-a667-92c162b4db8b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation of catgorical variable in subobs\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a467c84-79d3-4221-8258-bb98b26b5264",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						},
						{
							"name": "Add observation to categorical variable in subobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8db95278-60b3-411f-be17-b8624d92a430",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "97bc9595-adce-4a37-9115-8f5eda52e058",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"QUADRAT_NO\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"PestPressure_0_9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"0b261507-54ce-4713-b3f2-709736761734\",\r\n\t\t\t\"1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"15\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"315fb141-03c0-4182-88f1-7a9c85f72328\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2\",\r\n\t\t\t\"50\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"2d10c00d-4009-4e4e-951e-f7007a313af7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"3\",\r\n\t\t\t\"18\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"899d0d12-e86d-4b17-87ac-e281a94e92ec\",\r\n\t\t\t\"1\",\r\n\t\t\t\"4\",\r\n\t\t\t\"19\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"cfa758b5-9bb8-40dd-9054-0219feca641a\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1\",\r\n\t\t\t\"98\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69d0f45f-9b50-41e2-8d4a-6d1e819b338e\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"1bfa2437-3b9a-4076-ab76-5a179cc15922\",\r\n\t\t\t\"2\",\r\n\t\t\t\"3\",\r\n\t\t\t\"34\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2595fc34-8297-4270-a08e-8ccfc7721cb5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"4\",\r\n\t\t\t\"60\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"638ca187-ee3d-4b04-9323-d1445beffe90\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"3cf8a747-33a1-4d67-aa3f-352a00613f00\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2\",\r\n\t\t\t\"61\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"2c1272ee-9c14-46b4-a827-1cdc8f507467\",\r\n\t\t\t\"3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"1d191e63-4cfa-473a-afbe-40f4be48c64b\",\r\n\t\t\t\"3\",\r\n\t\t\t\"4\",\r\n\t\t\t\"50\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"93580832-f751-453e-a6a2-f95f76b288cf\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1\",\r\n\t\t\t\"63\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"dbb7f2f6-e8cd-4870-a9b5-a3fc00ba12fa\",\r\n\t\t\t\"4\",\r\n\t\t\t\"2\",\r\n\t\t\t\"64\",\r\n\t\t\t\"11\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"1f26c682-785b-4ee6-842f-2f672ba882c9\",\r\n\t\t\t\"4\",\r\n\t\t\t\"3\",\r\n\t\t\t\"58\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"3bbe6c39-a1d6-4652-8bba-7b1723d6ecf5\",\r\n\t\t\t\"4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"43\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"964a445e-bcd2-4482-a1f0-67990a9845cd\",\r\n\t\t\t\"5\",\r\n\t\t\t\"1\",\r\n\t\t\t\"78\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"bd0e959a-cebf-4858-82ed-61433679de02\",\r\n\t\t\t\"5\",\r\n\t\t\t\"2\",\r\n\t\t\t\"49\",\r\n\t\t\t\"10\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"194e49cd-4a72-4337-b207-c0ad03924dc1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"3\",\r\n\t\t\t\"76\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"cfaf837f-508d-4b3c-8eb0-968439a92ad3\",\r\n\t\t\t\"5\",\r\n\t\t\t\"4\",\r\n\t\t\t\"87\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"33f3fd46-745e-40d0-99d4-abb86307c963\",\r\n\t\t\t\"6\",\r\n\t\t\t\"1\",\r\n\t\t\t\"28\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2ecbc964-212b-4d87-b6d6-8dd86869180c\",\r\n\t\t\t\"6\",\r\n\t\t\t\"2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"0744db7c-e5f3-44c6-bcde-da6ef23261c6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"3\",\r\n\t\t\t\"21\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"0a864c70-4eb1-4111-9a05-25fc6159dd8a\",\r\n\t\t\t\"6\",\r\n\t\t\t\"4\",\r\n\t\t\t\"36\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"5d7a76f5-407e-45ad-9d3e-caccd110bfe0\",\r\n\t\t\t\"7\",\r\n\t\t\t\"1\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"5909e7a8-e402-4e76-b88d-bd152174fbca\",\r\n\t\t\t\"7\",\r\n\t\t\t\"2\",\r\n\t\t\t\"34\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"524bc770-e069-449b-9973-43efc938f351\",\r\n\t\t\t\"7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"16\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"70cba2b2-df16-42ad-99fd-b43e243cbfdc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"4\",\r\n\t\t\t\"11\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"9456f46a-72a4-4e2f-900e-26a4d056901a\",\r\n\t\t\t\"8\",\r\n\t\t\t\"1\",\r\n\t\t\t\"57\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"ab4c4997-f3ea-4a47-ad22-7c2cc73cd5cc\",\r\n\t\t\t\"8\",\r\n\t\t\t\"2\",\r\n\t\t\t\"77\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"b581068d-e240-4ba0-8df5-228fa2c2f4db\",\r\n\t\t\t\"8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"84\",\r\n\t\t\t\"17\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6e54de07-9b2e-4f88-9e31-28101efc2c5e\",\r\n\t\t\t\"8\",\r\n\t\t\t\"4\",\r\n\t\t\t\"92\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"8160083f-0c23-4cb6-824d-9b9bd7226437\",\r\n\t\t\t\"9\",\r\n\t\t\t\"1\",\r\n\t\t\t\"73\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"b682d671-e83f-4c90-aa92-e52184e6d72a\",\r\n\t\t\t\"9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"5bf2357a-b346-41bc-bad2-faba1e35994b\",\r\n\t\t\t\"9\",\r\n\t\t\t\"3\",\r\n\t\t\t\"86\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"7fe198f5-b983-4333-8615-9c801218ad61\",\r\n\t\t\t\"9\",\r\n\t\t\t\"4\",\r\n\t\t\t\"94\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"07126092-8b56-4d5e-8f98-118873f2463d\",\r\n\t\t\t\"10\",\r\n\t\t\t\"1\",\r\n\t\t\t\"46\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"9d1a3fa0-c20b-447b-8b10-bd48a269ff61\",\r\n\t\t\t\"10\",\r\n\t\t\t\"2\",\r\n\t\t\t\"9\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"d6c3a7cf-da8c-41be-8656-0312c86dac10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"3\",\r\n\t\t\t\"56\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"d6f29725-e27b-49ea-b2a4-0e8999189728\",\r\n\t\t\t\"10\",\r\n\t\t\t\"4\",\r\n\t\t\t\"27\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"fac0c26d-0dee-4d30-9a53-82d1d78c741f\",\r\n\t\t\t\"11\",\r\n\t\t\t\"1\",\r\n\t\t\t\"36\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"b634d60f-a7bd-4687-99fe-c92e5b067a90\",\r\n\t\t\t\"11\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"5a08eead-02c6-4146-9114-15d04fd5a9eb\",\r\n\t\t\t\"11\",\r\n\t\t\t\"3\",\r\n\t\t\t\"49\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"080603ca-d4ad-4406-9a70-180bffe645b0\",\r\n\t\t\t\"11\",\r\n\t\t\t\"4\",\r\n\t\t\t\"18\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"e6ce6248-4051-40eb-af4b-ecde2569c82a\",\r\n\t\t\t\"12\",\r\n\t\t\t\"1\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"fbf3a70f-1fd0-414a-ac4e-a0f180d4cbb3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2\",\r\n\t\t\t\"27\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48b392cb-3179-42c2-8321-05eb6c57afd4\",\r\n\t\t\t\"12\",\r\n\t\t\t\"3\",\r\n\t\t\t\"18\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"2005942c-616e-4747-8ee8-0ad2f66966b6\",\r\n\t\t\t\"12\",\r\n\t\t\t\"4\",\r\n\t\t\t\"57\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"85d04aea-36cf-4b01-ba39-4ede2e9f5c71\",\r\n\t\t\t\"13\",\r\n\t\t\t\"1\",\r\n\t\t\t\"66\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"314a5e14-0bea-458c-b314-602654b36c21\",\r\n\t\t\t\"13\",\r\n\t\t\t\"2\",\r\n\t\t\t\"84\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"93ffeae1-8695-4b8d-94b7-1f59731b804b\",\r\n\t\t\t\"13\",\r\n\t\t\t\"3\",\r\n\t\t\t\"29\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"d683a7eb-d4d3-46f4-aef1-a9c20ed128ca\",\r\n\t\t\t\"13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"73\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36f04eb5-63e0-4d60-9a58-9d48e1c01f50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"1\",\r\n\t\t\t\"28\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"3cdd899e-55b0-4eac-ab3f-9f40a2626963\",\r\n\t\t\t\"14\",\r\n\t\t\t\"2\",\r\n\t\t\t\"7\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"af24c30b-e91f-4381-be65-34d7412f73b0\",\r\n\t\t\t\"14\",\r\n\t\t\t\"3\",\r\n\t\t\t\"46\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"f0059745-7bb4-4df0-9363-1a01bc7490d5\",\r\n\t\t\t\"14\",\r\n\t\t\t\"4\",\r\n\t\t\t\"71\",\r\n\t\t\t\"9\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1243686c-5eea-4d33-b2bf-25b7d34150be\",\r\n\t\t\t\"15\",\r\n\t\t\t\"1\",\r\n\t\t\t\"79\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"e8b6a8ec-90aa-4636-9a7a-563418ca54fc\",\r\n\t\t\t\"15\",\r\n\t\t\t\"2\",\r\n\t\t\t\"98\",\r\n\t\t\t\"18\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"c8f6c6f6-b66f-4a1d-8df2-ced6953e176d\",\r\n\t\t\t\"15\",\r\n\t\t\t\"3\",\r\n\t\t\t\"59\",\r\n\t\t\t\"12\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"bc7b2c2e-1b32-4981-b9b1-713d6df8d43e\",\r\n\t\t\t\"15\",\r\n\t\t\t\"4\",\r\n\t\t\t\"74\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"8d23c31b-cd3b-48b6-978c-32061714cf5e\",\r\n\t\t\t\"16\",\r\n\t\t\t\"1\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"71b7d84a-6b59-4f7b-a2e0-92b2e7799a88\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2\",\r\n\t\t\t\"96\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"2c4940bc-9775-4733-aec3-0599692a00e3\",\r\n\t\t\t\"16\",\r\n\t\t\t\"3\",\r\n\t\t\t\"33\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"66c29362-af06-4280-92cd-65ba393dd025\",\r\n\t\t\t\"16\",\r\n\t\t\t\"4\",\r\n\t\t\t\"9\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"d9771cde-0161-40c8-87ea-0e845d2d7f87\",\r\n\t\t\t\"17\",\r\n\t\t\t\"1\",\r\n\t\t\t\"11\",\r\n\t\t\t\"6\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"59879668-5fa8-4ba7-a930-823c30426ccb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"2\",\r\n\t\t\t\"36\",\r\n\t\t\t\"20\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"5d187628-c118-4f45-aeba-c81328d33f0e\",\r\n\t\t\t\"17\",\r\n\t\t\t\"3\",\r\n\t\t\t\"56\",\r\n\t\t\t\"8\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"86216685-143a-402d-8d52-cccf76c8f949\",\r\n\t\t\t\"17\",\r\n\t\t\t\"4\",\r\n\t\t\t\"62\",\r\n\t\t\t\"8\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"dfc52e00-8a51-4f91-b0b3-a364697da9aa\",\r\n\t\t\t\"18\",\r\n\t\t\t\"1\",\r\n\t\t\t\"68\",\r\n\t\t\t\"5\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"9b745a60-23af-4530-8a10-c002b4cf5061\",\r\n\t\t\t\"18\",\r\n\t\t\t\"2\",\r\n\t\t\t\"33\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"ed32ad4d-711e-4774-b83b-f98aa3e6c4fa\",\r\n\t\t\t\"18\",\r\n\t\t\t\"3\",\r\n\t\t\t\"79\",\r\n\t\t\t\"19\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"d3f269e0-b77e-47e7-906d-554b93060ba6\",\r\n\t\t\t\"18\",\r\n\t\t\t\"4\",\r\n\t\t\t\"78\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"810e5db4-c7ca-466e-a9d7-cb7edde9e531\",\r\n\t\t\t\"19\",\r\n\t\t\t\"1\",\r\n\t\t\t\"60\",\r\n\t\t\t\"4\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"34f406a9-60c6-4957-a644-4a9e16e52382\",\r\n\t\t\t\"19\",\r\n\t\t\t\"2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"14\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"6cf3bc95-85ff-499c-a1f4-84a565f4a4d2\",\r\n\t\t\t\"19\",\r\n\t\t\t\"3\",\r\n\t\t\t\"14\",\r\n\t\t\t\"13\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"a125b0f7-a1b4-4be5-bbcd-50efffa8fbd3\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4\",\r\n\t\t\t\"70\",\r\n\t\t\t\"20\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"0e7688f7-7e7f-435b-bd86-fa541aa4eb13\",\r\n\t\t\t\"20\",\r\n\t\t\t\"1\",\r\n\t\t\t\"77\",\r\n\t\t\t\"16\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"c7cb7363-9d1c-4080-82d7-ef302280baf1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"2\",\r\n\t\t\t\"69\",\r\n\t\t\t\"15\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"7008760c-5e8f-4d6f-9986-c47e8d2a23cb\",\r\n\t\t\t\"20\",\r\n\t\t\t\"3\",\r\n\t\t\t\"46\",\r\n\t\t\t\"7\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"c371cb1e-c0f9-4129-8900-460fff2b58ff\",\r\n\t\t\t\"20\",\r\n\t\t\t\"4\",\r\n\t\t\t\"35\",\r\n\t\t\t\"20\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/observations",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"observations"
									]
								},
								"description": "PUT ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/variables"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c413093-80b6-4f17-85b7-73f98cbd4bb1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c3cb9958-599f-4b80-8a7c-ba492cb28373",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with invalid crop",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3541581a-154e-4ae9-b801-0954772f513c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid crop \"+pm.environment.get(\"invalidCrop\")+\" for URL:/crops/\"+pm.environment.get(\"invalidCrop\")+\"/programs/\"+pm.environment.get(\"api_program_id\")+\"/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/set-as-missing\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "65968d07-4551-4140-a54f-3975186aa98a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{invalidCrop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{invalidCrop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with invalid program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95eb8efd-cc84-4c0d-81e9-42b893b3952b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid program: invalid for crop: \"+pm.environment.get(\"crop\")+\" for service with path /crops/\"+pm.environment.get(\"crop\")+\"/programs/invalid/studies/\"+pm.environment.get(\"studyId\")+\"/datasets/\"+pm.environment.get(\"study_subobs2_datasetId\")+\"/observation-units/drafts/set-as-missing\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4447a6ca-7632-4f83-89d4-efa292f343dd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/invalid/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"invalid",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "606da4eb-ca7f-4fdc-bbc4-ebf39548156c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6b690aea-c493-4acf-849a-8ac6242dce6e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_subobs2_datasetId}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with non-existing datasetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16964f3c-a11e-4d43-a388-3570712f8aee",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c14d2459-1ecd-4780-887e-ca313fb010b6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_dataset_id}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_dataset_id}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Set out of bound observations as missing with datasetId that does not belong to the study",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f124a9e-b474-4160-bdd6-05c0616d8341",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+pm.environment.get(\"study_plot_dataset_id_noPhenoCount\")+\" does not belong to the study \"+pm.environment.get(\"studyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f9fd607e-80ed-4536-bfe7-1f1a1de1195c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draftMode\": true,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": 18090,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_dataset_id_noPhenoCount}}/observation-units/drafts/set-as-missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_dataset_id_noPhenoCount}}",
										"observation-units",
										"drafts",
										"set-as-missing"
									]
								},
								"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observation-units​/drafts​/set-as-missing"
							},
							"response": []
						},
						{
							"name": "Retrieve observation units of after updating filtered phenotype",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a35b6027-3bcf-4c60-a304-6370ea96e8d6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check records filtered \", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"pm.test(\"Check records total\", function () {",
											"    pm.expect(jsonData.recordsFiltered).to.eql(80);",
											"});",
											"",
											"//Check data at index 0",
											"",
											"var index = 0;",
											"",
											"var observationUnitIds = [];",
											"var observationIds = [];",
											"",
											"",
											"for (var i = 0; i < jsonData.data.length; i++){",
											"  var selectedData = jsonData.data[i];",
											"  observationUnitIds[i] = selectedData.observationUnitId;",
											"  observationIds[i] = selectedData.variables.PestPressure_0_9.observationId",
											"  console.log(observationIds[i]);",
											"}",
											"",
											"pm.environment.unset(\"observationUnitIds\");",
											"pm.environment.unset(\"observationIds\");",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5846cb48-b39d-4f47-83f0-400de874be2a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"draw\": 1,\r\n\t\"sortedRequest\": {\r\n\t\t\"pageSize\": 50,\r\n\t\t\"pageNumber\": 1,\r\n\t\t\"sortBy\": 8200,\r\n\t\t\"sortOrder\": \"asc\"\r\n\t},\r\n\t\"instanceId\": 1,\r\n\t\"draftMode\": false,\r\n\t\"filter\": {\r\n\t\t\"byOutOfBound\": null,\r\n\t\t\"byMissing\": null,\r\n\t\t\"byOutOfSync\": null,\r\n\t\t\"byOverwritten\": null,\r\n\t\t\"variableId\": null,\r\n\t\t\"filterColumns\": [],\r\n\t\t\"filteredValues\": {},\r\n\t\t\"filteredTextValues\": {},\r\n\t\t\"variableTypeMap\": {\r\n\t\t\t\"8170\": null,\r\n\t\t\t\"8200\": \"EXPERIMENTAL_DESIGN\",\r\n\t\t\t\"8201\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8207\": \"OBSERVATION_UNIT\",\r\n\t\t\t\"8230\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8240\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8250\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"8255\": \"GERMPLASM_DESCRIPTOR\",\r\n\t\t\t\"18010\": \"TRAIT\",\r\n\t\t\t\"18090\": \"TRAIT\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/table",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"table"
									]
								},
								"description": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/table"
							},
							"response": []
						},
						{
							"name": "Delete observation of catgorical variable with missing values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c43eeeae-974d-4b36-9a98-45468fb935f9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var observationUnitIds = [];",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));",
											"var observationIds = [];",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));",
											"",
											"if(observationUnitIds.length && observationIds.length > 0){",
											"postman.setNextRequest(\"Delete observation of catgorical variable with missing values\");",
											"}else{",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9afa8a4b-83f6-432c-b0ac-b4b26f564e0e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"var observationUnitIds = [];\r",
											"observationUnitIds = JSON.parse(pm.environment.get(\"observationUnitIds\"));\r",
											"var observationIds = [];\r",
											"observationIds = JSON.parse(pm.environment.get(\"observationIds\"));\r",
											"console.log(observationUnitIds.length);\r",
											"var current_observationUnitId = observationUnitIds.shift();\r",
											"var current_observationId = observationIds.shift();\r",
											"pm.environment.set(\"observationUnitId\", current_observationUnitId);\r",
											"pm.environment.set(\"observationId\", current_observationId);\r",
											"pm.environment.set(\"observationUnitIds\", JSON.stringify(observationUnitIds));\r",
											"pm.environment.set(\"observationIds\", JSON.stringify(observationIds));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"processWarnings\": true,\r\n\t\"data\": [\r\n\t\t[\r\n\t\t\t\"TRIAL_INSTANCE\",\r\n\t\t\t\"PI_NAME\",\r\n\t\t\t\"EXPT_DESIGN\",\r\n\t\t\t\"LOCATION_ID\",\r\n\t\t\t\"LOCATION_NAME\",\r\n\t\t\t\"Crop_season_Code\",\r\n\t\t\t\"ENTRY_TYPE\",\r\n\t\t\t\"GID\",\r\n\t\t\t\"DESIGNATION\",\r\n\t\t\t\"ENTRY_NO\",\r\n\t\t\t\"OBS_UNIT_ID\",\r\n\t\t\t\"PLOT_NO\",\r\n\t\t\t\"WeedPressure_number\",\r\n\t\t\t\"Grain_yield\",\r\n\t\t\t\"Biomas_yield\",\r\n\t\t\t\"InputVariable\",\r\n\t\t\t\"NPSEL\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"PKWDPtLOzD8Sz\",\r\n\t\t\t\"1\",\r\n\t\t\t\"21\",\r\n\t\t\t\"23\",\r\n\t\t\t\"40\",\r\n\t\t\t\"338\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"PKWDP6ME6bt1l\",\r\n\t\t\t\"2\",\r\n\t\t\t\"15\",\r\n\t\t\t\"12\",\r\n\t\t\t\"45\",\r\n\t\t\t\"285\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"PKWDPe2za6TM7\",\r\n\t\t\t\"3\",\r\n\t\t\t\"12\",\r\n\t\t\t\"41\",\r\n\t\t\t\"32\",\r\n\t\t\t\"176\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"PKWDPEV6LPs1N\",\r\n\t\t\t\"4\",\r\n\t\t\t\"46\",\r\n\t\t\t\"49\",\r\n\t\t\t\"33\",\r\n\t\t\t\"488\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"PKWDPU27n9e9L\",\r\n\t\t\t\"5\",\r\n\t\t\t\"33\",\r\n\t\t\t\"41\",\r\n\t\t\t\"28\",\r\n\t\t\t\"397\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"PKWDPmpZgUu6S\",\r\n\t\t\t\"6\",\r\n\t\t\t\"48\",\r\n\t\t\t\"17\",\r\n\t\t\t\"35\",\r\n\t\t\t\"463\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"PKWDP0M9lGBzz\",\r\n\t\t\t\"7\",\r\n\t\t\t\"34\",\r\n\t\t\t\"16\",\r\n\t\t\t\"49\",\r\n\t\t\t\"105\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"PKWDPsCKr80ks\",\r\n\t\t\t\"8\",\r\n\t\t\t\"17\",\r\n\t\t\t\"28\",\r\n\t\t\t\"15\",\r\n\t\t\t\"379\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"PKWDPDotBpZ1y\",\r\n\t\t\t\"9\",\r\n\t\t\t\"45\",\r\n\t\t\t\"28\",\r\n\t\t\t\"49\",\r\n\t\t\t\"424\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"PKWDPCYuyqdql\",\r\n\t\t\t\"10\",\r\n\t\t\t\"41\",\r\n\t\t\t\"26\",\r\n\t\t\t\"10\",\r\n\t\t\t\"188\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"PKWDP0fPOkMaC\",\r\n\t\t\t\"11\",\r\n\t\t\t\"39\",\r\n\t\t\t\"20\",\r\n\t\t\t\"31\",\r\n\t\t\t\"471\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"PKWDPGN6nYdv2\",\r\n\t\t\t\"12\",\r\n\t\t\t\"48\",\r\n\t\t\t\"46\",\r\n\t\t\t\"12\",\r\n\t\t\t\"395\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"PKWDPZ19QRNrq\",\r\n\t\t\t\"13\",\r\n\t\t\t\"24\",\r\n\t\t\t\"27\",\r\n\t\t\t\"17\",\r\n\t\t\t\"340\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"PKWDPPh1TNHCh\",\r\n\t\t\t\"14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"36\",\r\n\t\t\t\"13\",\r\n\t\t\t\"299\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"PKWDPH6Q51k29\",\r\n\t\t\t\"15\",\r\n\t\t\t\"37\",\r\n\t\t\t\"20\",\r\n\t\t\t\"15\",\r\n\t\t\t\"408\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"PKWDP2mpwUmS5\",\r\n\t\t\t\"16\",\r\n\t\t\t\"36\",\r\n\t\t\t\"40\",\r\n\t\t\t\"50\",\r\n\t\t\t\"472\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"PKWDP07BrGxf2\",\r\n\t\t\t\"17\",\r\n\t\t\t\"25\",\r\n\t\t\t\"29\",\r\n\t\t\t\"49\",\r\n\t\t\t\"138\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"PKWDPROG6tAJg\",\r\n\t\t\t\"18\",\r\n\t\t\t\"45\",\r\n\t\t\t\"12\",\r\n\t\t\t\"32\",\r\n\t\t\t\"356\",\r\n\t\t\t\"2\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"PKWDPUWYGDKwm\",\r\n\t\t\t\"19\",\r\n\t\t\t\"36\",\r\n\t\t\t\"44\",\r\n\t\t\t\"37\",\r\n\t\t\t\"423\",\r\n\t\t\t\"3\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"1\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9001\",\r\n\t\t\t\"Africa Rice Centre\",\r\n\t\t\t\"0\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"PKWDPVGUhe5T1\",\r\n\t\t\t\"20\",\r\n\t\t\t\"49\",\r\n\t\t\t\"49\",\r\n\t\t\t\"50\",\r\n\t\t\t\"193\",\r\n\t\t\t\"1\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"21\",\r\n\t\t\t\"GP1\",\r\n\t\t\t\"1\",\r\n\t\t\t\"dc6a207b-b4eb-42d5-a5b7-b1262193e961\",\r\n\t\t\t\"1\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"125\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"22\",\r\n\t\t\t\"GP2\",\r\n\t\t\t\"2\",\r\n\t\t\t\"f425bdec-fdc1-41cb-8d4b-19179d9ed7a9\",\r\n\t\t\t\"2\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"337\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"23\",\r\n\t\t\t\"GP3\",\r\n\t\t\t\"3\",\r\n\t\t\t\"9fe3ff35-a57f-4dc2-b682-d69881ebd3e8\",\r\n\t\t\t\"3\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"317\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"24\",\r\n\t\t\t\"GP4\",\r\n\t\t\t\"4\",\r\n\t\t\t\"48851c5a-132f-4df2-8139-1b0f8ba4ea13\",\r\n\t\t\t\"4\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"497\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"25\",\r\n\t\t\t\"GP5\",\r\n\t\t\t\"5\",\r\n\t\t\t\"97b9bbb8-e390-4c6c-a688-3676c7a322a1\",\r\n\t\t\t\"5\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"496\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"26\",\r\n\t\t\t\"GP6\",\r\n\t\t\t\"6\",\r\n\t\t\t\"5d53e82d-ea2c-42de-8255-5150462cc9e2\",\r\n\t\t\t\"6\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"114\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"27\",\r\n\t\t\t\"GP7\",\r\n\t\t\t\"7\",\r\n\t\t\t\"bab7f29e-f1ec-4d0a-91a3-08cc0121fffc\",\r\n\t\t\t\"7\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"102\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"28\",\r\n\t\t\t\"GP8\",\r\n\t\t\t\"8\",\r\n\t\t\t\"6117a4e4-2d58-4020-a047-7d0f568379df\",\r\n\t\t\t\"8\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"29\",\r\n\t\t\t\"GP9\",\r\n\t\t\t\"9\",\r\n\t\t\t\"41c3a00c-c372-442c-b87c-b7329e1457ac\",\r\n\t\t\t\"9\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"140\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"30\",\r\n\t\t\t\"GP10\",\r\n\t\t\t\"10\",\r\n\t\t\t\"0542e1ee-2535-44f7-bf41-fb4787f2de52\",\r\n\t\t\t\"10\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"280\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"31\",\r\n\t\t\t\"GP11\",\r\n\t\t\t\"11\",\r\n\t\t\t\"02ccc497-fb94-4dcc-83dd-21f5db43f43e\",\r\n\t\t\t\"11\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"437\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"32\",\r\n\t\t\t\"GP12\",\r\n\t\t\t\"12\",\r\n\t\t\t\"05883cec-d339-4cd0-b763-67f7d9d543ff\",\r\n\t\t\t\"12\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"354\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"33\",\r\n\t\t\t\"GP13\",\r\n\t\t\t\"13\",\r\n\t\t\t\"74a8d502-8b17-4d96-8741-b38d294ae601\",\r\n\t\t\t\"13\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"430\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"34\",\r\n\t\t\t\"GP14\",\r\n\t\t\t\"14\",\r\n\t\t\t\"72476b15-4090-46bc-be2f-e4e86171af50\",\r\n\t\t\t\"14\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"478\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"35\",\r\n\t\t\t\"GP15\",\r\n\t\t\t\"15\",\r\n\t\t\t\"980a592b-bf45-4cbe-8ede-2c0d1d6302c4\",\r\n\t\t\t\"15\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"462\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"36\",\r\n\t\t\t\"GP16\",\r\n\t\t\t\"16\",\r\n\t\t\t\"e50aeb0a-42ef-45f6-a247-e426f0cbd39c\",\r\n\t\t\t\"16\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"271\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"37\",\r\n\t\t\t\"GP17\",\r\n\t\t\t\"17\",\r\n\t\t\t\"b7440ad5-4836-44e8-96ba-687e1c7fb0bb\",\r\n\t\t\t\"17\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"479\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"38\",\r\n\t\t\t\"GP18\",\r\n\t\t\t\"18\",\r\n\t\t\t\"a0b745fd-d1de-45d0-9e86-42021ce43d43\",\r\n\t\t\t\"18\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"305\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"39\",\r\n\t\t\t\"GP19\",\r\n\t\t\t\"19\",\r\n\t\t\t\"4fca59a2-84c1-40d2-b5a7-86ab957f00cc\",\r\n\t\t\t\"19\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"372\",\r\n\t\t\t\"\"\r\n\t\t],\r\n\t\t[\r\n\t\t\t\"2\",\r\n\t\t\t\"Admin Admin\",\r\n\t\t\t\"ELO\",\r\n\t\t\t\"9008\",\r\n\t\t\t\"INT POTATO CENTER\",\r\n\t\t\t\"1\",\r\n\t\t\t\"T\",\r\n\t\t\t\"40\",\r\n\t\t\t\"GP20\",\r\n\t\t\t\"20\",\r\n\t\t\t\"9129d101-c4ac-43cf-a818-079d4365c2d5\",\r\n\t\t\t\"20\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"\",\r\n\t\t\t\"459\",\r\n\t\t\t\"\"\r\n\t\t]\r\n\t],\r\n\t\"draftMode\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_subobs2_datasetId}}/observationUnits/{{observationUnitId}}/observations/{{observationId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_subobs2_datasetId}}",
										"observationUnits",
										"{{observationUnitId}}",
										"observations",
										"{{observationId}}"
									]
								},
								"description": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/observationUnits​/{observationUnitId}​/observations​/{observationId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "variable-filter-resource",
			"item": [
				{
					"name": "Verify response when filtered by required parameters only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b6e7942-c234-49ae-bb43-3d7229462473",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Note: Checked details of first, middle and last property only for all properties are too many.\r",
									"pm.test(\"Check ACCNO variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(\"8310\");\r",
									"    pm.expect(jsonData[0].name).to.eql(\"ACCNO\");\r",
									"    pm.expect(jsonData[0].description).to.eql(\"Germplasm ID - Assigned (Accession name)\");\r",
									"    //Check properties\r",
									"    pm.expect(jsonData[0].property.id).to.eql(\"2205\");\r",
									"    pm.expect(jsonData[0].property.name).to.eql(\"Germplasm id\");\r",
									"    pm.expect(jsonData[0].property.description).to.eql(\"Germplasm identifier\");\r",
									"    \r",
									"    //Check method\r",
									"    pm.expect(jsonData[0].method.id).to.eql(\"4030\");\r",
									"    pm.expect(jsonData[0].method.name).to.eql(\"Assigned\");\r",
									"    pm.expect(jsonData[0].method.description).to.eql(\"Term, name or id assigned\");    \r",
									"    \r",
									"   //Check scale\r",
									"    pm.expect(jsonData[0].scale.id).to.eql(\"6110\");\r",
									"    pm.expect(jsonData[0].scale.name).to.eql(\"Accession name\");\r",
									"    pm.expect(jsonData[0].scale.description).to.eql(\"Unique accession number or name in a genebank or germplasm collection\");    \r",
									"    \r",
									"    \r",
									"   //Check variableTypes\r",
									"    pm.expect(jsonData[0].variableTypes[0].id).to.eql(\"1804\");\r",
									"    pm.expect(jsonData[0].variableTypes[0].name).to.eql(\"Germplasm Descriptor\");\r",
									"    pm.expect(jsonData[0].variableTypes[0].description).to.eql(\"Information to be recorded about each germplasm in a study.\"); \r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Check NOTES variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[81].id).to.eql(\"8390\");\r",
									"    pm.expect(jsonData[81].name).to.eql(\"NOTES\");\r",
									"    pm.expect(jsonData[81].description).to.eql(\"Field notes - observed (text)\");\r",
									"    //Check properties\r",
									"    pm.expect(jsonData[81].property.id).to.eql(\"2065\");\r",
									"    pm.expect(jsonData[81].property.name).to.eql(\"Comment\");\r",
									"    pm.expect(jsonData[81].property.description).to.eql(\"Comment\");\r",
									"    \r",
									"    //Check method\r",
									"    pm.expect(jsonData[81].method.id).to.eql(\"4110\");\r",
									"    pm.expect(jsonData[81].method.name).to.eql(\"Observed\");\r",
									"    pm.expect(jsonData[81].method.description).to.eql(\"Value recorded after observation\");    \r",
									"    \r",
									"   //Check scale\r",
									"    pm.expect(jsonData[81].scale.id).to.eql(\"6020\");\r",
									"    pm.expect(jsonData[81].scale.name).to.eql(\"Text\");\r",
									"    pm.expect(jsonData[81].scale.description).to.eql(\"Text\");    \r",
									"    \r",
									"    \r",
									"   //Check variableTypes\r",
									"    pm.expect(jsonData[81].variableTypes[0].id).to.eql(\"1808\");\r",
									"    pm.expect(jsonData[81].variableTypes[0].name).to.eql(\"Trait\");\r",
									"    pm.expect(jsonData[81].variableTypes[0].description).to.eql(\"Characteristics of a germplasm to be recorded during a study.\");   \r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Check TranspltD_date variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[166].id).to.eql(\"8384\");\r",
									"    pm.expect(jsonData[166].name).to.eql(\"TranspltD_date\");\r",
									"    pm.expect(jsonData[166].description).to.eql(\"Date Transplanted -applied (yyyymmdd)\");\r",
									"    //Check properties\r",
									"    pm.expect(jsonData[166].property.id).to.eql(\"2056\");\r",
									"    pm.expect(jsonData[166].property.name).to.eql(\"Transplanting date\");\r",
									"    pm.expect(jsonData[166].property.description).to.eql(\"Transplanting date\");\r",
									"    \r",
									"    //Check method\r",
									"    pm.expect(jsonData[166].method.id).to.eql(\"4020\");\r",
									"    pm.expect(jsonData[166].method.name).to.eql(\"Applied\");\r",
									"    pm.expect(jsonData[166].method.description).to.eql(\"Factor applied\");    \r",
									"    \r",
									"    \r",
									"   //Check scale\r",
									"    pm.expect(jsonData[166].scale.id).to.eql(\"17275\");\r",
									"    pm.expect(jsonData[166].scale.name).to.eql(\"Date (yyyymmdd) of TranspltD_date\");\r",
									"    pm.expect(jsonData[166].scale.description).to.eql(\"Date (yyyymmdd) ofTranspltD_date_generated\");    \r",
									"    \r",
									"    \r",
									"   //Check variableTypes\r",
									"    pm.expect(jsonData[166].variableTypes[0].id).to.eql(\"1806\");\r",
									"    pm.expect(jsonData[166].variableTypes[0].name).to.eql(\"Environment Detail\");\r",
									"    pm.expect(jsonData[166].variableTypes[0].description).to.eql(\"Administrative details to be tracked per environment.\");   \r",
									"    \r",
									"    pm.expect(jsonData[166].variableTypes[1].id).to.eql(\"1805\");\r",
									"    pm.expect(jsonData[166].variableTypes[1].name).to.eql(\"Study Detail\");\r",
									"    pm.expect(jsonData[166].variableTypes[1].description).to.eql(\"Administrative details to be tracked per study.\");   \r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "53b221bf-b18a-4691-a173-3311e65bf351",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by propertyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6110e346-de6a-4dfa-967c-4a630b32a17c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all property ids are equal to input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length; i++) { \r",
									"    pm.expect(jsonData[i].property.id).to.eql(pm.environment.get(\"trial_instance_property_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "704bea14-735a-4900-ac45-fd6206ad0ba0",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds={{trial_instance_property_id}}&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": "{{trial_instance_property_id}}"
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by methodId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ef62a32-93d5-47bf-8665-4c7121f298d4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all method ids are equal to input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length; i++) { \r",
									"    pm.expect(jsonData[i].method.id).to.eql(pm.environment.get(\"weighed_method_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d619f55-d29c-4488-81df-5328be9408a6",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds={{weighed_method_id}}&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": "{{weighed_method_id}}"
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by scaleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96ef6e7d-86d6-405b-a8e0-741c98d6005b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all scale ids are equal to input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length; i++) { \r",
									"    pm.expect(jsonData[i].scale.id).to.eql(pm.environment.get(\"number_scale_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c059b5d6-01f0-453b-a372-b2b49f59d489",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds={{number_scale_id}}&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": "{{number_scale_id}}"
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by variableId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35d54a76-85bd-4780-aa0e-324aeb2f1ddd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all variableIds are equal to input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length ; i++) { \r",
									"    pm.expect(jsonData[i].id).to.eql(pm.environment.get(\"study_biomass_cvterm_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "569bd0b0-059b-480b-96a5-c88b8e949452",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds={{study_biomass_cvterm_id}}&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": "{{study_biomass_cvterm_id}}"
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by exclusionVariableIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "acd73593-0bc7-4570-ba15-cf12e6aa66d4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check input variableId is not included in the result\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length ; i++) { \r",
									"    pm.expect(jsonData[i].id).to.not.eql(pm.environment.get(\"study_biomass_cvterm_id\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "57a957aa-f358-4f73-b718-6291562ba22f",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds=&exclusionVariableIds={{study_biomass_cvterm_id}}&dataTypeIds=&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": "{{study_biomass_cvterm_id}}"
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by dataTypeIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e61e2f77-26a1-4dbc-a81f-469bd8bb8f31",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check all dataTypeIds are equal to the input parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var i;\r",
									"    for (i = 0; i < jsonData.length ; i++) { \r",
									"    pm.expect(jsonData[i].scale.dataType.id).to.eql(pm.environment.get(\"numeric_dataTypeId\"));\r",
									"    }\r",
									"});    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7b4222db-94e9-4bfc-b31d-2a63a1599f7d",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds={{numeric_dataTypeId}}&variableTypeIds=&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": "{{numeric_dataTypeId}}"
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by variableTypeIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39cee760-2078-400c-b23c-3c640e1d1e7e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if input variableType is present in all variables\", function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  var i,j;\r",
									"  for (i = 0; i < jsonData.length ; i++) {\r",
									"      var variableTypes = jsonData[i].variableTypes;\r",
									"      console.log(\"variable:\"+jsonData[i].id);\r",
									"      console.log(\"variableTypeLength:\"+variableTypes.length)\r",
									"      \r",
									"      for (j=0; j < variableTypes.length; j++) {\r",
									"          if(variableTypes[j].id==\"1808\"){\r",
									"              pm.expect(variableTypes[j].id).to.eql(pm.environment.get(\"variableTypeId_trait\"));\r",
									"              console.log(\"index:\"+j+ \"Found! \"+ \"variableTypeId:\"+ variableTypes[j].id);\r",
									"          }else{\r",
									"              console.log(\"index:\"+j+ \"Not Found! \"+ \"variableTypeId:\"+ variableTypes[j].id);\r",
									"          }\r",
									"          \r",
									"      }\r",
									"  }\r",
									" \r",
									"});    \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "73904179-6eda-489b-8812-4c7c25275278",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds={{variableTypeId_trait}}&propertyClasses=",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": "{{variableTypeId_trait}}"
								},
								{
									"key": "propertyClasses",
									"value": ""
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				},
				{
					"name": "Verify response when filtered by property classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59ecafbf-cc94-40d7-a387-957a8fb4a10c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if input property class is present in all variables\", function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  var i,j;\r",
									"  for (i = 0; i < jsonData.length ; i++) {\r",
									"      var propertyClasses = jsonData[i].property.classes;\r",
									"      console.log(\"variable:\"+jsonData[i].id);\r",
									"      console.log(\"propertyClassLength:\"+ propertyClasses.length)\r",
									"      \r",
									"      for (j=0; j < propertyClasses.length; j++) {\r",
									"          if(propertyClasses[j]==\"Agronomic\"){\r",
									"              pm.expect(propertyClasses[j]).to.eql(\"Agronomic\");\r",
									"              console.log(\"index:\"+j+ \"Found! \"+ \"propertyClassId:\"+ propertyClasses[j]);\r",
									"          }else{\r",
									"              console.log(\"index:\"+j+ \"Not Found! \"+ \"propertyClassId:\"+ propertyClasses[j]);\r",
									"          }\r",
									"          \r",
									"      }\r",
									"  }\r",
									" \r",
									"});    \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "10f96c81-e7c9-4dad-ab55-ec920444be06",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/filter?programUUID={{api_program_id}}&propertyIds=&methodIds=&scaleIds=&variableIds=&exclusionVariableIds=&dataTypeIds=&variableTypeIds=&propertyClasses=Agronomic",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"filter"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								},
								{
									"key": "propertyIds",
									"value": ""
								},
								{
									"key": "methodIds",
									"value": ""
								},
								{
									"key": "scaleIds",
									"value": ""
								},
								{
									"key": "variableIds",
									"value": ""
								},
								{
									"key": "exclusionVariableIds",
									"value": ""
								},
								{
									"key": "dataTypeIds",
									"value": ""
								},
								{
									"key": "variableTypeIds",
									"value": ""
								},
								{
									"key": "propertyClasses",
									"value": "Agronomic"
								}
							]
						},
						"description": "GET /ontology/{cropname}/filtervariables"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "crop-resource",
			"item": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "class-resource",
			"item": [
				{
					"name": "Verify response code and returned classes when entered valid crop",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "23b10edd-30ed-4de3-a0fd-3877cc61a0f7",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1dcaf3f6-a724-46cd-98c2-d48ec24e38eb",
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check returned classes\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.equal(\"Abiotic condition\");",
									"    pm.expect(jsonData[1]).to.equal(\"Abiotic stress\");",
									"    pm.expect(jsonData[2]).to.equal(\"Agronomic\");",
									"    pm.expect(jsonData[3]).to.equal(\"Biochemical trait\");",
									"    pm.expect(jsonData[4]).to.equal(\"Biotic condition\");",
									"    pm.expect(jsonData[5]).to.equal(\"Biotic stress\");",
									"    pm.expect(jsonData[6]).to.equal(\"Breeding methods\");",
									"    pm.expect(jsonData[7]).to.equal(\"Breedingprocess\");",
									"    pm.expect(jsonData[8]).to.equal(\"Bulking breeding methods\");",
									"    pm.expect(jsonData[9]).to.equal(\"Climatic condition\");",
									"    pm.expect(jsonData[10]).to.equal(\"Crop research ontology\");",
									"    pm.expect(jsonData[11]).to.equal(\"Crop trait ontology\");",
									"    pm.expect(jsonData[12]).to.equal(\"Crossing methods\");",
									"    pm.expect(jsonData[13]).to.equal(\"Cultivar formation methods\");",
									"    pm.expect(jsonData[14]).to.equal(\"Cytogenetic manipulation\");",
									"    pm.expect(jsonData[15]).to.equal(\"Dataset Condition\");",
									"    pm.expect(jsonData[16]).to.equal(\"Derivative breeding methods\");",
									"    pm.expect(jsonData[17]).to.equal(\"Disease resistance\");",
									"    pm.expect(jsonData[18]).to.equal(\"General\");",
									"    pm.expect(jsonData[19]).to.equal(\"Generative breeding methods\");",
									"    pm.expect(jsonData[20]).to.equal(\"Genetic Modification\");",
									"    pm.expect(jsonData[21]).to.equal(\"Germplasm\");",
									"    pm.expect(jsonData[22]).to.equal(\"Insect and pest resistance\");",
									"    pm.expect(jsonData[23]).to.equal(\"Maintenance methods\");",
									"    pm.expect(jsonData[24]).to.equal(\"Molecular property\");",
									"    pm.expect(jsonData[25]).to.equal(\"Morphological\");",
									"    pm.expect(jsonData[26]).to.equal(\"Mutation methods\");",
									"    pm.expect(jsonData[27]).to.equal(\"Non-bulking breedingmethods\");",
									"    pm.expect(jsonData[28]).to.equal(\"Passport\");",
									"    pm.expect(jsonData[29]).to.equal(\"Phenology\");",
									"    pm.expect(jsonData[30]).to.equal(\"Physiological\");",
									"    pm.expect(jsonData[31]).to.equal(\"Post harvest\");",
									"    pm.expect(jsonData[32]).to.equal(\"Quality\");",
									"    pm.expect(jsonData[33]).to.equal(\"Seed acquisation methods\");",
									"    pm.expect(jsonData[34]).to.equal(\"Seed increase methods\");",
									"    pm.expect(jsonData[35]).to.equal(\"Seed storage\");",
									"    pm.expect(jsonData[36]).to.equal(\"Site condition\");",
									"    pm.expect(jsonData[37]).to.equal(\"Soil condition\");",
									"    pm.expect(jsonData[38]).to.equal(\"Study condition\");",
									"    pm.expect(jsonData[39]).to.equal(\"Trial Design\");",
									"    pm.expect(jsonData[40]).to.equal(\"Trial environment\");",
									"    pm.expect(jsonData[41]).to.equal(\"Trial management\");",
									"    pm.expect(jsonData[42]).to.equal(\"Variate condition\");",
									"    pm.expect(jsonData[43]).to.equal(\"Yield component\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/classes?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"classes"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						},
						"description": "GET ​/crops​/{cropname}​/classes"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "data-type-resource",
			"item": [
				{
					"name": "GET /crops/{crop}/data-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9dc4da2-0039-43f9-9981-20d9b87266e9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check categorical data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"1130\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Categorical\");",
									"    pm.expect(jsonData[0].systemDataType).to.eql(false);",
									"});",
									"",
									"pm.test(\"Check numeric data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].id).to.eql(\"1110\");",
									"    pm.expect(jsonData[1].name).to.eql(\"Numeric\");",
									"    pm.expect(jsonData[1].systemDataType).to.eql(false);",
									"});",
									"",
									"pm.test(\"Check date data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[2].id).to.eql(\"1117\");",
									"    pm.expect(jsonData[2].name).to.eql(\"Date\");",
									"    pm.expect(jsonData[2].systemDataType).to.eql(false);",
									"});",
									"",
									"pm.test(\"Check character data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[3].id).to.eql(\"1120\");",
									"    pm.expect(jsonData[3].name).to.eql(\"Character\");",
									"    pm.expect(jsonData[3].systemDataType).to.eql(false);",
									"});",
									"pm.test(\"Check person data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[4].id).to.eql(\"1131\");",
									"    pm.expect(jsonData[4].name).to.eql(\"Person\");",
									"    pm.expect(jsonData[4].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check location data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[5].id).to.eql(\"1132\");",
									"    pm.expect(jsonData[5].name).to.eql(\"Location\");",
									"    pm.expect(jsonData[5].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check study data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[6].id).to.eql(\"1133\");",
									"    pm.expect(jsonData[6].name).to.eql(\"Study\");",
									"    pm.expect(jsonData[6].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check dataset data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[7].id).to.eql(\"1134\");",
									"    pm.expect(jsonData[7].name).to.eql(\"Dataset\");",
									"    pm.expect(jsonData[7].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check germplasm list data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[8].id).to.eql(\"1135\");",
									"    pm.expect(jsonData[8].name).to.eql(\"Germplasm List\");",
									"    pm.expect(jsonData[8].systemDataType).to.eql(true);",
									"});",
									"pm.test(\"Check breeding method data type\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[9].id).to.eql(\"1136\");",
									"    pm.expect(jsonData[9].name).to.eql(\"Breeding Method\");",
									"    pm.expect(jsonData[9].systemDataType).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d9e8a5b4-781e-44c2-bb9d-21b9e62dee8f",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/data-types?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"data-types"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "formula-resource",
			"item": [
				{
					"name": "POST /crops/{cropname}/formula",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14e19c15-e18f-44cd-885e-1fcd486fd4a2",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store returned variable",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"new_formula_id\");",
									"    pm.environment.set(\"new_formula_id\", jsonData.formulaId);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c325f7f-3edd-493e-b98f-ec1b11877307",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"formulaId\": 0,\r\n  \"inputs\": [\r\n    {\r\n      \"targetTermId\": 0,\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"vocabularyId\": 0,\r\n      \"name\": \"\",\r\n      \"obsolete\": false,\r\n      \"definition\": \"\",\r\n      \"id\": 100020\r\n    }\r\n  ],\r\n  \"name\": \"\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"definition\": \"{{formula_definition}}\",\r\n  \"target\": {\r\n    \"targetTermId\": 0,\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"vocabularyId\": 0,\r\n    \"name\": \"\",\r\n    \"obsolete\": false,\r\n    \"definition\": \"\",\r\n    \"id\": 100019\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/formula?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"formula"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /crops/{cropname}/formula/{formulaId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f09794c-3f72-4f96-97bf-0316e2e688c2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "31a3634a-ea95-46bd-b516-7e5316795d5e",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"formulaId\": \"{{new_formula_id}}\",\r\n  \"inputs\": [\r\n    {\r\n      \"targetTermId\": 0,\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"vocabularyId\": 0,\r\n      \"name\": \"\",\r\n      \"obsolete\": false,\r\n      \"definition\": \"\",\r\n      \"id\": 100020\r\n    }\r\n  ],\r\n  \"name\": \"\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"definition\": \"{{updated_formula_definition}}\",\r\n  \"target\": {\r\n    \"targetTermId\": 0,\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"vocabularyId\": 0,\r\n    \"name\": \"\",\r\n    \"obsolete\": false,\r\n    \"definition\": \"\",\r\n    \"id\": 100019\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/formula/{{new_formula_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"formula",
								"{{new_formula_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{cropname}/formula/{formulaId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b8148cc-1c45-4314-9d36-c5dbbb473958",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ff60b6c7-b808-4006-af64-9f8a72dfef93",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/formula/{{new_formula_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"formula",
								"{{new_formula_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "method-resource",
			"item": [
				{
					"name": "POST /crops/{cropname}/methods",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92748839-717b-4051-8451-057b6ab3ee62",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store returned variable",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"new_method_id\");",
									"    pm.environment.set(\"new_method_id\", jsonData.id);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3cc95e45-2d30-4a82-978b-5f92d3a6f861",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{new_method_name}}\",\r\n  \"description\": \"This is a test method\",\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": true,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /crops/{cropname}/methods/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98653861-12d9-4681-9f74-b1bc48c89ff7",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0181e9d0-f182-400d-93ec-ccb8c988049e",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{updated_method_name}}\",\r\n  \"description\": \"This is a test methodx\",\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": true,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods/{{new_method_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods",
								"{{new_method_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{cropname}/methods{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fd85ec3-f822-4c53-8f52-29a3c2614570",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Note: Checked details of first, middle and last method only for all methods are too many.",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e87fb96-82fb-4dde-bcd3-63c6b68052a1",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/methods/{{new_method_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"methods",
								"{{new_method_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "property-resource",
			"item": [
				{
					"name": "POST /crops/{cropname}/properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eec52e52-6889-4c2a-819d-8f45d312b6b2",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store returned variable",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"new_property_id\");",
									"    pm.environment.set(\"new_property_id\", jsonData.id);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "007af29e-fd9e-4014-aa7f-3995778c6028",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{new_property_name}}\",\r\n  \"description\": \"This is a test property\",\r\n  \"cropOntologyId\": \"\",\r\n  \"classes\": [\r\n    \"Morphological\"\r\n  ],\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": false,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /crops/{cropname}/properties/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0ec30a3-bf3e-4c37-849e-ce68e4bc5217",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "230f9c4c-5e09-4e57-b2b0-f961ae6059d3",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{updated_property_name}}\",\r\n  \"description\": \"This is a test propertyx\",\r\n  \"cropOntologyId\": \"\",\r\n  \"classes\": [\r\n    \"Morphological\"\r\n  ],\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": false,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties/{{new_property_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties",
								"{{new_property_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{cropname}/properties/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00b55d56-c200-4912-a4a6-07dfc89ce9a7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Note: Checked details of first, middle and last method only for all methods are too many.",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b26e49fe-085c-497d-9d88-405b1928cea1",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/properties/{{new_property_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"properties",
								"{{new_property_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "variable-resource",
			"item": [
				{
					"name": "POST /crops/{cropname}/variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d383139-1361-4fb2-8c9f-2656fc02d976",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store returned variable",
									"    var jsonData = pm.response.json();",
									"    pm.environment.unset(\"new_variable_id\");",
									"    pm.environment.set(\"new_variable_id\", jsonData.id);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7789ce10-90a4-4b36-aad6-0e48a7b9c637",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{new_variable_name}}\",\r\n  \"description\": \"This is a test variable\",\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": true,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  },\r\n  \"programUuid\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n  \"alias\": \"\",\r\n  \"method\": {\r\n        \"id\": \"{{new_var_method_id}}\",\r\n        \"name\": \"{{neW_var_method_name}}\",\r\n        \"description\": \"{{new_var_method_desc}}\",\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"property\": {\r\n        \"id\": \"{{new_var_property_id}}\",\r\n        \"name\": \"{{new_var_property_name}}\",\r\n        \"description\": \"{{new_var_property_desc}}\",\r\n    \"cropOntologyId\": \"\",\r\n    \"classes\": [\r\n      \"\"\r\n    ],\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"scale\": {\r\n    \"id\": \"{{new_var_scale_id}}\",\r\n    \"name\": \"{{new_var_scale_name}}\",\r\n    \"description\": \"{{new_var_scale_desc}}\",\r\n    \"dataType\": {\r\n      \"id\": \"\",\r\n      \"name\": \"\",\r\n      \"systemDataType\": false\r\n    },\r\n    \"validValues\": {\r\n      \"min\": \"\",\r\n      \"max\": \"\",\r\n      \"categories\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\",\r\n          \"editable\": false\r\n        }\r\n      ]\r\n    },\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"variableTypes\": [\r\n    {\r\n        \"id\": \"1808\",\r\n        \"name\": \"Trait\",\r\n        \"description\": \"Characteristics of a germplasm to be recorded during a study.\"\r\n    }\r\n  ],\r\n  \"favourite\": false,\r\n  \"expectedRange\": {\r\n    \"min\": \"\",\r\n    \"max\": \"\"\r\n  },\r\n  \"formula\": {\r\n    \"formulaId\": 0,\r\n    \"target\": {\r\n      \"id\": 0,\r\n      \"vocabularyId\": 0,\r\n      \"name\": \"\",\r\n      \"definition\": \"\",\r\n      \"obsolete\": false,\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"targetTermId\": 0\r\n    },\r\n    \"inputs\": [\r\n      {\r\n        \"id\": 0,\r\n        \"vocabularyId\": 0,\r\n        \"name\": \"\",\r\n        \"definition\": \"\",\r\n        \"obsolete\": false,\r\n        \"dateCreated\": \"\",\r\n        \"dateLastModified\": \"\",\r\n        \"targetTermId\": 0\r\n      }\r\n    ],\r\n    \"definition\": \"\",\r\n    \"active\": false,\r\n    \"name\": \"\",\r\n    \"description\": \"\"\r\n  },\r\n  \"allowsFormula\": false\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /crops/{cropname}/variables/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec228f1f-09c3-4f2e-84c3-d3189352d158",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "30211fec-167c-42a6-9aca-c06b0b8f5ee6",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{updated_variable_name}}\",\r\n  \"description\": \"This is a test variablex\",\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": true,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  },\r\n  \"programUuid\": \"c9e335d2-3057-4958-a43e-e38cf61d09ca\",\r\n  \"alias\": \"\",\r\n  \"method\": {\r\n        \"id\": \"{{new_var_method_id}}\",\r\n        \"name\": \"{{neW_var_method_name}}\",\r\n        \"description\": \"{{new_var_method_desc}}\",\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"property\": {\r\n        \"id\": \"{{new_var_property_id}}\",\r\n        \"name\": \"{{new_var_property_name}}\",\r\n        \"description\": \"{{new_var_property_desc}}\",\r\n    \"cropOntologyId\": \"\",\r\n    \"classes\": [\r\n      \"\"\r\n    ],\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"scale\": {\r\n    \"id\": \"{{new_var_scale_id}}\",\r\n    \"name\": \"{{new_var_scale_name}}\",\r\n    \"description\": \"{{new_var_scale_desc}}\",\r\n    \"dataType\": {\r\n      \"id\": \"\",\r\n      \"name\": \"\",\r\n      \"systemDataType\": false\r\n    },\r\n    \"validValues\": {\r\n      \"min\": \"\",\r\n      \"max\": \"\",\r\n      \"categories\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\",\r\n          \"editable\": false\r\n        }\r\n      ]\r\n    },\r\n    \"metadata\": {\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"editableFields\": [\r\n        \"\"\r\n      ],\r\n      \"deletable\": false,\r\n      \"editable\": false,\r\n      \"usage\": {\r\n        \"variables\": [\r\n          {\r\n            \"id\": \"\",\r\n            \"name\": \"\",\r\n            \"description\": \"\"\r\n          }\r\n        ],\r\n        \"observations\": 0,\r\n        \"studies\": 0,\r\n        \"datasets\": 0\r\n      },\r\n      \"datasets\": 0\r\n    }\r\n  },\r\n  \"variableTypes\": [\r\n    {\r\n        \"id\": \"1808\",\r\n        \"name\": \"Trait\",\r\n        \"description\": \"Characteristics of a germplasm to be recorded during a study.\"\r\n    }\r\n  ],\r\n  \"favourite\": false,\r\n  \"expectedRange\": {\r\n    \"min\": \"\",\r\n    \"max\": \"\"\r\n  },\r\n  \"formula\": {\r\n    \"formulaId\": 0,\r\n    \"target\": {\r\n      \"id\": 0,\r\n      \"vocabularyId\": 0,\r\n      \"name\": \"\",\r\n      \"definition\": \"\",\r\n      \"obsolete\": false,\r\n      \"dateCreated\": \"\",\r\n      \"dateLastModified\": \"\",\r\n      \"targetTermId\": 0\r\n    },\r\n    \"inputs\": [\r\n      {\r\n        \"id\": 0,\r\n        \"vocabularyId\": 0,\r\n        \"name\": \"\",\r\n        \"definition\": \"\",\r\n        \"obsolete\": false,\r\n        \"dateCreated\": \"\",\r\n        \"dateLastModified\": \"\",\r\n        \"targetTermId\": 0\r\n      }\r\n    ],\r\n    \"definition\": \"\",\r\n    \"active\": false,\r\n    \"name\": \"\",\r\n    \"description\": \"\"\r\n  },\r\n  \"allowsFormula\": false\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/{{new_variable_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"{{new_variable_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{cropname}/variables/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dbe4510-a6e9-4026-8593-7f24d1176e00",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Note: Checked details of first, middle and last method only for all methods are too many.",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "36e0b3e3-2677-4ef8-a93d-98f380adccad",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variables/{{new_variable_id}}?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variables",
								"{{new_variable_id}}"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "variable-type-resource",
			"item": [
				{
					"name": "scale-resource",
					"item": [
						{
							"name": "POST /crops/{cropname}/scales",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdc7fa02-a152-4618-81c3-70f81438eeca",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Store returned variable",
											"    var jsonData = pm.response.json();",
											"    pm.environment.unset(\"new_scale_id\");",
											"    pm.environment.set(\"new_scale_id\", jsonData.id);",
											"    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "78a7d312-3fdc-46e7-bd56-57bbefa2420f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{new_scale_name}}\",\r\n  \"description\": \"This is a test scale\",\r\n  \"dataType\": {\r\n    \"id\": \"1110\",\r\n    \"name\": \"Numeric\",\r\n    \"systemDataType\": false\r\n  },\r\n  \"validValues\": {\r\n    \"min\": \"\",\r\n    \"max\": \"\",\r\n    \"categories\": [\r\n      {\r\n        \"id\": \"\",\r\n        \"name\": \"\",\r\n        \"description\": \"\",\r\n        \"editable\": false\r\n      }\r\n    ]\r\n  },\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": false,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/scales?programUUID={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"scales"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT /crops/{cropname}/scales/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8193bfea-c722-439a-8c1e-2181203dab4e",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "00a9fa82-5990-456e-b60d-6c47f32582df",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"{{updated_scale_name}}\",\r\n  \"description\": \"This is a test scalex\",\r\n  \"dataType\": {\r\n    \"id\": \"1110\",\r\n    \"name\": \"Numeric\",\r\n    \"systemDataType\": false\r\n  },\r\n  \"validValues\": {\r\n    \"min\": \"\",\r\n    \"max\": \"\",\r\n    \"categories\": [\r\n      {\r\n        \"id\": \"\",\r\n        \"name\": \"\",\r\n        \"description\": \"\",\r\n        \"editable\": false\r\n      }\r\n    ]\r\n  },\r\n  \"metadata\": {\r\n    \"dateCreated\": \"\",\r\n    \"dateLastModified\": \"\",\r\n    \"editableFields\": [\r\n      \"\"\r\n    ],\r\n    \"deletable\": false,\r\n    \"editable\": false,\r\n    \"usage\": {\r\n      \"variables\": [\r\n        {\r\n          \"id\": \"\",\r\n          \"name\": \"\",\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"observations\": 0,\r\n      \"studies\": 0,\r\n      \"datasets\": 0\r\n    },\r\n    \"datasets\": 0\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/scales/{{new_scale_id}}?programUUID={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"scales",
										"{{new_scale_id}}"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /crops/{cropname}/scales/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "755368c7-5949-415d-b4be-3a1397d16a02",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Note: Checked details of first, middle and last method only for all methods are too many.",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92039935-6a6c-4906-8e48-553e458ab047",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/scales/{{new_scale_id}}?programUUID={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"scales",
										"{{new_scale_id}}"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{crop}variable-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f745840-cdfc-423c-9f7e-3cab0ba3e34d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check analysis variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(\"1801\");\r",
									"    pm.expect(jsonData[0].name).to.eql(\"Analysis\");\r",
									"    pm.expect(jsonData[0].description).to.eql(\"Variable to be used only in analysis (for example derived variables).\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check analysis summary variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1].id).to.eql(\"1811\");\r",
									"    pm.expect(jsonData[1].name).to.eql(\"Analysis Summary\");\r",
									"    pm.expect(jsonData[1].description).to.eql(\"Analysis Summary Variables\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check environment detail variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2].id).to.eql(\"1806\");\r",
									"    pm.expect(jsonData[2].name).to.eql(\"Environment Detail\");\r",
									"    pm.expect(jsonData[2].description).to.eql(\"Administrative details to be tracked per environment.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check experimental design variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[3].id).to.eql(\"1810\");\r",
									"    pm.expect(jsonData[3].name).to.eql(\"Experimental Design\");\r",
									"    pm.expect(jsonData[3].description).to.eql(\"Experimental Design Variables\");\r",
									"});\r",
									"pm.test(\"Check germplasm descriptor variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[4].id).to.eql(\"1804\");\r",
									"    pm.expect(jsonData[4].name).to.eql(\"Germplasm Descriptor\");\r",
									"    pm.expect(jsonData[4].description).to.eql(\"Information to be recorded about each germplasm in a study.\");\r",
									"});\r",
									"pm.test(\"Check observation unit variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[5].id).to.eql(\"1812\");\r",
									"    pm.expect(jsonData[5].name).to.eql(\"Observation Unit\");\r",
									"    pm.expect(jsonData[5].description).to.eql(\"Observation Unit Variables\");\r",
									"});\r",
									"pm.test(\"Check selection method variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[6].id).to.eql(\"1807\");\r",
									"    pm.expect(jsonData[6].name).to.eql(\"Selection Method\");\r",
									"    pm.expect(jsonData[6].description).to.eql(\"How material is chosen for advancing to the next generation.\");\r",
									"});\r",
									"pm.test(\"Check study condition variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[7].id).to.eql(\"1802\");\r",
									"    pm.expect(jsonData[7].name).to.eql(\"Study Condition\");\r",
									"    pm.expect(jsonData[7].description).to.eql(\"Observations made of conditions in an individual environment involved in a study.\");\r",
									"});\r",
									"pm.test(\"Check study detail variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[8].id).to.eql(\"1805\");\r",
									"    pm.expect(jsonData[8].name).to.eql(\"Study Detail\");\r",
									"    pm.expect(jsonData[8].description).to.eql(\"Administrative details to be tracked per study.\");\r",
									"});\r",
									"pm.test(\"Check trait variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].id).to.eql(\"1808\");\r",
									"    pm.expect(jsonData[9].name).to.eql(\"Trait\");\r",
									"    pm.expect(jsonData[9].description).to.eql(\"Characteristics of a germplasm to be recorded during a study.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check treatment factor variable type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[10].id).to.eql(\"1809\");\r",
									"    pm.expect(jsonData[10].name).to.eql(\"Treatment Factor\");\r",
									"    pm.expect(jsonData[10].description).to.eql(\"Treatments to be applied to members of a trial.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1a824c65-372c-4790-a3fd-7c6b615a3170",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/variable-types?programUUID={{api_program_id}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"variable-types"
							],
							"query": [
								{
									"key": "programUUID",
									"value": "{{api_program_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "sample-resource",
			"item": [
				{
					"name": "GET /crops​/{crop}​/programs​/{programUUID}​/samples",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs to all fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69741fa2-e056-471d-928f-41c4bbc27726",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "39442ac5-43ac-4e59-b445-e8b02698e4d0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].sampleId).to.eql(1);",
											"    pm.expect(jsonData[0].sampleNumber).to.eql(1);",
											"    pm.expect(jsonData[0].entryNo).to.eql(1);",
											"    pm.expect(jsonData[0].gid).to.eql(21);",
											"    pm.expect(jsonData[0].designation).to.eql(\"GP1\");",
											"    pm.expect(jsonData[0].sampleName).to.eql(\"ACCNO1:1\");",
											"    pm.expect(jsonData[0].sampleBusinessKey).to.eql(pm.environment.get(\"study_sampleId\"));",
											"    pm.expect(jsonData[0].takenBy).to.eql(\"Admin Admin\");",
											"    pm.expect(jsonData[0].sampleList).to.eql(\"Sample List 002\");",
											"    pm.expect(jsonData[0].datasetType).to.eql(\"PLOT\");",
											"    pm.expect(jsonData[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    pm.expect(jsonData[0].studyId).to.eql(3009);",
											"    pm.expect(jsonData[0].enumerator).to.eql(\"1\");",
											"    pm.expect(jsonData[0].observationUnitId).to.eql(pm.environment.get(\"study_obs_unit_id\"));",
											"    pm.expect(jsonData[0].samplingDate).to.eql(\"26/10/2018\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples?obsUnitId={{study_obs_unit_id}}&listId={{sample_listId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									],
									"query": [
										{
											"key": "obsUnitId",
											"value": "{{study_obs_unit_id}}"
										},
										{
											"key": "listId",
											"value": "{{sample_listId}}"
										}
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered only crop name and programUUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "36064317-d048-43b2-a079-4ebc40c9e17c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1299773b-b67e-493a-934e-2b331b1f6fbd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].sampleId).to.eql(1);",
											"    pm.expect(jsonData[0].sampleNumber).to.eql(1);",
											"    pm.expect(jsonData[0].entryNo).to.eql(1);",
											"    pm.expect(jsonData[0].gid).to.eql(21);",
											"    pm.expect(jsonData[0].designation).to.eql(\"GP1\");",
											"    pm.expect(jsonData[0].sampleName).to.eql(\"ACCNO1:1\");",
											"    pm.expect(jsonData[0].sampleBusinessKey).to.eql(pm.environment.get(\"study_sampleId\"));",
											"    pm.expect(jsonData[0].takenBy).to.eql(\"Admin Admin\");",
											"    pm.expect(jsonData[0].sampleList).to.eql(\"Sample List 002\");",
											"    pm.expect(jsonData[0].datasetType).to.eql(\"PLOT\");",
											"    pm.expect(jsonData[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    pm.expect(jsonData[0].studyId).to.eql(3009);",
											"    pm.expect(jsonData[0].enumerator).to.eql(\"1\");",
											"    pm.expect(jsonData[0].observationUnitId).to.eql(pm.environment.get(\"study_obs_unit_id\"));",
											"    pm.expect(jsonData[0].samplingDate).to.eql(\"26/10/2018\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid OBS_UNIT_ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d55daab-ad17-40bf-ac54-0fa8541f1a73",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b3237f21-9c9b-4ea4-ba7c-75fb52fceb59",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].sampleId).to.eql(1);",
											"    pm.expect(jsonData[0].sampleNumber).to.eql(1);",
											"    pm.expect(jsonData[0].entryNo).to.eql(1);",
											"    pm.expect(jsonData[0].gid).to.eql(21);",
											"    pm.expect(jsonData[0].designation).to.eql(\"GP1\");",
											"    pm.expect(jsonData[0].sampleName).to.eql(\"ACCNO1:1\");",
											"    pm.expect(jsonData[0].sampleBusinessKey).to.eql(pm.environment.get(\"study_sampleId\"));",
											"    pm.expect(jsonData[0].takenBy).to.eql(\"Admin Admin\");",
											"    pm.expect(jsonData[0].sampleList).to.eql(\"Sample List 002\");",
											"    pm.expect(jsonData[0].datasetType).to.eql(\"PLOT\");",
											"    pm.expect(jsonData[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    pm.expect(jsonData[0].studyId).to.eql(3009);",
											"    pm.expect(jsonData[0].enumerator).to.eql(\"1\");",
											"    pm.expect(jsonData[0].observationUnitId).to.eql(pm.environment.get(\"study_obs_unit_id\"));",
											"    pm.expect(jsonData[0].samplingDate).to.eql(\"26/10/2018\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples?obsUnitId={{study_obs_unit_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									],
									"query": [
										{
											"key": "obsUnitId",
											"value": "{{study_obs_unit_id}}"
										}
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid OBS_UNIT_ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e40c9b85-552a-4b10-913d-9fc2068c7e53",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c7cac708-3280-4221-85b3-4310f2b4253f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].sampleId).to.eql(1);",
											"    pm.expect(jsonData[0].sampleNumber).to.eql(1);",
											"    pm.expect(jsonData[0].entryNo).to.eql(1);",
											"    pm.expect(jsonData[0].gid).to.eql(21);",
											"    pm.expect(jsonData[0].designation).to.eql(\"GP1\");",
											"    pm.expect(jsonData[0].sampleName).to.eql(\"ACCNO1:1\");",
											"    pm.expect(jsonData[0].sampleBusinessKey).to.eql(pm.environment.get(\"study_sampleId\"));",
											"    pm.expect(jsonData[0].takenBy).to.eql(\"Admin Admin\");",
											"    pm.expect(jsonData[0].sampleList).to.eql(\"Sample List 002\");",
											"    pm.expect(jsonData[0].datasetType).to.eql(\"PLOT\");",
											"    pm.expect(jsonData[0].studyName).to.eql(\"Study with Imported Cross Nursery 2018002\");",
											"    pm.expect(jsonData[0].studyId).to.eql(3009);",
											"    pm.expect(jsonData[0].enumerator).to.eql(\"1\");",
											"    pm.expect(jsonData[0].observationUnitId).to.eql(pm.environment.get(\"study_obs_unit_id\"));",
											"    pm.expect(jsonData[0].samplingDate).to.eql(\"26/10/2018\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples?obsUnitId=PKWDPtLOzD8Szx",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									],
									"query": [
										{
											"key": "obsUnitId",
											"value": "PKWDPtLOzD8Szx"
										}
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						},
						{
							"name": "Verify response code body when entered string input on listID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7c6b2467-f4d3-45e1-b405-8d8a4d68d4d1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a711e760-224f-4b1c-856f-a96b49430188",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/samples?listId={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"samples"
									],
									"query": [
										{
											"key": "listId",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/samples"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs to all fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f6578c92-f222-471d-8b61-8efec1e62513",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "64ea1d16-e93e-4ac2-8f8c-92cec2f1ef55",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"  var jsonData = pm.response.json();",
											"    pm.environment.unset(\"new_sample_folder_id\");",
											"    pm.environment.set(\"new_sample_folder_id\", jsonData.id);",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders?folderName={{new_sample_folder_name}}&parentId=0",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders"
									],
									"query": [
										{
											"key": "folderName",
											"value": "{{new_sample_folder_name}}"
										},
										{
											"key": "parentId",
											"value": "0"
										}
									]
								},
								"description": "POST​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered name of an already existing folder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7d1f9063-6d72-4b3c-a515-02e096e7b33b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dc9e8047-dcc5-4b46-9c71-81c7520d5031",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Folder name should be unique within the same directory\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders?folderName={{new_sample_folder_name}}&parentId=0",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders"
									],
									"query": [
										{
											"key": "folderName",
											"value": "{{new_sample_folder_name}}"
										},
										{
											"key": "parentId",
											"value": "0"
										}
									]
								},
								"description": "POST​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing parent ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc4ef594-1231-4d9d-845a-047f440dc279",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "763ba55d-70bc-4aab-8810-0ea1a4899115",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Parent Folder does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders?folderName={{new_sample_folder_name}}&parentId=99999",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders"
									],
									"query": [
										{
											"key": "folderName",
											"value": "{{new_sample_folder_name}}"
										},
										{
											"key": "parentId",
											"value": "99999"
										}
									]
								},
								"description": "POST​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to parent ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "94bd10cc-a584-41e2-96a7-0926432cd3c8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ab728fab-8b55-436a-b1d4-9a3fb4d7eff1",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders?folderName={{new_sample_folder_name}}&parentId={{string_input}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders"
									],
									"query": [
										{
											"key": "folderName",
											"value": "{{new_sample_folder_name}}"
										},
										{
											"key": "parentId",
											"value": "{{string_input}}"
										}
									]
								},
								"description": "POST​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT​ /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid newFolderName and folderId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bd4a6e3b-5540-4d88-b186-acfd4a4e292c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15318bd9-8dab-460e-96ce-20195ef9047c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"new_sample_folder_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered name of an already existing folder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b2b2deca-ed89-4cce-b9d6-ee90d0644bc9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "76d992ef-8d55-4d10-b7f8-5b30b5ad0fe8",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Folder name should be unique within the same directory\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing folderId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "daa89c96-7f1f-45b4-96e5-3660a25e20b0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9accc30e-0927-4fac-9e2a-bc68be4de20f",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Folder does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/99999?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"99999"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered root folder id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3ca09ed6-9e80-4f5f-9920-626c11251e48",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6df1fa1a-2550-4b71-8d43-e12733f5ec66",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Root folder name is not editable\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/1?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"1"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to folderId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "216eef18-782f-4932-8b56-cf71a49fc77f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cb5f5fc9-1a4f-4db8-b43c-2b55459ae40c",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{string_input}}?newFolderName={{updated_sample_folder}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{string_input}}"
									],
									"query": [
										{
											"key": "newFolderName",
											"value": "{{updated_sample_folder}}"
										}
									]
								},
								"description": "PUT​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move",
					"item": [
						{
							"name": "Move a sample folder to another folder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7c6750e6-44ac-4f33-8a8b-f709c98ba9b9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "df0be7a6-2a77-4d79-8f59-1f88bfe25b13",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify returned id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.parentId).to.eql(pm.environment.get(\"sample_folder_id_with_content\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}/move?newParentId={{sample_folder_id_with_content}}&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "{{sample_folder_id_with_content}}"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing folderId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2ed70c88-59c6-48fc-aac6-a41e038a822b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "40f7b173-faf5-4842-9eaa-e906ff5c7489",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"sampleList does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/99999/move?newParentId={{sample_folder_id_with_content}}&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"99999",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "{{sample_folder_id_with_content}}"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing parent ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fb7e092b-295f-4e65-93ec-00375ec7ee4d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3dd14f6f-0ac4-4b4b-ba6b-a784d4664214",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified newParentFolderId does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}/move?newParentId=99999&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "99999"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string input to parentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5190c81b-e157-405c-a81a-85f2547a4225",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7d008351-43de-4c11-98bc-96a6197bf54e",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"For input string: \\\"asd\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}/move?newParentId={{string_input}}&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "{{string_input}}"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						},
						{
							"name": "Move the sample parent folder into its own child",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a8bf662b-592f-4305-8472-e480d0aed9d5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0804a081-346a-4872-bf34-e24bb9782f94",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"You can not move list because are relatives with parent folder\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{sample_folder_id_with_content}}/move?newParentId={{new_sample_folder_id}}&isCropList=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{sample_folder_id_with_content}}",
										"move"
									],
									"query": [
										{
											"key": "newParentId",
											"value": "{{new_sample_folder_id}}"
										},
										{
											"key": "isCropList",
											"value": "false"
										}
									]
								},
								"description": "PUT /crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}​/move"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE ​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs to all fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1768d3bf-fb96-40c1-bf2a-d5ec02365ae1",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "987d882f-f1ed-48cb-8065-eb009297430e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{new_sample_folder_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{new_sample_folder_id}}"
									]
								},
								"description": "DELETE​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						},
						{
							"name": "Delete a sample folder with existing contents",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9c2dd888-ea2f-49a4-9f3e-3ae1b04e995d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fc1f2653-8a64-46ff-961e-c67e9f3ff125",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Verify error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Folder has children and cannot be deleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/sample-list-folders/{{sample_folder_id_with_content}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"sample-list-folders",
										"{{sample_folder_id_with_content}}"
									]
								},
								"description": "DELETE​/crops​/{crop}​/programs​/{programUUID}​/sample-list-folders​/{folderId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{crop}​/sample-lists​/search",
					"item": [
						{
							"name": "Verify response code and body when entered valid searchString and exactMatch is false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5093912c-1452-4417-ad7c-9316931ee14a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "460d1e3c-93ce-447c-95f0-90722abf26c6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].listName).to.eql(\"Sample List 002\");",
											"    //pm.expect(jsonData[1].listName).to.eql(\"Sample List 003\");",
											"    //pm.expect(jsonData[2].listName).to.eql(\"Sample List 004\");",
											"    //pm.expect(jsonData[3].listName).to.eql(\"Sample List 005\");",
											"    //pm.expect(jsonData[4].listName).to.eql(\"Sample List 006\");",
											"    //pm.expect(jsonData[5].listName).to.eql(\"Sample List 007\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/sample-lists/search?programUUID={{api_program_id}}&exactMatch=false&searchString={{search_string_not_exact}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"sample-lists",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										},
										{
											"key": "exactMatch",
											"value": "false"
										},
										{
											"key": "searchString",
											"value": "{{search_string_not_exact}}"
										}
									]
								},
								"description": "GET ​/crops​/{crop}​/sample-lists​/search"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid searchString and exactMatch is true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df487-46f9-4879-9ee9-73bb4fa1b7f8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "23844e7d-6571-46d9-a508-7731b2de46ef",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify returned sample details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].listName).to.eql(\"Sample List 002\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/sample-lists/search?programUUID={{api_program_id}}&searchString={{search_string_exact}}&exactMatch=false",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"sample-lists",
										"search"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										},
										{
											"key": "searchString",
											"value": "{{search_string_exact}}"
										},
										{
											"key": "exactMatch",
											"value": "false"
										}
									]
								},
								"description": "GET ​/crops​/{crop}​/sample-lists​/search"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "derived-variable-resource",
			"item": [
				{
					"name": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bf7af287-9168-4b5d-aac5-1488c9431b3f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "59f17823-97ed-4928-8187-fe29fc33d1e8",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check mapped studyId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var inputVariableId = pm.environment.get(\"inputVariable_cvterm_id\")",
											"    pm.expect(jsonData[inputVariableId].datasets[0].id).to.eql(3011);",
											"});",
											"pm.test(\"Check mapped study name\", function() {",
											"    var jsonData = pm.response.json();",
											"    var inputVariableId = pm.environment.get(\"inputVariable_cvterm_id\")",
											"    pm.expect(jsonData[inputVariableId].datasets[0].name).to.eql(\"Study with Imported Cross Nursery 2018002-PLOTDATA\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_biomass_cvterm_id}}/formula-variables/dataset-map",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_biomass_cvterm_id}}",
										"formula-variables",
										"dataset-map"
									]
								},
								"description": "GET​ /crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "634fa365-ec7f-4824-8f76-0ee40366fdb0",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8ca40aed-ead4-4869-84ee-050dee8497a7",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_biomass_cvterm_id}}/formula-variables/dataset-map",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_biomass_cvterm_id}}",
										"formula-variables",
										"dataset-map"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76f6b6fd-95a8-42b6-8ca5-527714e55341",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c091385-9c1e-47af-a984-714efcabd642",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check mapped studyId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var inputVariableId = pm.environment.get(\"inputVariable_cvterm_id\")",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+ pm.environment.get(\"study_plot_datasetId\")+ \" does not belong to the study \" + pm.environment.get(\"trialStudyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets/{{study_plot_datasetId}}/derived-variables/18010/formula-variables/dataset-map",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"18010",
										"formula-variables",
										"dataset-map"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "325436eb-f323-47a9-a931-dbd3dd91f722",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5d97ab66-25f5-4f80-bafd-4ace1d8ca135",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check mapped studyId\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_study_id}}/derived-variables/{{study_biomass_cvterm_id}}/formula-variables/dataset-map",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_study_id}}",
										"derived-variables",
										"{{study_biomass_cvterm_id}}",
										"formula-variables",
										"dataset-map"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/dataset-map"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "85f8cf20-7d2f-4b38-8990-2e7b57e6611f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac833b16-72ea-49b9-bd0b-e6c7d6582cda",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check missing variableId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var grainSizeId = Number(pm.environment.get(\"grain_size_cvterm_id\"));",
											"    pm.expect(jsonData[0].id).to.eql(grainSizeId);",
											"});",
											"pm.test(\"Check missing variable name\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"Grain_size\");",
											"});",
											"pm.test(\"Check target termId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var targetTermId = Number(pm.environment.get(\"study_grainYield_cvterm_id\"));",
											"    pm.expect(jsonData[0].targetTermId).to.eql(targetTermId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_grainYield_cvterm_id}}/formula-variables/missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_grainYield_cvterm_id}}",
										"formula-variables",
										"missing"
									]
								},
								"description": "GET /crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a3a8abf4-8e9b-419c-8db4-65e487507bd7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "963bd8a2-f0fd-4de5-955e-24f047ba0559",
										"exec": [
											"pm.test(\"Status code is 44\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_grainYield_cvterm_id}}/formula-variables/missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_grainYield_cvterm_id}}",
										"formula-variables",
										"missing"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered datasetId that does not belong to the study",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a281f498-7a2a-4886-b7b8-ca806a58d99b",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b37c8d9c-f660-4757-9991-c1c18645aaf6",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Check mapped studyId\", function() {",
											"    var jsonData = pm.response.json();",
											"    var inputVariableId = pm.environment.get(\"inputVariable_cvterm_id\")",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Specified dataset \"+ pm.environment.get(\"study_plot_datasetId\")+ \" does not belong to the study \" + pm.environment.get(\"trialStudyId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{trialStudyId}}/datasets/{{study_plot_datasetId}}/derived-variables/{{study_grainYield_cvterm_id}}/formula-variables/missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{trialStudyId}}",
										"datasets",
										"{{study_plot_datasetId}}",
										"derived-variables",
										"{{study_grainYield_cvterm_id}}",
										"formula-variables",
										"missing"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "013364b1-55c2-4de5-9622-540555673317",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5ca2d224-8e12-4fc6-88b8-165d8d483ea1",
										"exec": [
											"pm.test(\"Status code is 44\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Check error message\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Dataset does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/datasets/{{non_existing_study_id}}/derived-variables/{{study_grainYield_cvterm_id}}/formula-variables/missing",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"datasets",
										"{{non_existing_study_id}}",
										"derived-variables",
										"{{study_grainYield_cvterm_id}}",
										"formula-variables",
										"missing"
									]
								},
								"description": "GET ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/datasets​/{datasetId}​/derived-variables​/{variableId}​/formula-variables​/missing"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HEAD ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/derived-variables",
					"item": [
						{
							"name": "Verify response code and body when entered valid inputs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2defb5e0-91e8-41b2-97f5-a2744193074e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dcb55009-a5f2-4b94-91f4-9b7e3459d3a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"X-Total-Count is correct\", function () {",
											"    pm.response.to.be.header(\"X-Total-Count\", \"2\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/derived-variables?datasetIds={{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"derived-variables"
									],
									"query": [
										{
											"key": "datasetIds",
											"value": "{{study_plot_datasetId}}"
										}
									]
								},
								"description": "HEAD /crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/derived-variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9e134b6e-29f8-42f6-ac79-c321b300b018",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dbf37fa9-f4e2-49c6-84ae-84cd381b175c",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/derived-variables?datasetIds={{study_plot_datasetId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"derived-variables"
									],
									"query": [
										{
											"key": "datasetIds",
											"value": "{{study_plot_datasetId}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/derived-variables"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing datasetId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a40603e1-5135-44aa-88ee-ed9b69ce4755",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aad40a17-d1ee-407b-8525-9ba4adae9674",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/derived-variables?datasetIds={{non_existing_study_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"derived-variables"
									],
									"query": [
										{
											"key": "datasetIds",
											"value": "{{non_existing_study_id}}"
										}
									]
								},
								"description": "HEAD /crops/{crop}/studies/{studyId}/derived-variables"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "experimental-design-type-resource",
			"item": [
				{
					"name": "GET ​/crops​/{crop}​/experimental-design-types",
					"item": [
						{
							"name": "Verify if all experimental design types are returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7073eb9-2e59-4ec8-8810-a1df2d9c2a67",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check id value for each design\", function () {",
											"  var id = [0, 1, 2, 4, 3, 5];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].id).to.eql(id[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check name value for each design\", function () {",
											"  var name = [\"Randomized Complete Block Design\", \"Resolvable Incomplete Block Design\", \"Row-and-Column\", \"Augmented Randomized Block design\", \"Custom Import Design\", \"Entry list order\", \"P-Rep Design\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].name).to.eql(name[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check termId value for each design\", function () {",
											"  var termId = [10110,10130,10145,10160,10168,10169,10164];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].termId).to.eql(termId[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check termIdLatinized value for each design\", function () {",
											"  var termIdLatinized = [0,10166,10167,0,0,0,0];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].termIdLatinized).to.eql(termIdLatinized[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check params value for each design\", function () {",
											"  var params = [\"randomizedCompleteBlockParams.html\",\"incompleteBlockParams.html\",\"rowAndColumnParams.html\",\"augmentedRandomizedBlockParams.html\",null,\"entryListOrderParams.html\",\"pRepParams.html\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].params).to.eql(params[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check repNo value for each design\", function () {",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].repNo).to.eql(0);",
											"    }",
											"});",
											"",
											"pm.test(\"Check totalNoOfEntries value for each design\", function () {",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].totalNoOfEntries).to.eql(0);",
											"    }",
											"});",
											"pm.test(\"Check templateName value for each design\", function () {",
											"  var templateName = [\"Randomized Complete Block Design.csv\",\"Resolvable Incomplete Block Design.csv\",\"Row-and-Column.csv\",\"Augmented Randomized Block design.csv\",\"Custom Import Design.csv\",\"Entry list order.csv\",\"P-Rep Design.csv\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].templateName).to.eql(templateName[i]);",
											"    }",
											"});",
											"pm.test(\"Check bvName value for each design\", function () {",
											"  var bvName = [\"Randomized block design\",\"Resolvable incomplete block design\",\"Resolvable row-column design\",\"Incomplete block design\",\"\",\"\",\"P-rep design\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].bvName).to.eql(bvName[i]);",
											"    }",
											"});",
											"pm.test(\"Check bvDesignName value for each design\", function () {",
											"  var bvDesignName = [\"RandomizedBlock\",\"ResolvableIncompleteBlock\",\"ResolvableRowColumn\",\"Augmented\",\"\",\"\",\"Prep\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].bvDesignName).to.eql(bvDesignName[i]);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "66a31be0-855b-464c-884d-f61e49ce1d64",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/experimental-design-types?programUUID={{api_program_id}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"experimental-design-types"
									],
									"query": [
										{
											"key": "programUUID",
											"value": "{{api_program_id}}"
										}
									]
								},
								"description": "GET /crops​/{crop}​/experimental-design-types"
							},
							"response": []
						},
						{
							"name": "Verify if all experimental design types are returned without programUUID input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5bf1830-3a38-4d55-a27f-816aeb733aff",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check id value for each design\", function () {",
											"  var id = [0, 1, 2, 4, 3, 5];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].id).to.eql(id[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check name value for each design\", function () {",
											"  var name = [\"Randomized Complete Block Design\", \"Resolvable Incomplete Block Design\", \"Row-and-Column\", \"Augmented Randomized Block design\", \"Custom Import Design\", \"Entry list order\", \"P-Rep Design\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].name).to.eql(name[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check termId value for each design\", function () {",
											"  var termId = [10110,10130,10145,10160,10168,10169,10164];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].termId).to.eql(termId[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check termIdLatinized value for each design\", function () {",
											"  var termIdLatinized = [0,10166,10167,0,0,0,0];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].termIdLatinized).to.eql(termIdLatinized[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check params value for each design\", function () {",
											"  var params = [\"randomizedCompleteBlockParams.html\",\"incompleteBlockParams.html\",\"rowAndColumnParams.html\",\"augmentedRandomizedBlockParams.html\",null,\"entryListOrderParams.html\",\"pRepParams.html\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].params).to.eql(params[i]);",
											"    }",
											"});",
											"",
											"pm.test(\"Check repNo value for each design\", function () {",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].repNo).to.eql(0);",
											"    }",
											"});",
											"",
											"pm.test(\"Check totalNoOfEntries value for each design\", function () {",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].totalNoOfEntries).to.eql(0);",
											"    }",
											"});",
											"pm.test(\"Check templateName value for each design\", function () {",
											"  var templateName = [\"Randomized Complete Block Design.csv\",\"Resolvable Incomplete Block Design.csv\",\"Row-and-Column.csv\",\"Augmented Randomized Block design.csv\",\"Custom Import Design.csv\",\"Entry list order.csv\",\"P-Rep Design.csv\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].templateName).to.eql(templateName[i]);",
											"    }",
											"});",
											"pm.test(\"Check bvName value for each design\", function () {",
											"  var bvName = [\"Randomized block design\",\"Resolvable incomplete block design\",\"Resolvable row-column design\",\"Incomplete block design\",\"\",\"\",\"P-rep design\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].bvName).to.eql(bvName[i]);",
											"    }",
											"});",
											"pm.test(\"Check bvDesignName value for each design\", function () {",
											"  var bvDesignName = [\"RandomizedBlock\",\"ResolvableIncompleteBlock\",\"ResolvableRowColumn\",\"Augmented\",\"\",\"\",\"Prep\"];",
											"  for (var i = 0; i < jsonData.length-1; i++) {",
											"    pm.expect(jsonData[i].bvDesignName).to.eql(bvDesignName[i]);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed73112a-9234-4280-8e37-6ec04e0d81e7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/experimental-design-types",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"experimental-design-types"
									]
								},
								"description": "GET /crops​/{crop}​/experimental-design-types"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "study-instance-resource",
			"item": [
				{
					"name": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba729a31-6dd3-4108-a984-73e9ed3b877b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check locationName\", function () {",
											"  pm.expect(jsonData[0].locationName).to.eql(\"Africa Rice Centre\");   ",
											"});",
											"",
											"pm.test(\"Check locationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].locationAbbreviation).to.eql(\"WARDA\");   ",
											"});",
											"",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].customLocationAbbreviation).to.eql(null);   ",
											"});",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].customLocationAbbreviation).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check instanceNumber\", function () {",
											"  pm.expect(jsonData[0].instanceNumber).to.eql(1);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldmap\", function () {",
											"  pm.expect(jsonData[0].hasFieldmap).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasGeoJSON\", function () {",
											"  pm.expect(jsonData[0].hasGeoJSON).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldLayout\", function () {",
											"  pm.expect(jsonData[0].hasFieldLayout).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasExperimentalDesign\", function () {",
											"  pm.expect(jsonData[0].hasExperimentalDesign).to.eql(true);   ",
											"});",
											"",
											"pm.test(\"Check hasMeasurements\", function () {",
											"  pm.expect(jsonData[0].hasMeasurements).to.eql(true);   ",
											"});",
											"",
											"pm.test(\"Check canBeDeleted\", function () {",
											"  pm.expect(jsonData[0].canBeDeleted).to.eql(false);   ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a58d79e2-24b2-4f01-aae4-81b0e3204a8a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances"
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8179b687-41ca-4622-b99f-258219c09f7c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7a73c88d-f712-4cef-aa06-1680462f5428",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/instances/",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"instances",
										""
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/generation",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9a2a4f4-b358-4a63-8f4c-a8c221152945",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.unset(\"newInstanceDbId\");",
											"pm.environment.set(\"newInstanceDbId\", jsonData[0].instanceId);",
											"pm.environment.unset(\"newInstanceNumber\");",
											"pm.environment.set(\"newInstanceNumber\", jsonData[0].instanceNumber);",
											"",
											"pm.test(\"Check locationName\", function () {",
											"  pm.expect(jsonData[0].locationName).to.eql(\"Unspecified Location\");   ",
											"});",
											"",
											"pm.test(\"Check locationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].locationAbbreviation).to.eql(\"NOLOC\");   ",
											"});",
											"",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData[0].customLocationAbbreviation).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldmap\", function () {",
											"  pm.expect(jsonData[0].hasFieldmap).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasGeoJSON\", function () {",
											"  pm.expect(jsonData[0].hasGeoJSON).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldLayout\", function () {",
											"  pm.expect(jsonData[0].hasFieldLayout).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check hasExperimentalDesign\", function () {",
											"  pm.expect(jsonData[0].hasExperimentalDesign).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasMeasurements\", function () {",
											"  pm.expect(jsonData[0].hasMeasurements).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check canBeDeleted\", function () {",
											"  pm.expect(jsonData[0].canBeDeleted).to.eql(true);   ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6514a518-ec21-45ab-ba82-21071c84a74e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances/generation?numberOfInstancesToGenerate=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances",
										"generation"
									],
									"query": [
										{
											"key": "numberOfInstancesToGenerate",
											"value": "1"
										}
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when passed non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "add3f1b2-79d6-49e0-b9f4-81e7b13beae0",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "826a8e15-d526-426a-9290-5682ccd9d8c8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/instances/generation?numberOfInstancesToGenerate=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"instances",
										"generation"
									],
									"query": [
										{
											"key": "numberOfInstancesToGenerate",
											"value": "1"
										}
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when passed another datasetId to studyId field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdc761c5-3321-4b33-ade0-e66f0333e906",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"No Environment Dataset by the supplied studyId [\"+pm.environment.get(\"study_env_id\")+\"] was found.\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5b56c42-d5ef-4df0-b1c2-66639dd1dbce",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "{{masterToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{study_env_id}}/instances/generation?numberOfInstancesToGenerate=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{study_env_id}}",
										"instances",
										"generation"
									],
									"query": [
										{
											"key": "numberOfInstancesToGenerate",
											"value": "1"
										}
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bd7d29e-0b55-40c1-8005-f25cfd99b644",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check instanceId\", function () {",
											"  pm.expect(jsonData.instanceId).to.eql(pm.environment.get(\"newInstanceDbId\"));   ",
											"});",
											"",
											"pm.test(\"Check locationName\", function () {",
											"  pm.expect(jsonData.locationName).to.eql(\"Unspecified Location\");   ",
											"});",
											"",
											"pm.test(\"Check locationAbbreviation\", function () {",
											"  pm.expect(jsonData.locationAbbreviation).to.eql(\"NOLOC\");   ",
											"});",
											"",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData.customLocationAbbreviation).to.eql(null);   ",
											"});",
											"pm.test(\"Check customLocationAbbreviation\", function () {",
											"  pm.expect(jsonData.customLocationAbbreviation).to.eql(null);   ",
											"});",
											"",
											"pm.test(\"Check instanceNumber\", function () {",
											"  pm.expect(jsonData.instanceNumber).to.eql(pm.environment.get(\"newInstanceNumber\"));   ",
											"});",
											"",
											"pm.test(\"Check hasFieldmap\", function () {",
											"  pm.expect(jsonData.hasFieldmap).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasGeoJSON\", function () {",
											"  pm.expect(jsonData.hasGeoJSON).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasFieldLayout\", function () {",
											"  pm.expect(jsonData.hasFieldLayout).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasExperimentalDesign\", function () {",
											"  pm.expect(jsonData.hasExperimentalDesign).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check hasMeasurements\", function () {",
											"  pm.expect(jsonData.hasMeasurements).to.eql(false);   ",
											"});",
											"",
											"pm.test(\"Check canBeDeleted\", function () {",
											"  pm.expect(jsonData.canBeDeleted).to.eql(true);   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "acb83248-e735-4c75-99cd-36d1cb222d4a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances/{{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances",
										"{{newInstanceDbId}}"
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbbfe47b-201d-4c92-aa9c-bca22832f05e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d1cd93a-9fad-4dc9-83d4-b4a58dceb216",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/instances/{{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"instances",
										"{{newInstanceDbId}}"
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing instanceDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90b031f0-218b-4c09-bfcb-4f2cd126ba56",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Specified instance(s) does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fea2d69e-8d56-48d0-9e74-06c7bb109a25",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances/{{nonExistingInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances",
										"{{nonExistingInstanceDbId}}"
									]
								},
								"description": "GET ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}",
					"item": [
						{
							"name": "Verify response code and body when entered valid crop and studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c32cf216-2e73-4567-b216-6b421a954820",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a40b9a8c-e8b4-46bc-bfcf-d7e126ca6fa5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances?instanceIds={{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances"
									],
									"query": [
										{
											"key": "instanceIds",
											"value": "{{newInstanceDbId}}"
										}
									]
								},
								"description": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing studyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1c0815e-dfc9-4656-aa4e-b7c7022696e9",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Study does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e55c8e60-6362-45e1-8bb6-e534036d37b9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{non_existing_study_id}}/instances?instanceIds={{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{non_existing_study_id}}",
										"instances"
									],
									"query": [
										{
											"key": "instanceIds",
											"value": "{{newInstanceDbId}}"
										}
									]
								},
								"description": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered non-existing instanceDbId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25cfbc7f-38dc-4d6f-ba15-b3a8ca489ca7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Specified instance(s) does not exist\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b1f0622-d25b-4adf-9c2d-a3b8025aa036",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances?instanceIds={{newInstanceDbId}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances"
									],
									"query": [
										{
											"key": "instanceIds",
											"value": "{{newInstanceDbId}}"
										}
									]
								},
								"description": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						},
						{
							"name": "Verify response code and body when tried instance with restrictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec9dd214-598f-4f85-ab30-989bdead5181",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Check error message\", function () {",
											"  pm.expect(jsonData.errors[0].message).to.eql(\"Instance(s) cannot be deleted due to internal validations (samples, sub-observations, inventory transactions associated with the environment or advance/cross list associated with study).\");   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d233a50c-c7d6-45ef-971f-371f40d96967",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/instances?instanceIds=1",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"programs",
										"{{api_program_id}}",
										"studies",
										"{{studyId}}",
										"instances"
									],
									"query": [
										{
											"key": "instanceIds",
											"value": "1"
										}
									]
								},
								"description": "DELETE ​/crops​/{cropname}​/programs​/{programUUID}​/studies​/{studyId}​/instances​/{instanceId}"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "experimental-design-resource",
			"item": [
				{
					"name": "Generate RCBD design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f42dcf1a-e574-4bc5-a10f-62ab7ce6314a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1aba07c1-cf30-406c-bdcf-c7e5a1b58300",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 0,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 10001,\n\t\t\t\"locationId\": 33,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef7f7866-9506-48fe-a54b-e3ddf1a80528",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "17b43a64-1f4b-48d9-8f1f-ab62fb75e5ea",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate RIBD design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8461cb6-f588-440c-93dd-139b87cfaf07",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4b477f75-6f4f-423e-aa7d-3228f3507a27",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": 2,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 1,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 10001,\n\t\t\t\"locationId\": 33,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d31e746c-c25f-4310-a55c-74855b7a8a7c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c26bc508-b03a-4125-ab49-aad407dbbb0c",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate RIBD Latinized design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2fcf95c-484f-486c-a030-f7fecbb591d1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "07ba920a-4302-4203-858e-4625fe2faba8",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": 2,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 1,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": \"2\",\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": \"1\",\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dfd9653-46ce-4c7b-8797-7417468a8b6d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a0c45d0-447d-4c0f-ac19-d382022d8604",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Row and Col Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a44c69a7-eb1b-451d-bfe0-b5f739b9b7cb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c2a11e9d-03e2-4880-a25d-74aeb0f650c3",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": 5,\n\t\"designType\": 2,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": 9012\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": 4,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f630e4cd-6233-48f1-9e4e-59683204a689",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c1c273b1-3433-44f5-9e14-9b530240ab4a",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Row and Col Latinized Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95038fbf-892d-4586-af34-a957ffef99db",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9d1afe95-0301-4a20-8bbd-f4575d72e696",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": 5,\n\t\"designType\": 2,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": \"2\",\n\t\"nrlatin\": \"2\",\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": \"2\",\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": \"3\",\n\t\"replicationsCount\": 2,\n\t\"rowsPerReplications\": 4,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb222847-6ed4-40af-8213-a9b86187b154",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6bbafa07-7d7a-41b2-88af-d11e695892f6",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Augmented Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb39b394-ae96-4e40-9645-54dc6021566f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "35dddef6-779d-420e-b44e-09a3ef7c2ae3",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 4,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": 2,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": null,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b29cfcf-ecf9-4b82-81a5-44199bb07ae2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "94e85023-4e78-4a13-a087-96e447fb8cf3",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Entry List Order Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59b9b22-a458-4259-85c9-146400c132fb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b9152bb2-646d-4678-b024-0201a43ece86",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": null,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": 5,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 5,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": null,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": null,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22b61d63-e27c-4556-af6c-a3588dc8e4ea",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f2af1c78-6fc0-488d-ab16-1fe1979f2bf8",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Generate Prep Design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2559948-367a-4f99-bebc-e4335fcaaac8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fee51f5d-2091-4f58-9d7d-6750c48d7b22",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"blockSize\": 2,\n\t\"checkInsertionManner\": \"8414\",\n\t\"checkSpacing\": null,\n\t\"checkStartingPosition\": 1,\n\t\"colsPerReplications\": null,\n\t\"designType\": 6,\n\t\"environments\": [\n\t\t{\n\t\t\t\"experimentId\": 11000,\n\t\t\t\"locationId\": 34,\n\t\t\t\"managementDetailValues\": {\n\t\t\t\t\"8170\": \"1\",\n\t\t\t\t\"8190\": \"9012\"\n\t\t\t},\n\t\t\t\"phenotypeIDMap\": {},\n\t\t\t\"stockId\": 0,\n\t\t\t\"trialDetailValues\": {}\n\t\t}\n\t],\n\t\"fileName\": null,\n\t\"hasMeasurementData\": false,\n\t\"nblatin\": null,\n\t\"nclatin\": null,\n\t\"nrlatin\": null,\n\t\"numberOfBlocks\": null,\n\t\"replatinGroups\": null,\n\t\"replicationPercentage\": 40,\n\t\"replicationsArrangement\": null,\n\t\"replicationsCount\": 3,\n\t\"rowsPerReplications\": null,\n\t\"startingPlotNo\": 1,\n\t\"totalGermplasmListCount\": null,\n\t\"treatmentFactors\": {},\n\t\"treatmentFactorsData\": {},\n\t\"trialInstancesForDesignGeneration\": [\n\t\t\"1\"\n\t],\n\t\"trialSettings\": {\n\t\t\"userInput\": {}\n\t},\n\t\"useLatenized\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyForDeisgnGenId}}/experimental-designs/generation",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyForDeisgnGenId}}",
								"experimental-designs",
								"generation"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62ddcaa9-f581-42ef-9767-ad355b0d80ef",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dec0a5f4-9de1-409b-aae1-68b91a61ebba",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design on a study with no design yet",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97aab452-5840-45e4-8609-f7112cda7105",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"The study has no experiment design yet.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e71e9f29-1326-46c8-90a9-edc7e26344f0",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/3083/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"3083",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				},
				{
					"name": "Delete generated design on a study with restrictions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a446f624-757d-4588-a713-1faee0bfb6f4",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].message).to.eql(\"Instance(s) cannot be deleted due to internal validations (samples, sub-observations, inventory transactions associated with the environment or advance/cross list associated with study).\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8450a241-38b5-4c87-b538-b5e8843e7070",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/programs/{{api_program_id}}/studies/{{studyId}}/experimental-designs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"programs",
								"{{api_program_id}}",
								"studies",
								"{{studyId}}",
								"experimental-designs"
							]
						},
						"description": "POST ​/crops​/{crop}​/programs​/{programUUID}​/studies​/{studyId}​/experimental-designs​/generation"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "lot-resource",
			"item": [
				{
					"name": "POST /crops/{cropName}/lots",
					"item": [
						{
							"name": "Verify response code and body when generateStockisTrue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a792b196-16de-4341-844c-de8aa8b07827",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json().result;\r",
											"pm.environment.unset(\"lotUUID\");\r",
											"pm.environment.set(\"lotUUID\", jsonData);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0167f2bb-9d53-4dfe-be04-b5b2c28c70f9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered stockId prefix > 15 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0108d86-aa1c-4a7e-9031-8b372f9829eb",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Stock ID Prefix must end with a letter\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab651635-6f8d-4d53-a938-21cf2335cdc5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"1234\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "362cac65-c33a-41f2-946d-7fb2d5952915",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Lot Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9dc13507-a268-4253-95e4-691200439ed7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when invalid unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24c55e31-56f3-4392-be36-f77a14577f74",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid inventory unit identifier\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8b947103-038d-4893-81f6-a8c6d51cc127",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when invalid locationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c691e46a-e755-4093-93c3-3b62249ac278",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid seed storage location\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e373c89-5b11-4ccb-a4f7-17cc56ad5222",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 0,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when invalid GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "129b0857-5095-4632-97a1-99fb7102e9cd",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid germplasm identifier\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7f18d01c-362b-410c-bfae-a4034095f81e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": 0,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when GID is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e247f93e-56de-4ef3-8b61-798ee4f6651e",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid request body.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "24b96a78-5a84-4fa6-b660-5e33c25ef170",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": \"test\",\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"SID\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered numeric stockId prefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3d069cd-bbbc-44fb-a5dd-85d7d885372f",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Stock ID Prefix must end with a letter\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "007fdfb5-6fe2-4704-b587-9c95d8af44c2",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": true,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockPrefix\": \"1234\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when generateStockisFalse (withStockId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "008ab82f-7361-433b-b808-abfe2c431bfe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b74fda95-a33a-4077-8381-9c4b9bc79146",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": false,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n \"stockId\": \"S{{$timestamp}}-1\", \r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when generateStockisFalse (withoutStockId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7004ba3-3ae9-4a87-9d13-d6c9ff738c4f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"StockId is required\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02f99c1a-71a2-4201-80f0-24995826b3ac",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"generateStock\": false,\r\n  \"gid\": {{germplasmDbId}},\r\n  \"locationId\": 6000,\r\n  \"notes\": \"new lot record\",\r\n  \"stockId\": \"\",\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /crops/{cropName}/lot-lists",
					"item": [
						{
							"name": "Verify response code when entered valid values to all fields - with StockIDPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7a43569-73e2-4c68-9720-ee3c8b3d848c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22e5c708-1763-4e12-91a3-22ac20fc44d7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"scaleName\": \"SEED_AMOUNT_kg\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when no scaleName specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31fee761-9452-4731-bfa9-5a2df19d1862",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Units are mandatory, please check for empty values\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6d8651f6-fca4-4271-aa1f-2ad5e6e5a503",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"\",\r\n      \"scaleName\": \"\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when no storageLocationAbbr specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de9ea49a-9e50-44d3-bfd8-25836319bccd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Storage location abbreviations are mandatory, please check for empty values\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09192bba-c58b-4b48-b4d8-5e5712e2ae63",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"\",\r\n      \"scaleName\": \"SEED_AMOUNT_kg\",\r\n      \"storageLocationAbbr\": \"\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca01efcf-1f93-4207-a1de-2f6c580ea9a8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The following gid(s): 10000 were not found in the system\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7b66b63a-0eed-4bce-aeca-704343114948",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": 10000,\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"scaleName\": \"SEED_AMOUNT_kg\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered string GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3a35736-3c88-42b1-b4e4-a6b3943354f5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid request body.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a57d5fc-0f54-4a7c-b620-a5570aebdc50",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": \"test\",\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"scaleName\": \"SEED_AMOUNT_kg\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid initial amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d535f42d-ebe2-428e-b939-9aa46528e7ec",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Some values for imported Amount have the wrong format, must be a positive integer or decimal number. Please correct them and try again.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "27d8b41f-7fde-4639-a95f-2fb62ddff8c7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 0,\r\n      \"notes\": \"created via postman\",\r\n      \"scaleName\": \"SEED_AMOUNT_kg\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec6a4dfb-4d0c-46d0-903b-b41ab93cfa04",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Lot Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faf24593-f4f7-4208-859b-ec50a831d49d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\",\r\n      \"scaleName\": \"SEED_AMOUNT_kg\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d75df34b-bb51-422c-8f9a-8445e2c5dad0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"We have not found the following Unit(s) invalid in the system. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d11aab0c-a9a6-41e5-8ab5-c1a7a52873dc",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"scaleName\": \"invalid\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid storage location ABBR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28c6c34c-3ed2-4371-9b27-d0c29aac5788",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The following Storage Location ABBR(s): invalid does not exist or not correspond to a Storage Location in the system. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1a36af9-73fb-49f8-8bf6-b2b63426af71",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"scaleName\": \"SEED_AMOUNT_kg\",\r\n      \"storageLocationAbbr\": \"invalid\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"SID\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when entered valid values - no StockIDPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a5bff55-7400-4642-9e7d-44dd4d3fb8e8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bfaaf566-77a9-4147-bbb6-a2adba703ce4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"scaleName\": \"SEED_AMOUNT_kg\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when entered stockId Prefix > 15 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5886f4b5-d525-4289-b1a0-70997a786d54",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Prefix length can not have more than 15 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bca378f3-9c08-47ea-831e-744afe546f5c",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"scaleName\": \"SEED_AMOUNT_kg\",\r\n      \"storageLocationAbbr\": \"DSS\"\r\n    }\r\n  ],\r\n  \"stockIdPrefix\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when entered duplicate stockId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7ecab39-8e76-48e6-a816-17b0440f7b01",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"We have found the following StockId(s): SID1-1 in the system. Please correct them and try again.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e701f1f0-186f-4221-a9fa-c582d45f56cd",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"scaleName\": \"SEED_AMOUNT_kg\",\r\n      \"storageLocationAbbr\": \"DSS\",\r\n      \"stockId\": \"SID1-1\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code when entered stockId > 35 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f38b7884-5864-44b8-aafa-0a47731674ae",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Stock Id can not have more than 35 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fe93755f-d62f-44ed-9645-fbe9cba6360e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotList\": [\r\n    {\r\n      \"gid\": {{germplasmDbId}},\r\n      \"initialBalance\": 100,\r\n      \"notes\": \"created via postman\",\r\n      \"scaleName\": \"SEED_AMOUNT_kg\",\r\n      \"storageLocationAbbr\": \"DSS\",\r\n      \"stockId\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /crops/{cropName}/lots/search",
					"item": [
						{
							"name": "Verify response code and body when entered GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea742506-9a09-4ae1-9ebd-82ad60a47274",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"searchRequestId\");\r",
											"pm.environment.set(\"searchRequestId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d5b1e7ba-32ea-47d7-9ef2-cef316ac2383",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gids\": [{{germplasmDbId}}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered createdDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8631b406-bddc-44ab-a97e-9ef388b5af7d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"createdDate\");\r",
											"pm.environment.set(\"createdDate\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "989e759a-238c-4c8d-9de0-913ec7dd652f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdDate\": \"2020-06-19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered status = Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6bd38fe-ccf6-4e8b-a34d-a36c1f09d241",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lstatus\");\r",
											"pm.environment.set(\"lstatus\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a59d40b-2667-45c0-a1aa-851d2f8bf44e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when filter by specific closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c2e8f62-798e-44e8-a9b3-0e0367c58136",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"cstatus\");\r",
											"pm.environment.set(\"cstatus\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be169474-4193-4603-9014-853dc8861a52",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": 1,\r\n  \"stockId\": \"SID9-1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04f8844a-fe9f-43f0-886d-86a37aaa264a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"unitId\");\r",
											"pm.environment.set(\"unitId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98277610-e5a6-44da-97c5-d660355fea5e",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered createdByUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f4e2b32-96e7-41ee-9aa6-4f7c4697dee0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"createdByUsername\");\r",
											"pm.environment.set(\"createdByUsername\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "200d52c7-5963-41e8-b1d4-0069b9f7d885",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"createdByUsername\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered germplasmListIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f1eed0e-f7b2-474e-ae4f-e838c0748d64",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"germplasmListIds\");\r",
											"pm.environment.set(\"germplasmListIds\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7cf4d8ba-f432-4203-b112-bf4beff8db73",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"germplasmListIds\": [2]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered stockId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cd42a0f-3805-4a85-a1d3-e0dda03b77b1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"stockId\");\r",
											"pm.environment.set(\"stockId\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "363d56ad-e75c-4d5d-a684-a1d8fb71d227",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"stockId\": \"SID1-1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered lotUUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a457af0-fb71-4c42-8efa-8bcbba37fc34",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lotUUIDs\");\r",
											"pm.environment.set(\"lotUUIDs\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0c169142-ebc2-45d1-bec0-a4975f89c26d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotUUIDs\": [\"24745a1f-0871-4531-9ec6-b46da0f1c81f\",\"ab5b9671-342f-48c2-9b22-10035b8dd6df\",\"48172afa-7a7f-4ca1-9d68-9f6bccdb2fb1\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered multiple lotids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c540224-2415-45c4-a9b1-06bc7c145599",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"multiplelots\");\r",
											"pm.environment.set(\"multiplelots\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "46c2d8e8-98f6-4b62-899f-abb7b9d2d464",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lotIds\": [1, 2,3,4]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered designation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02b58b5c-6e5e-41ab-a17b-e59093d8aaf7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"lot_desig\");\r",
											"pm.environment.set(\"lot_desig\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "11d3dfb6-56bf-449b-8fe5-d53f3f6cdd33",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"designation\": \"CML1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered actualBalance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "faa61a4e-e99f-4c51-9bf7-d992457956d1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.unset(\"actualBalance\");\r",
											"pm.environment.set(\"actualBalance\", jsonData.result.searchResultDbId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ba1ff705-8075-4cc2-b17b-14e811570c36",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"minActualBalance\": 1,\r\n  \"minActualBalance\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{cropName}/lots/search",
					"item": [
						{
							"name": "Verify results when entered searchRequestId that filters by GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b47929d8-7350-446a-b9b3-4165b4fde4af",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  var dataLength = jsonData.length;\r",
											"\r",
											"  for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==194){\r",
											"              pm.expect(jsonData[0].gid).to.eql(21);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"              console.log(\"index:\"+i+ \"Found! \");\r",
											"          }\r",
											"          \r",
											"      }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5f6c419-1fbd-49a7-80a4-734fce2df501",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{searchRequestId}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{searchRequestId}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by createdDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fb49f74-c79b-4f4e-b67a-5b4e1614d667",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  var dataLength = jsonData.length;\r",
											"\r",
											"  for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==194){\r",
											"              pm.expect(jsonData[0].gid).to.eql(21);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"              pm.expect(jsonData[0].createdDate).to.eql(\"2020-06-24\");\r",
											"              console.log(\"index:\"+i+ \"Found! \");\r",
											"          }\r",
											"          \r",
											"      }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "17ef6803-6c4e-4d20-abe1-5aca77d74f47",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{createdDate}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{createdDate}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by status=Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab778fff-7e3f-4c65-8282-e9f9ec456783",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  var dataLength = jsonData.length;\r",
											"\r",
											"  for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==194){\r",
											"              pm.expect(jsonData[0].gid).to.eql(21);\r",
											"              pm.expect(jsonData[0].status).to.eql(\"ACTIVE\");\r",
											"              console.log(\"index:\"+i+ \"Found! \");\r",
											"          }\r",
											"          \r",
											"      }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "34586fb9-2c8b-4940-9b18-a9b042658e49",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{lstatus}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{lstatus}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afbfd4d7-965f-4ba1-8042-f4b96274ab75",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"            pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"            pm.expect(jsonData[0].createdDate).to.eql(\"2020-06-24\");\r",
											"             pm.expect(jsonData[0].unitName).to.eql(\"SEED_AMOUNT_kg\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "822b4545-a856-4788-9946-391c471711e4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{unitId}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{unitId}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by germplasmListIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8f78a6d-39b7-4ebc-90a9-fc8b03cec3c0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"            pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"            pm.expect(jsonData[0].createdDate).to.eql(\"2020-06-24\");\r",
											"             pm.expect(jsonData[0].unitName).to.eql(\"SEED_AMOUNT_kg\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af37f4e1-64ee-4f11-8db7-2ce19db77a76",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{germplasmListIds}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{germplasmListIds}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by multiple lot ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56786d30-5367-4547-8258-c9223bba45e2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"            pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"            pm.expect(jsonData[0].createdDate).to.eql(\"2020-06-24\");\r",
											"             pm.expect(jsonData[0].unitName).to.eql(\"SEED_AMOUNT_kg\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5afcf6d-62a5-4ea7-8dda-69ea65eb4222",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{multiplelots}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{multiplelots}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by designation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3a5959f-0acb-4a99-b358-1029bc25b6a0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  var dataLength = jsonData.length;\r",
											"\r",
											"  for (i = 0; i < dataLength ; i++) {\r",
											"            var lotId =jsonData[i].lotId\r",
											"          if(lotId==194){\r",
											"              pm.expect(jsonData[0].gid).to.eql(21);\r",
											"              pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"              console.log(\"index:\"+i+ \"Found! \");\r",
											"          }\r",
											"          \r",
											"      }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef1e33f5-7157-46f6-a965-ea87e12aff3a",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{lot_desig}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{lot_desig}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by stockId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "120b7a1c-a3ee-4a96-bc5a-002e3a05db50",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"            pm.expect(jsonData[0].designation).to.eql(\"CML1\");\r",
											"            pm.expect(jsonData[0].createdDate).to.eql(\"2020-06-24\");\r",
											"             pm.expect(jsonData[0].stockId).to.eql(\"SID21-1\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f40a4e0-53b1-4032-9a0d-cb25f5455c4f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{stockId}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{stockId}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by lotUUIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa6fcd8c-a1e6-491c-b586-2bd676a334d0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"             pm.expect(jsonData[0].lotUUID).to.eql(\"269ab93d-2390-4be2-ad0e-6e32b84c644e\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c068633d-5876-47e4-b085-63ab532c3159",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{lotUUIDs}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{lotUUIDs}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by createdByUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34473489-04b4-4319-a4ed-332cf9967543",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"             pm.expect(jsonData[0].createdByUsername).to.eql(\"admin\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "86e53496-af6b-41cb-ac18-2162496e7019",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{createdByUsername}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{createdByUsername}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered searchRequestId that filters by actualBalance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c37e826-7983-47e1-a631-3716b8721b1a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"             pm.expect(jsonData[0].actualBalance).to.eql(100.0);\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7f9c7b48-6838-4b63-8428-c1deb3173e84",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId={{actualBalance}}&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "{{actualBalance}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify results when entered invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a1dc44c-9c9d-4a24-8d28-81e58b71d162",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0eadf229-37e9-45d2-9d99-aa09bb3c9ad3",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/search?searchRequestId=0&page=0&size=50&sort=lotid,desc",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"search"
									],
									"query": [
										{
											"key": "searchRequestId",
											"value": "0"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "lotid,desc"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /crops/{cropName}/lots/metadata",
					"item": [
						{
							"name": "Verify response code and body when entered valid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b9c23fc-880a-400a-95f2-0b34215aae36",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check lotsCountByUnitName is not null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lotsCountByUnitName).not.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "295c601c-b57f-44df-8278-f960490afaae",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    \"{{lotUUID}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/metadata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid lotid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a39fcab-1aca-49c3-958e-7dc74dbe5dfc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Some of the lot UUIDs were not found. Please review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3700bc6a-ad7c-4af4-90e7-23e23e76f52f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    0\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/metadata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid searchRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac04a44b-5c2b-4d81-b1b8-2fd0d0108923",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "135dacd7-4a98-4f5d-8fdf-221bd6f29d91",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/metadata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered valid searchRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16799019-3279-43b2-b097-56da0f5436c8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify returned lotsCountByUnitName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lotsCountByUnitName.SEED_AMOUNT_kg).to.not.eql(null);\r",
											"    pm.expect(jsonData.lotsCountByUnitName.SEED_AMOUNT_g).to.not.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "856e3035-06a6-407b-863a-e50d7fc8d1a9",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": {{searchRequestId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/metadata",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"metadata"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PATCH /crops/{cropName}/lot-lists",
					"item": [
						{
							"name": "Verify response code and body when all values are valid - lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0d303d1-912c-43d3-94fd-1a454c13c23d",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f835174-fa87-4081-bafc-88ab0e642bd5",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 21,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"itemIds\": [\r\n       \"{{lotUUID}}\"\r\n    ]\r\n  },\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "800c283b-3784-4774-8865-cb9235a3c29d",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Some of the lot UUIDs were not found. Please review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "db3388b3-12e3-4c2f-a292-78efbd6074ef",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 22,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"itemIds\": [\r\n      0\r\n    ]\r\n  },\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca79d68b-973c-404f-a5b3-1ee39f709387",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"pm.globals.set(\"variable_key\", \"variable_value\");\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53f66426-7545-4c5e-aac4-aea31f1a747f",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 0,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"searchRequest\": 10\r\n  },\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid GID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01d716bf-4f58-451d-bd69-0a08eaf848af",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid germplasm identifier\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "91f37387-f2e6-4341-ad9e-a7bafaf324db",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 1111111111,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"itemIds\": [\r\n       \"{{lotUUID}}\"\r\n    ]\r\n  },\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered notes > 255 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f94e9be1-987f-4f1a-bbe9-1d59c73175d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"The max length of Lot Notes is 255 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35835fc3-99fb-4379-bbfa-54a6a4773fb7",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 21,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\",\r\n    \"scaleName\": \"SEED_AMOUNT_kg\",\r\n  \"searchComposite\": {\r\n    \"itemIds\": [\r\n       \"{{lotUUID}}\"\r\n    ]\r\n  },\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid unitId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ebcd45c-c170-4b21-82c1-2e339ff5281a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid inventory unit identifier\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dbbe67ec-aa82-424c-87be-d7bcbe148c15",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 24,\r\n  \"locationId\": 6000,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"itemIds\": [\r\n       \"{{lotUUID}}\"\r\n    ]\r\n  },\r\n  \"unitId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid locationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe917294-e5bc-4a3a-a02c-8e74052993a1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Invalid seed storage location\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1df3c903-19b4-4e2d-ad37-fc9abe5bf286",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gid\": 21,\r\n  \"locationId\": 0,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"itemIds\": [\r\n       \"{{lotUUID}}\"\r\n    ]\r\n  },\r\n  \"unitId\": 8264\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body if there is a closed lot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cd3bbab-9345-41c8-a376-586cfb623b86",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"1 selected lots are closed. Please review \");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "33d912f0-ec88-4d94-9491-9123f3412dd4",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"locationId\": 6000,\r\n  \"notes\": \"updated via postman\",\r\n  \"searchComposite\": {\r\n    \"searchRequest\": {{cstatus}}\r\n  },\r\n    \"unitId\": 8264\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lot-lists"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET ​/crops​/{cropName}​/lots​/lotUUID",
					"item": [
						{
							"name": "Verify response code and body when entered valid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a454e543-a294-48d8-a07d-734edf038cbe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check existing lot record\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var dataLength = jsonData.length;\r",
											"\r",
											"    for (i = 0; i < dataLength; i++) {\r",
											"        var lotId = jsonData[i].lotId\r",
											"        if (lotId == 194) {\r",
											"            pm.expect(jsonData[0].gid).to.eql(21);\r",
											"             pm.expect(jsonData[0].lotUUID).to.eql(\"269ab93d-2390-4be2-ad0e-6e32b84c644e\");\r",
											"            console.log(\"index:\" + i + \"Found! \");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "70204f5a-4403-4e51-85c7-55c705647b93",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/{{lotUUID}}",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"{{lotUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b90c34fd-ea6b-41ed-9a1a-5832183acd7a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bc1be9a7-e31b-4ca7-8095-f125904a970d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/0",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"0"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST /crops/{cropName}/lots/close",
					"item": [
						{
							"name": "Verify response code and body when entered valid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0275e52-f6af-49df-8e49-6c18bf36c66b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e07d435d-5afc-455d-8433-68df42bc216d",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n       \"{{lotUUID}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/close",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid lotUUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbdb06fc-c935-4fce-8e18-2f720d2ba34d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Some of the lot UUIDs were not found. Please review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "791183b2-e56a-4526-8c7e-d0de1c47c0c6",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemIds\": [\r\n    \"0\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/close",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body when entered invalid searchRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "415c97bf-4c4b-449f-9e47-ffafed812120",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"Error when trying to get the search request. Id is null or does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "678db9c3-02e8-44d9-ba04-39be0037c169",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/close",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response code and body if there is an existing closed lot - valid searchRequestId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f21b0f21-6d48-471f-8bde-4de127d7f102",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error message\", function () {\r",
											"    var error = pm.response.json().errors[0].message;\r",
											"    pm.expect(error).to.eql(\"1 selected lots are closed. Please review \");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09a0190a-f35c-4352-91c9-54b9f4463023",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"searchRequest\": {{cstatus}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/lots/close",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"lots",
										"close"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET /crops/{cropName}/lot-lists/template/xls",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50b722be-c77f-4154-ab30-f763c0dd01ef",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "426e9746-4274-408a-b2e0-8cf8feee61f6",
								"exec": [
									"const echoPostRequest = {\r",
									"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'application/json',\r",
									"    raw: JSON.stringify({\r",
									"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
									"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
									"        \t\"grant_type\": \"\",\r",
									"            \"client_id\": \"\"\r",
									"        })\r",
									"  }\r",
									"};\r",
									"\r",
									"var getToken = true;\r",
									"\r",
									"if (!pm.environment.get('masterTokenExpiry') || \r",
									"    !pm.environment.get('masterToken')) {\r",
									"    console.log('Token or expiry date are missing')\r",
									"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
									"    console.log('Token is expired')\r",
									"} else {\r",
									"    getToken = false;\r",
									"    console.log('Token and expiry date are all good');\r",
									"}\r",
									"\r",
									"if (getToken === true) {\r",
									"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"    console.log(err ? err : res.json());\r",
									"        if (err === null) {\r",
									"            console.log('Saving the token and expiry date')\r",
									"            var responseJson = res.json();\r",
									"            pm.environment.set('masterToken', responseJson.access_token)\r",
									"    \r",
									"            var expiryDate = new Date();\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.get(\"variable_key\");\r",
									"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/lot-lists/templates/xls",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"lot-lists",
								"templates",
								"xls"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "inventory-unit-resource",
			"item": [
				{
					"name": "GET ​/crops​/{cropName}​/inventory-units",
					"item": [
						{
							"name": "Verify response code and body when entered valid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb38eb7a-97f4-49ae-a7be-fd159deaa214",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check id value for each item\", function () {",
											"  var id = [\"8264\",\"8267\", \"8266\", \"8268\", \"8710\"];",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].id).to.eql(id[i]);",
											"  }",
											"});",
											"",
											"pm.test(\"Check name value for each item\", function () {",
											"  var name = [\"SEED_AMOUNT_g\", \"SEED_AMOUNT_kg\", \"SEED_AMOUNT_No\", \"SEED_AMOUNT_Packets\", \"SEED_AMOUNT_t\"];",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].name).to.eql(name[i]);",
											"  }",
											"});",
											"",
											"pm.test(\"Check alias value for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].alias).to.eql(\"\");",
											"  }",
											"});",
											"",
											"pm.test(\"Check description value for each design\", function () {",
											"  var description = [\"Seed inventory amount deposited or withdrawn (g)\", \"Seed inventory amount deposited or withdrawn (kg)\",\"Seed inventoryamount deposited or withdrawn (no)\", \"Seed inventory amountdeposited or withdrawn (packets)\", \"Seed inventory amount deposited or withdrawn (t)\"];",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].description).to.eql(description[i]);",
											"  }",
											"});",
											"",
											"pm.test(\"Check property id value for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.id).to.eql(\"2620\");",
											"  }",
											"});",
											"",
											"pm.test(\"Check property name for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.name).to.eql(\"Inventory amount\");",
											"  }",
											"});",
											"pm.test(\"Check property description for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.description).to.eql(\"Amount of inventory storedor withdrawn\");",
											"  }",
											"});",
											"pm.test(\"Check property cropOntologyId for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.cropOntologyId).to.eql(null);",
											"  }",
											"});",
											"pm.test(\"Check property classes for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.classes[0]).to.eql(\"Seed storage\");",
											"    pm.expect(jsonData[i].property.classes[1]).to.eql(\"Seed increase methods\");",
											"  }",
											"});",
											"pm.test(\"Check property metadata for each item\", function () {",
											"  for (var i = 0; i < jsonData.length - 1; i++) {",
											"    pm.expect(jsonData[i].property.metadata.dateCreated).to.eql(\"2016-01-28T19:36:53.000Z\");",
											"     pm.expect(jsonData[i].property.metadata.lastModified).to.eql(null);",
											"     pm.expect(jsonData[i].property.metadata.editableFields).to.eql([]);",
											"     pm.expect(jsonData[i].property.metadata.deletable).to.eql(false);",
											"     pm.expect(jsonData[i].property.metadata.usage.observations).to.eql(0);",
											"     pm.expect(jsonData[i].property.metadata.usage.studies).to.eql(0);",
											"  }",
											"});",
											"",
											"pm.test(\"Check method for each item\", function () {",
											"  var itemsWithWeighedMeth = [0,1,4];",
											"  var itemsWithCountedMeth = [2,3];",
											"  for (var i = 0; i < itemsWithWeighedMeth.length - 1; i++) {",
											"    pm.expect(jsonData[i].method.id).to.eql(\"4090\");",
											"    pm.expect(jsonData[i].method.name).to.eql(\"Weighed\");",
											"    pm.expect(jsonData[i].method.description).to.eql(\"Weighing method\");",
											"    pm.expect(jsonData[i].property.metadata.dateCreated).to.eql(\"2016-01-28T19:36:53.000Z\");",
											"     pm.expect(jsonData[i].property.metadata.lastModified).to.eql(null);",
											"     pm.expect(jsonData[i].property.metadata.editableFields).to.eql([]);",
											"     pm.expect(jsonData[i].property.metadata.deletable).to.eql(false);",
											"     pm.expect(jsonData[i].property.metadata.usage.observations).to.eql(0);",
											"     pm.expect(jsonData[i].property.metadata.usage.studies).to.eql(0);",
											"  }",
											"    for (var j = 0; i < itemsWithCountedMeth.length - 1; j++) {",
											"    pm.expect(jsonData[i].method.id).to.eql(\"4080\");",
											"    pm.expect(jsonData[i].method.name).to.eql(\"Counted\");",
											"    pm.expect(jsonData[i].method.description).to.eql(\"Counting method\");",
											"    pm.expect(jsonData[i].property.metadata.dateCreated).to.eql(\"2016-01-28T19:36:53.000Z\");",
											"     pm.expect(jsonData[i].property.metadata.lastModified).to.eql(null);",
											"     pm.expect(jsonData[i].property.metadata.editableFields).to.eql([]);",
											"     pm.expect(jsonData[i].property.metadata.deletable).to.eql(false);",
											"     pm.expect(jsonData[i].property.metadata.usage.observations).to.eql(0);",
											"     pm.expect(jsonData[i].property.metadata.usage.studies).to.eql(0);",
											"  }",
											"});",
											"",
											"",
											"//Todo assert remaining of the details"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "838bac20-4725-4be3-8027-80d6b498d7b8",
										"exec": [
											"const echoPostRequest = {\r",
											"  url: pm.environment.get(\"BMSurl\")+\"/brapi/v1/token\",\r",
											"  method: 'POST',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"    mode: 'application/json',\r",
											"    raw: JSON.stringify({\r",
											"        \t\"username\": pm.environment.get(\"bms_user\"),\r",
											"        \t\"password\": pm.environment.get(\"bms_password\"),\r",
											"        \t\"grant_type\": \"\",\r",
											"            \"client_id\": \"\"\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"var getToken = true;\r",
											"\r",
											"if (!pm.environment.get('masterTokenExpiry') || \r",
											"    !pm.environment.get('masterToken')) {\r",
											"    console.log('Token or expiry date are missing')\r",
											"} else if (pm.environment.get('masterTokenExpiry') <= (new Date()).getTime()) {\r",
											"    console.log('Token is expired')\r",
											"} else {\r",
											"    getToken = false;\r",
											"    console.log('Token and expiry date are all good');\r",
											"}\r",
											"\r",
											"if (getToken === true) {\r",
											"    pm.sendRequest(echoPostRequest, function (err, res) {\r",
											"    console.log(err ? err : res.json());\r",
											"        if (err === null) {\r",
											"            console.log('Saving the token and expiry date')\r",
											"            var responseJson = res.json();\r",
											"            pm.environment.set('masterToken', responseJson.access_token)\r",
											"    \r",
											"            var expiryDate = new Date();\r",
											"pm.globals.get(\"variable_key\");\r",
											"pm.globals.get(\"variable_key\");\r",
											"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
											"            pm.environment.set('masterTokenExpiry', expiryDate.getTime());\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Auth-Token",
										"type": "text",
										"value": "{{masterToken}}"
									}
								],
								"url": {
									"raw": "{{BMSurl}}/crops/{{crop}}/inventory-units",
									"host": [
										"{{BMSurl}}"
									],
									"path": [
										"crops",
										"{{crop}}",
										"inventory-units"
									]
								},
								"description": "GET ​/crops​/{cropName}​/inventory-units"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b5e5dcb7-aaa0-4b3c-8285-a4e3c6aa4773",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "dd9bdb01-2136-4a1b-be90-250dfc453fdb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}